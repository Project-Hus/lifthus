// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "lifthus531@gmail.com",
            "email": "lifthus531@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/hus/session/sign": {
            "post": {
                "description": "Hus sends SID and UID which are verified and Lifthus sets the session token to be signed in.",
                "tags": [
                    "auth"
                ],
                "summary": "gets lifthus sid and uid from Hus and sets the session token to be signed in.",
                "responses": {
                    "200": {
                        "description": "session signing success"
                    },
                    "500": {
                        "description": "failed to set the login session"
                    }
                }
            }
        },
        "/session/access": {
            "post": {
                "description": "Hus told lifthus that the user is signed in.\nso now we can publish access token to the client who has verified sid.\nand also we revoke the used session token.",
                "tags": [
                    "auth"
                ],
                "summary": "gets lifthus sid in cookie from client and publishes access token.",
                "responses": {
                    "201": {
                        "description": "publishing access token success"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            }
        },
        "/session/new": {
            "post": {
                "description": "at the same time the user opens Lifthus from browser, the client requests new session token.\nand Lifthus auth server returns session id with session token in cookie.",
                "tags": [
                    "auth"
                ],
                "summary": "when lifthus web app is opened, session token is assigned.",
                "responses": {
                    "201": {
                        "description": "returns session id with session token in cookie"
                    },
                    "500": {
                        "description": "failed to create new session"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.0",
	Host:             "lifthus.com",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Lifthus user server",
	Description:      "This is Project-Hus's subservice Lifthus's user management server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

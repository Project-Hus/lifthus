// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "lifthus531@gmail.com",
            "email": "lifthus531@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/hus/session/sign": {
            "post": {
                "description": "Hus sends SID and UID which are verified and Lifthus sets the session token to be signed in.",
                "tags": [
                    "auth"
                ],
                "summary": "gets lifthus sid and uid from Hus and sets the session token to be signed in.",
                "responses": {
                    "200": {
                        "description": "session signing success"
                    },
                    "500": {
                        "description": "failed to set the login session"
                    }
                }
            }
        },
        "/session/new": {
            "get": {
                "description": "case A: no session, return newly generated session token with 201.\ncase B-1: signed but expired, reset session info(used, signed_at, uid) except SID and return new session token with 201.\ncase B-2: not signed and expired, return new session token keeping SID with 201.\ncase C-1: valid and signed, just return with 200.\ncase C-2: valid and not signed, return with 201 to tell client to check Hus session.",
                "tags": [
                    "auth"
                ],
                "summary": "accepts tokens in cookie, parse and validate them, and returns tokens depending on the token's status.",
                "responses": {
                    "200": {
                        "description": "if valid session exists, return uid"
                    },
                    "201": {
                        "description": "if there's no session or existing session is expired, return new session token"
                    },
                    "500": {
                        "description": "failed to create new session"
                    }
                }
            }
        },
        "/session/sign": {
            "post": {
                "description": "Hus told lifthus that the user is signed in.\nso now we can sign the token which is owned by the client who has verified sid.",
                "tags": [
                    "auth"
                ],
                "summary": "gets lifthus sid in cookie from client and signs the lifthus token.",
                "responses": {
                    "200": {
                        "description": "session successfully signed"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.0",
	Host:             "lifthus.com",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Lifthus user server",
	Description:      "This is Project-Hus's subservice Lifthus's user management server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

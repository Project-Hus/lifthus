// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/s3image"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// S3Image is the model entity for the S3Image schema.
type S3Image struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Src holds the value of the "src" field.
	Src string `json:"src,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the S3ImageQuery when eager-loading is set.
	Edges        S3ImageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// S3ImageEdges holds the relations/edges for other nodes in the graph.
type S3ImageEdges struct {
	// S3ActImages holds the value of the s3_act_images edge.
	S3ActImages []*S3ActImage `json:"s3_act_images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// S3ActImagesOrErr returns the S3ActImages value or an error if the edge
// was not loaded in eager-loading.
func (e S3ImageEdges) S3ActImagesOrErr() ([]*S3ActImage, error) {
	if e.loadedTypes[0] {
		return e.S3ActImages, nil
	}
	return nil, &NotLoadedError{edge: "s3_act_images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*S3Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case s3image.FieldID:
			values[i] = new(sql.NullInt64)
		case s3image.FieldKey, s3image.FieldSrc:
			values[i] = new(sql.NullString)
		case s3image.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the S3Image fields.
func (s *S3Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case s3image.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case s3image.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				s.Key = value.String
			}
		case s3image.FieldSrc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src", values[i])
			} else if value.Valid {
				s.Src = value.String
			}
		case s3image.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the S3Image.
// This includes values selected through modifiers, order, etc.
func (s *S3Image) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryS3ActImages queries the "s3_act_images" edge of the S3Image entity.
func (s *S3Image) QueryS3ActImages() *S3ActImageQuery {
	return NewS3ImageClient(s.config).QueryS3ActImages(s)
}

// Update returns a builder for updating this S3Image.
// Note that you need to call S3Image.Unwrap() before calling this method if this S3Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *S3Image) Update() *S3ImageUpdateOne {
	return NewS3ImageClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the S3Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *S3Image) Unwrap() *S3Image {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: S3Image is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *S3Image) String() string {
	var builder strings.Builder
	builder.WriteString("S3Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("key=")
	builder.WriteString(s.Key)
	builder.WriteString(", ")
	builder.WriteString("src=")
	builder.WriteString(s.Src)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// S3Images is a parsable slice of S3Image.
type S3Images []*S3Image

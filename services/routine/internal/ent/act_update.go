// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/actversion"
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActUpdate is the builder for updating Act entities.
type ActUpdate struct {
	config
	hooks    []Hook
	mutation *ActMutation
}

// Where appends a list predicates to the ActUpdate builder.
func (au *ActUpdate) Where(ps ...predicate.Act) *ActUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAuthor sets the "author" field.
func (au *ActUpdate) SetAuthor(u uint64) *ActUpdate {
	au.mutation.ResetAuthor()
	au.mutation.SetAuthor(u)
	return au
}

// AddAuthor adds u to the "author" field.
func (au *ActUpdate) AddAuthor(u int64) *ActUpdate {
	au.mutation.AddAuthor(u)
	return au
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by IDs.
func (au *ActUpdate) AddActVersionIDs(ids ...uint64) *ActUpdate {
	au.mutation.AddActVersionIDs(ids...)
	return au
}

// AddActVersions adds the "act_versions" edges to the ActVersion entity.
func (au *ActUpdate) AddActVersions(a ...*ActVersion) *ActUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddActVersionIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (au *ActUpdate) Mutation() *ActMutation {
	return au.mutation
}

// ClearActVersions clears all "act_versions" edges to the ActVersion entity.
func (au *ActUpdate) ClearActVersions() *ActUpdate {
	au.mutation.ClearActVersions()
	return au
}

// RemoveActVersionIDs removes the "act_versions" edge to ActVersion entities by IDs.
func (au *ActUpdate) RemoveActVersionIDs(ids ...uint64) *ActUpdate {
	au.mutation.RemoveActVersionIDs(ids...)
	return au
}

// RemoveActVersions removes "act_versions" edges to ActVersion entities.
func (au *ActUpdate) RemoveActVersions(a ...*ActVersion) *ActUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveActVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ActUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(act.Table, act.Columns, sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := au.mutation.AddedAuthor(); ok {
		_spec.AddField(act.FieldAuthor, field.TypeUint64, value)
	}
	if au.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.ActVersionsTable,
			Columns: []string{act.ActVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedActVersionsIDs(); len(nodes) > 0 && !au.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.ActVersionsTable,
			Columns: []string{act.ActVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.ActVersionsTable,
			Columns: []string{act.ActVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{act.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActUpdateOne is the builder for updating a single Act entity.
type ActUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActMutation
}

// SetAuthor sets the "author" field.
func (auo *ActUpdateOne) SetAuthor(u uint64) *ActUpdateOne {
	auo.mutation.ResetAuthor()
	auo.mutation.SetAuthor(u)
	return auo
}

// AddAuthor adds u to the "author" field.
func (auo *ActUpdateOne) AddAuthor(u int64) *ActUpdateOne {
	auo.mutation.AddAuthor(u)
	return auo
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by IDs.
func (auo *ActUpdateOne) AddActVersionIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.AddActVersionIDs(ids...)
	return auo
}

// AddActVersions adds the "act_versions" edges to the ActVersion entity.
func (auo *ActUpdateOne) AddActVersions(a ...*ActVersion) *ActUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddActVersionIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (auo *ActUpdateOne) Mutation() *ActMutation {
	return auo.mutation
}

// ClearActVersions clears all "act_versions" edges to the ActVersion entity.
func (auo *ActUpdateOne) ClearActVersions() *ActUpdateOne {
	auo.mutation.ClearActVersions()
	return auo
}

// RemoveActVersionIDs removes the "act_versions" edge to ActVersion entities by IDs.
func (auo *ActUpdateOne) RemoveActVersionIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.RemoveActVersionIDs(ids...)
	return auo
}

// RemoveActVersions removes "act_versions" edges to ActVersion entities.
func (auo *ActUpdateOne) RemoveActVersions(a ...*ActVersion) *ActUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveActVersionIDs(ids...)
}

// Where appends a list predicates to the ActUpdate builder.
func (auo *ActUpdateOne) Where(ps ...predicate.Act) *ActUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActUpdateOne) Select(field string, fields ...string) *ActUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Act entity.
func (auo *ActUpdateOne) Save(ctx context.Context) (*Act, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActUpdateOne) SaveX(ctx context.Context) *Act {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ActUpdateOne) sqlSave(ctx context.Context) (_node *Act, err error) {
	_spec := sqlgraph.NewUpdateSpec(act.Table, act.Columns, sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Act.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, act.FieldID)
		for _, f := range fields {
			if !act.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != act.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.AddedAuthor(); ok {
		_spec.AddField(act.FieldAuthor, field.TypeUint64, value)
	}
	if auo.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.ActVersionsTable,
			Columns: []string{act.ActVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedActVersionsIDs(); len(nodes) > 0 && !auo.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.ActVersionsTable,
			Columns: []string{act.ActVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.ActVersionsTable,
			Columns: []string{act.ActVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Act{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{act.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

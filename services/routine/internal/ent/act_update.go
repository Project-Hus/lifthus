// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/predicate"
	"routine/internal/ent/routineact"
	"routine/internal/ent/s3actimage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActUpdate is the builder for updating Act entities.
type ActUpdate struct {
	config
	hooks    []Hook
	mutation *ActMutation
}

// Where appends a list predicates to the ActUpdate builder.
func (au *ActUpdate) Where(ps ...predicate.Act) *ActUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAuthor sets the "author" field.
func (au *ActUpdate) SetAuthor(i int64) *ActUpdate {
	au.mutation.ResetAuthor()
	au.mutation.SetAuthor(i)
	return au
}

// AddAuthor adds i to the "author" field.
func (au *ActUpdate) AddAuthor(i int64) *ActUpdate {
	au.mutation.AddAuthor(i)
	return au
}

// SetText sets the "text" field.
func (au *ActUpdate) SetText(s string) *ActUpdate {
	au.mutation.SetText(s)
	return au
}

// SetStandard sets the "standard" field.
func (au *ActUpdate) SetStandard(b bool) *ActUpdate {
	au.mutation.SetStandard(b)
	return au
}

// SetNillableStandard sets the "standard" field if the given value is not nil.
func (au *ActUpdate) SetNillableStandard(b *bool) *ActUpdate {
	if b != nil {
		au.SetStandard(*b)
	}
	return au
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by IDs.
func (au *ActUpdate) AddS3ActImageIDs(ids ...int64) *ActUpdate {
	au.mutation.AddS3ActImageIDs(ids...)
	return au
}

// AddS3ActImages adds the "s3_act_images" edges to the S3ActImage entity.
func (au *ActUpdate) AddS3ActImages(s ...*S3ActImage) *ActUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddS3ActImageIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (au *ActUpdate) AddRoutineActIDs(ids ...int64) *ActUpdate {
	au.mutation.AddRoutineActIDs(ids...)
	return au
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (au *ActUpdate) AddRoutineActs(r ...*RoutineAct) *ActUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoutineActIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (au *ActUpdate) Mutation() *ActMutation {
	return au.mutation
}

// ClearS3ActImages clears all "s3_act_images" edges to the S3ActImage entity.
func (au *ActUpdate) ClearS3ActImages() *ActUpdate {
	au.mutation.ClearS3ActImages()
	return au
}

// RemoveS3ActImageIDs removes the "s3_act_images" edge to S3ActImage entities by IDs.
func (au *ActUpdate) RemoveS3ActImageIDs(ids ...int64) *ActUpdate {
	au.mutation.RemoveS3ActImageIDs(ids...)
	return au
}

// RemoveS3ActImages removes "s3_act_images" edges to S3ActImage entities.
func (au *ActUpdate) RemoveS3ActImages(s ...*S3ActImage) *ActUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveS3ActImageIDs(ids...)
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (au *ActUpdate) ClearRoutineActs() *ActUpdate {
	au.mutation.ClearRoutineActs()
	return au
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (au *ActUpdate) RemoveRoutineActIDs(ids ...int64) *ActUpdate {
	au.mutation.RemoveRoutineActIDs(ids...)
	return au
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (au *ActUpdate) RemoveRoutineActs(r ...*RoutineAct) *ActUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoutineActIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ActUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(act.Table, act.Columns, sqlgraph.NewFieldSpec(act.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedAuthor(); ok {
		_spec.AddField(act.FieldAuthor, field.TypeInt64, value)
	}
	if value, ok := au.mutation.Text(); ok {
		_spec.SetField(act.FieldText, field.TypeString, value)
	}
	if value, ok := au.mutation.Standard(); ok {
		_spec.SetField(act.FieldStandard, field.TypeBool, value)
	}
	if au.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.S3ActImagesTable,
			Columns: []string{act.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedS3ActImagesIDs(); len(nodes) > 0 && !au.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.S3ActImagesTable,
			Columns: []string{act.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.S3ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.S3ActImagesTable,
			Columns: []string{act.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !au.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{act.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActUpdateOne is the builder for updating a single Act entity.
type ActUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActMutation
}

// SetAuthor sets the "author" field.
func (auo *ActUpdateOne) SetAuthor(i int64) *ActUpdateOne {
	auo.mutation.ResetAuthor()
	auo.mutation.SetAuthor(i)
	return auo
}

// AddAuthor adds i to the "author" field.
func (auo *ActUpdateOne) AddAuthor(i int64) *ActUpdateOne {
	auo.mutation.AddAuthor(i)
	return auo
}

// SetText sets the "text" field.
func (auo *ActUpdateOne) SetText(s string) *ActUpdateOne {
	auo.mutation.SetText(s)
	return auo
}

// SetStandard sets the "standard" field.
func (auo *ActUpdateOne) SetStandard(b bool) *ActUpdateOne {
	auo.mutation.SetStandard(b)
	return auo
}

// SetNillableStandard sets the "standard" field if the given value is not nil.
func (auo *ActUpdateOne) SetNillableStandard(b *bool) *ActUpdateOne {
	if b != nil {
		auo.SetStandard(*b)
	}
	return auo
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by IDs.
func (auo *ActUpdateOne) AddS3ActImageIDs(ids ...int64) *ActUpdateOne {
	auo.mutation.AddS3ActImageIDs(ids...)
	return auo
}

// AddS3ActImages adds the "s3_act_images" edges to the S3ActImage entity.
func (auo *ActUpdateOne) AddS3ActImages(s ...*S3ActImage) *ActUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddS3ActImageIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (auo *ActUpdateOne) AddRoutineActIDs(ids ...int64) *ActUpdateOne {
	auo.mutation.AddRoutineActIDs(ids...)
	return auo
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (auo *ActUpdateOne) AddRoutineActs(r ...*RoutineAct) *ActUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoutineActIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (auo *ActUpdateOne) Mutation() *ActMutation {
	return auo.mutation
}

// ClearS3ActImages clears all "s3_act_images" edges to the S3ActImage entity.
func (auo *ActUpdateOne) ClearS3ActImages() *ActUpdateOne {
	auo.mutation.ClearS3ActImages()
	return auo
}

// RemoveS3ActImageIDs removes the "s3_act_images" edge to S3ActImage entities by IDs.
func (auo *ActUpdateOne) RemoveS3ActImageIDs(ids ...int64) *ActUpdateOne {
	auo.mutation.RemoveS3ActImageIDs(ids...)
	return auo
}

// RemoveS3ActImages removes "s3_act_images" edges to S3ActImage entities.
func (auo *ActUpdateOne) RemoveS3ActImages(s ...*S3ActImage) *ActUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveS3ActImageIDs(ids...)
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (auo *ActUpdateOne) ClearRoutineActs() *ActUpdateOne {
	auo.mutation.ClearRoutineActs()
	return auo
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (auo *ActUpdateOne) RemoveRoutineActIDs(ids ...int64) *ActUpdateOne {
	auo.mutation.RemoveRoutineActIDs(ids...)
	return auo
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (auo *ActUpdateOne) RemoveRoutineActs(r ...*RoutineAct) *ActUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoutineActIDs(ids...)
}

// Where appends a list predicates to the ActUpdate builder.
func (auo *ActUpdateOne) Where(ps ...predicate.Act) *ActUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActUpdateOne) Select(field string, fields ...string) *ActUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Act entity.
func (auo *ActUpdateOne) Save(ctx context.Context) (*Act, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActUpdateOne) SaveX(ctx context.Context) *Act {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ActUpdateOne) sqlSave(ctx context.Context) (_node *Act, err error) {
	_spec := sqlgraph.NewUpdateSpec(act.Table, act.Columns, sqlgraph.NewFieldSpec(act.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Act.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, act.FieldID)
		for _, f := range fields {
			if !act.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != act.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedAuthor(); ok {
		_spec.AddField(act.FieldAuthor, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.Text(); ok {
		_spec.SetField(act.FieldText, field.TypeString, value)
	}
	if value, ok := auo.mutation.Standard(); ok {
		_spec.SetField(act.FieldStandard, field.TypeBool, value)
	}
	if auo.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.S3ActImagesTable,
			Columns: []string{act.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedS3ActImagesIDs(); len(nodes) > 0 && !auo.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.S3ActImagesTable,
			Columns: []string{act.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.S3ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.S3ActImagesTable,
			Columns: []string{act.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !auo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Act{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{act.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package dayroutine

import (
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldLTE(FieldID, id))
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldEQ(FieldDay, v))
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldEQ(FieldDay, v))
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldNEQ(FieldDay, v))
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldIn(FieldDay, vs...))
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldNotIn(FieldDay, vs...))
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldGT(FieldDay, v))
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldGTE(FieldDay, v))
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldLT(FieldDay, v))
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v int) predicate.DayRoutine {
	return predicate.DayRoutine(sql.FieldLTE(FieldDay, v))
}

// HasRoutineActs applies the HasEdge predicate on the "routine_acts" edge.
func HasRoutineActs() predicate.DayRoutine {
	return predicate.DayRoutine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoutineActsTable, RoutineActsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoutineActsWith applies the HasEdge predicate on the "routine_acts" edge with a given conditions (other predicates).
func HasRoutineActsWith(preds ...predicate.RoutineAct) predicate.DayRoutine {
	return predicate.DayRoutine(func(s *sql.Selector) {
		step := newRoutineActsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DayRoutine) predicate.DayRoutine {
	return predicate.DayRoutine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DayRoutine) predicate.DayRoutine {
	return predicate.DayRoutine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DayRoutine) predicate.DayRoutine {
	return predicate.DayRoutine(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package routineact

import (
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldID, id))
}

// DailyRoutineCode applies equality check predicate on the "daily_routine_code" field. It's identical to DailyRoutineCodeEQ.
func DailyRoutineCode(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldDailyRoutineCode, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldOrder, v))
}

// ActVersion applies equality check predicate on the "act_version" field. It's identical to ActVersionEQ.
func ActVersion(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldActVersion, v))
}

// RepsOrMeters applies equality check predicate on the "reps_or_meters" field. It's identical to RepsOrMetersEQ.
func RepsOrMeters(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRepsOrMeters, v))
}

// RatioOrSecs applies equality check predicate on the "ratio_or_secs" field. It's identical to RatioOrSecsEQ.
func RatioOrSecs(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRatioOrSecs, v))
}

// DailyRoutineCodeEQ applies the EQ predicate on the "daily_routine_code" field.
func DailyRoutineCodeEQ(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeNEQ applies the NEQ predicate on the "daily_routine_code" field.
func DailyRoutineCodeNEQ(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeIn applies the In predicate on the "daily_routine_code" field.
func DailyRoutineCodeIn(vs ...string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldDailyRoutineCode, vs...))
}

// DailyRoutineCodeNotIn applies the NotIn predicate on the "daily_routine_code" field.
func DailyRoutineCodeNotIn(vs ...string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldDailyRoutineCode, vs...))
}

// DailyRoutineCodeGT applies the GT predicate on the "daily_routine_code" field.
func DailyRoutineCodeGT(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeGTE applies the GTE predicate on the "daily_routine_code" field.
func DailyRoutineCodeGTE(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeLT applies the LT predicate on the "daily_routine_code" field.
func DailyRoutineCodeLT(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeLTE applies the LTE predicate on the "daily_routine_code" field.
func DailyRoutineCodeLTE(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeContains applies the Contains predicate on the "daily_routine_code" field.
func DailyRoutineCodeContains(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldContains(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeHasPrefix applies the HasPrefix predicate on the "daily_routine_code" field.
func DailyRoutineCodeHasPrefix(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldHasPrefix(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeHasSuffix applies the HasSuffix predicate on the "daily_routine_code" field.
func DailyRoutineCodeHasSuffix(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldHasSuffix(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeEqualFold applies the EqualFold predicate on the "daily_routine_code" field.
func DailyRoutineCodeEqualFold(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEqualFold(FieldDailyRoutineCode, v))
}

// DailyRoutineCodeContainsFold applies the ContainsFold predicate on the "daily_routine_code" field.
func DailyRoutineCodeContainsFold(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldContainsFold(FieldDailyRoutineCode, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldOrder, v))
}

// ActVersionEQ applies the EQ predicate on the "act_version" field.
func ActVersionEQ(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldActVersion, v))
}

// ActVersionNEQ applies the NEQ predicate on the "act_version" field.
func ActVersionNEQ(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldActVersion, v))
}

// ActVersionIn applies the In predicate on the "act_version" field.
func ActVersionIn(vs ...string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldActVersion, vs...))
}

// ActVersionNotIn applies the NotIn predicate on the "act_version" field.
func ActVersionNotIn(vs ...string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldActVersion, vs...))
}

// ActVersionGT applies the GT predicate on the "act_version" field.
func ActVersionGT(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldActVersion, v))
}

// ActVersionGTE applies the GTE predicate on the "act_version" field.
func ActVersionGTE(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldActVersion, v))
}

// ActVersionLT applies the LT predicate on the "act_version" field.
func ActVersionLT(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldActVersion, v))
}

// ActVersionLTE applies the LTE predicate on the "act_version" field.
func ActVersionLTE(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldActVersion, v))
}

// ActVersionContains applies the Contains predicate on the "act_version" field.
func ActVersionContains(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldContains(FieldActVersion, v))
}

// ActVersionHasPrefix applies the HasPrefix predicate on the "act_version" field.
func ActVersionHasPrefix(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldHasPrefix(FieldActVersion, v))
}

// ActVersionHasSuffix applies the HasSuffix predicate on the "act_version" field.
func ActVersionHasSuffix(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldHasSuffix(FieldActVersion, v))
}

// ActVersionEqualFold applies the EqualFold predicate on the "act_version" field.
func ActVersionEqualFold(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEqualFold(FieldActVersion, v))
}

// ActVersionContainsFold applies the ContainsFold predicate on the "act_version" field.
func ActVersionContainsFold(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldContainsFold(FieldActVersion, v))
}

// StageEQ applies the EQ predicate on the "stage" field.
func StageEQ(v Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldStage, v))
}

// StageNEQ applies the NEQ predicate on the "stage" field.
func StageNEQ(v Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldStage, v))
}

// StageIn applies the In predicate on the "stage" field.
func StageIn(vs ...Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldStage, vs...))
}

// StageNotIn applies the NotIn predicate on the "stage" field.
func StageNotIn(vs ...Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldStage, vs...))
}

// RepsOrMetersEQ applies the EQ predicate on the "reps_or_meters" field.
func RepsOrMetersEQ(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRepsOrMeters, v))
}

// RepsOrMetersNEQ applies the NEQ predicate on the "reps_or_meters" field.
func RepsOrMetersNEQ(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldRepsOrMeters, v))
}

// RepsOrMetersIn applies the In predicate on the "reps_or_meters" field.
func RepsOrMetersIn(vs ...uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldRepsOrMeters, vs...))
}

// RepsOrMetersNotIn applies the NotIn predicate on the "reps_or_meters" field.
func RepsOrMetersNotIn(vs ...uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldRepsOrMeters, vs...))
}

// RepsOrMetersGT applies the GT predicate on the "reps_or_meters" field.
func RepsOrMetersGT(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldRepsOrMeters, v))
}

// RepsOrMetersGTE applies the GTE predicate on the "reps_or_meters" field.
func RepsOrMetersGTE(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldRepsOrMeters, v))
}

// RepsOrMetersLT applies the LT predicate on the "reps_or_meters" field.
func RepsOrMetersLT(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldRepsOrMeters, v))
}

// RepsOrMetersLTE applies the LTE predicate on the "reps_or_meters" field.
func RepsOrMetersLTE(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldRepsOrMeters, v))
}

// RatioOrSecsEQ applies the EQ predicate on the "ratio_or_secs" field.
func RatioOrSecsEQ(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRatioOrSecs, v))
}

// RatioOrSecsNEQ applies the NEQ predicate on the "ratio_or_secs" field.
func RatioOrSecsNEQ(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldRatioOrSecs, v))
}

// RatioOrSecsIn applies the In predicate on the "ratio_or_secs" field.
func RatioOrSecsIn(vs ...float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldRatioOrSecs, vs...))
}

// RatioOrSecsNotIn applies the NotIn predicate on the "ratio_or_secs" field.
func RatioOrSecsNotIn(vs ...float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldRatioOrSecs, vs...))
}

// RatioOrSecsGT applies the GT predicate on the "ratio_or_secs" field.
func RatioOrSecsGT(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldRatioOrSecs, v))
}

// RatioOrSecsGTE applies the GTE predicate on the "ratio_or_secs" field.
func RatioOrSecsGTE(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldRatioOrSecs, v))
}

// RatioOrSecsLT applies the LT predicate on the "ratio_or_secs" field.
func RatioOrSecsLT(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldRatioOrSecs, v))
}

// RatioOrSecsLTE applies the LTE predicate on the "ratio_or_secs" field.
func RatioOrSecsLTE(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldRatioOrSecs, v))
}

// HasDailyRoutine applies the HasEdge predicate on the "daily_routine" edge.
func HasDailyRoutine() predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DailyRoutineTable, DailyRoutineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyRoutineWith applies the HasEdge predicate on the "daily_routine" edge with a given conditions (other predicates).
func HasDailyRoutineWith(preds ...predicate.DailyRoutine) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := newDailyRoutineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package routineact

import (
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldOrder, v))
}

// ActCode applies equality check predicate on the "act_code" field. It's identical to ActCodeEQ.
func ActCode(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldActCode, v))
}

// RepsOrMeters applies equality check predicate on the "reps_or_meters" field. It's identical to RepsOrMetersEQ.
func RepsOrMeters(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRepsOrMeters, v))
}

// RatioOrSecs applies equality check predicate on the "ratio_or_secs" field. It's identical to RatioOrSecsEQ.
func RatioOrSecs(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRatioOrSecs, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldOrder, v))
}

// ActCodeEQ applies the EQ predicate on the "act_code" field.
func ActCodeEQ(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldActCode, v))
}

// ActCodeNEQ applies the NEQ predicate on the "act_code" field.
func ActCodeNEQ(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldActCode, v))
}

// ActCodeIn applies the In predicate on the "act_code" field.
func ActCodeIn(vs ...string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldActCode, vs...))
}

// ActCodeNotIn applies the NotIn predicate on the "act_code" field.
func ActCodeNotIn(vs ...string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldActCode, vs...))
}

// ActCodeGT applies the GT predicate on the "act_code" field.
func ActCodeGT(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldActCode, v))
}

// ActCodeGTE applies the GTE predicate on the "act_code" field.
func ActCodeGTE(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldActCode, v))
}

// ActCodeLT applies the LT predicate on the "act_code" field.
func ActCodeLT(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldActCode, v))
}

// ActCodeLTE applies the LTE predicate on the "act_code" field.
func ActCodeLTE(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldActCode, v))
}

// ActCodeContains applies the Contains predicate on the "act_code" field.
func ActCodeContains(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldContains(FieldActCode, v))
}

// ActCodeHasPrefix applies the HasPrefix predicate on the "act_code" field.
func ActCodeHasPrefix(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldHasPrefix(FieldActCode, v))
}

// ActCodeHasSuffix applies the HasSuffix predicate on the "act_code" field.
func ActCodeHasSuffix(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldHasSuffix(FieldActCode, v))
}

// ActCodeEqualFold applies the EqualFold predicate on the "act_code" field.
func ActCodeEqualFold(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEqualFold(FieldActCode, v))
}

// ActCodeContainsFold applies the ContainsFold predicate on the "act_code" field.
func ActCodeContainsFold(v string) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldContainsFold(FieldActCode, v))
}

// StageEQ applies the EQ predicate on the "stage" field.
func StageEQ(v Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldStage, v))
}

// StageNEQ applies the NEQ predicate on the "stage" field.
func StageNEQ(v Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldStage, v))
}

// StageIn applies the In predicate on the "stage" field.
func StageIn(vs ...Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldStage, vs...))
}

// StageNotIn applies the NotIn predicate on the "stage" field.
func StageNotIn(vs ...Stage) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldStage, vs...))
}

// RepsOrMetersEQ applies the EQ predicate on the "reps_or_meters" field.
func RepsOrMetersEQ(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRepsOrMeters, v))
}

// RepsOrMetersNEQ applies the NEQ predicate on the "reps_or_meters" field.
func RepsOrMetersNEQ(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldRepsOrMeters, v))
}

// RepsOrMetersIn applies the In predicate on the "reps_or_meters" field.
func RepsOrMetersIn(vs ...uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldRepsOrMeters, vs...))
}

// RepsOrMetersNotIn applies the NotIn predicate on the "reps_or_meters" field.
func RepsOrMetersNotIn(vs ...uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldRepsOrMeters, vs...))
}

// RepsOrMetersGT applies the GT predicate on the "reps_or_meters" field.
func RepsOrMetersGT(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldRepsOrMeters, v))
}

// RepsOrMetersGTE applies the GTE predicate on the "reps_or_meters" field.
func RepsOrMetersGTE(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldRepsOrMeters, v))
}

// RepsOrMetersLT applies the LT predicate on the "reps_or_meters" field.
func RepsOrMetersLT(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldRepsOrMeters, v))
}

// RepsOrMetersLTE applies the LTE predicate on the "reps_or_meters" field.
func RepsOrMetersLTE(v uint) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldRepsOrMeters, v))
}

// RatioOrSecsEQ applies the EQ predicate on the "ratio_or_secs" field.
func RatioOrSecsEQ(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldRatioOrSecs, v))
}

// RatioOrSecsNEQ applies the NEQ predicate on the "ratio_or_secs" field.
func RatioOrSecsNEQ(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldRatioOrSecs, v))
}

// RatioOrSecsIn applies the In predicate on the "ratio_or_secs" field.
func RatioOrSecsIn(vs ...float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldRatioOrSecs, vs...))
}

// RatioOrSecsNotIn applies the NotIn predicate on the "ratio_or_secs" field.
func RatioOrSecsNotIn(vs ...float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldRatioOrSecs, vs...))
}

// RatioOrSecsGT applies the GT predicate on the "ratio_or_secs" field.
func RatioOrSecsGT(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldRatioOrSecs, v))
}

// RatioOrSecsGTE applies the GTE predicate on the "ratio_or_secs" field.
func RatioOrSecsGTE(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldRatioOrSecs, v))
}

// RatioOrSecsLT applies the LT predicate on the "ratio_or_secs" field.
func RatioOrSecsLT(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldRatioOrSecs, v))
}

// RatioOrSecsLTE applies the LTE predicate on the "ratio_or_secs" field.
func RatioOrSecsLTE(v float64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldRatioOrSecs, v))
}

// HasAct applies the HasEdge predicate on the "act" edge.
func HasAct() predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActWith applies the HasEdge predicate on the "act" edge with a given conditions (other predicates).
func HasActWith(preds ...predicate.Act) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := newActStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDayRoutine applies the HasEdge predicate on the "day_routine" edge.
func HasDayRoutine() predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DayRoutineTable, DayRoutineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDayRoutineWith applies the HasEdge predicate on the "day_routine" edge with a given conditions (other predicates).
func HasDayRoutineWith(preds ...predicate.DayRoutine) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := newDayRoutineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		p(s.Not())
	})
}

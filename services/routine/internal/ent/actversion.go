// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/actversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ActVersion is the model entity for the ActVersion schema.
type ActVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ActCode holds the value of the "act_code" field.
	ActCode string `json:"act_code,omitempty"`
	// Version holds the value of the "version" field.
	Version uint `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActVersionQuery when eager-loading is set.
	Edges            ActVersionEdges `json:"edges"`
	act_act_versions *uint64
	selectValues     sql.SelectValues
}

// ActVersionEdges holds the relations/edges for other nodes in the graph.
type ActVersionEdges struct {
	// Act holds the value of the act edge.
	Act *Act `json:"act,omitempty"`
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// ActImages holds the value of the act_images edge.
	ActImages []*ActImage `json:"act_images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActOrErr returns the Act value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActVersionEdges) ActOrErr() (*Act, error) {
	if e.loadedTypes[0] {
		if e.Act == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: act.Label}
		}
		return e.Act, nil
	}
	return nil, &NotLoadedError{edge: "act"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e ActVersionEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[1] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// ActImagesOrErr returns the ActImages value or an error if the edge
// was not loaded in eager-loading.
func (e ActVersionEdges) ActImagesOrErr() ([]*ActImage, error) {
	if e.loadedTypes[2] {
		return e.ActImages, nil
	}
	return nil, &NotLoadedError{edge: "act_images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case actversion.FieldID, actversion.FieldVersion:
			values[i] = new(sql.NullInt64)
		case actversion.FieldCode, actversion.FieldActCode, actversion.FieldText:
			values[i] = new(sql.NullString)
		case actversion.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case actversion.ForeignKeys[0]: // act_act_versions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActVersion fields.
func (av *ActVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			av.ID = uint64(value.Int64)
		case actversion.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				av.Code = value.String
			}
		case actversion.FieldActCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field act_code", values[i])
			} else if value.Valid {
				av.ActCode = value.String
			}
		case actversion.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				av.Version = uint(value.Int64)
			}
		case actversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				av.CreatedAt = value.Time
			}
		case actversion.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				av.Text = value.String
			}
		case actversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field act_act_versions", value)
			} else if value.Valid {
				av.act_act_versions = new(uint64)
				*av.act_act_versions = uint64(value.Int64)
			}
		default:
			av.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActVersion.
// This includes values selected through modifiers, order, etc.
func (av *ActVersion) Value(name string) (ent.Value, error) {
	return av.selectValues.Get(name)
}

// QueryAct queries the "act" edge of the ActVersion entity.
func (av *ActVersion) QueryAct() *ActQuery {
	return NewActVersionClient(av.config).QueryAct(av)
}

// QueryImages queries the "images" edge of the ActVersion entity.
func (av *ActVersion) QueryImages() *ImageQuery {
	return NewActVersionClient(av.config).QueryImages(av)
}

// QueryActImages queries the "act_images" edge of the ActVersion entity.
func (av *ActVersion) QueryActImages() *ActImageQuery {
	return NewActVersionClient(av.config).QueryActImages(av)
}

// Update returns a builder for updating this ActVersion.
// Note that you need to call ActVersion.Unwrap() before calling this method if this ActVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (av *ActVersion) Update() *ActVersionUpdateOne {
	return NewActVersionClient(av.config).UpdateOne(av)
}

// Unwrap unwraps the ActVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (av *ActVersion) Unwrap() *ActVersion {
	_tx, ok := av.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActVersion is not a transactional entity")
	}
	av.config.driver = _tx.drv
	return av
}

// String implements the fmt.Stringer.
func (av *ActVersion) String() string {
	var builder strings.Builder
	builder.WriteString("ActVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", av.ID))
	builder.WriteString("code=")
	builder.WriteString(av.Code)
	builder.WriteString(", ")
	builder.WriteString("act_code=")
	builder.WriteString(av.ActCode)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", av.Version))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(av.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(av.Text)
	builder.WriteByte(')')
	return builder.String()
}

// ActVersions is a parsable slice of ActVersion.
type ActVersions []*ActVersion

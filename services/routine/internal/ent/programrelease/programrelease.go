// Code generated by ent, DO NOT EDIT.

package programrelease

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the programrelease type in the database.
	Label = "program_release"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeS3ProgramImages holds the string denoting the s3_program_images edge name in mutations.
	EdgeS3ProgramImages = "s3_program_images"
	// EdgeDayRoutines holds the string denoting the day_routines edge name in mutations.
	EdgeDayRoutines = "day_routines"
	// Table holds the table name of the programrelease in the database.
	Table = "program_releases"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "program_releases"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_program_releases"
	// S3ProgramImagesTable is the table that holds the s3_program_images relation/edge.
	S3ProgramImagesTable = "s3program_images"
	// S3ProgramImagesInverseTable is the table name for the S3ProgramImage entity.
	// It exists in this package in order to avoid circular dependency with the "s3programimage" package.
	S3ProgramImagesInverseTable = "s3program_images"
	// S3ProgramImagesColumn is the table column denoting the s3_program_images relation/edge.
	S3ProgramImagesColumn = "program_release_id"
	// DayRoutinesTable is the table that holds the day_routines relation/edge.
	DayRoutinesTable = "day_routines"
	// DayRoutinesInverseTable is the table name for the DayRoutine entity.
	// It exists in this package in order to avoid circular dependency with the "dayroutine" package.
	DayRoutinesInverseTable = "day_routines"
	// DayRoutinesColumn is the table column denoting the day_routines relation/edge.
	DayRoutinesColumn = "program_release_day_routines"
)

// Columns holds all SQL columns for programrelease fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldCreatedAt,
	FieldText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "program_releases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"program_program_releases",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProgramRelease queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByS3ProgramImagesCount orders the results by s3_program_images count.
func ByS3ProgramImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newS3ProgramImagesStep(), opts...)
	}
}

// ByS3ProgramImages orders the results by s3_program_images terms.
func ByS3ProgramImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newS3ProgramImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDayRoutinesCount orders the results by day_routines count.
func ByDayRoutinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDayRoutinesStep(), opts...)
	}
}

// ByDayRoutines orders the results by day_routines terms.
func ByDayRoutines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDayRoutinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newS3ProgramImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(S3ProgramImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, S3ProgramImagesTable, S3ProgramImagesColumn),
	)
}
func newDayRoutinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DayRoutinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DayRoutinesTable, DayRoutinesColumn),
	)
}

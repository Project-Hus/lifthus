// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/routine"
	"routine/internal/ent/routineact"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoutineCreate is the builder for creating a Routine entity.
type RoutineCreate struct {
	config
	mutation *RoutineMutation
	hooks    []Hook
}

// SetDay sets the "day" field.
func (rc *RoutineCreate) SetDay(i int) *RoutineCreate {
	rc.mutation.SetDay(i)
	return rc
}

// SetID sets the "id" field.
func (rc *RoutineCreate) SetID(i int64) *RoutineCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetProgramReleaseID sets the "program_release" edge to the ProgramRelease entity by ID.
func (rc *RoutineCreate) SetProgramReleaseID(id int64) *RoutineCreate {
	rc.mutation.SetProgramReleaseID(id)
	return rc
}

// SetProgramRelease sets the "program_release" edge to the ProgramRelease entity.
func (rc *RoutineCreate) SetProgramRelease(p *ProgramRelease) *RoutineCreate {
	return rc.SetProgramReleaseID(p.ID)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (rc *RoutineCreate) AddRoutineActIDs(ids ...int64) *RoutineCreate {
	rc.mutation.AddRoutineActIDs(ids...)
	return rc
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (rc *RoutineCreate) AddRoutineActs(r ...*RoutineAct) *RoutineCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoutineActIDs(ids...)
}

// Mutation returns the RoutineMutation object of the builder.
func (rc *RoutineCreate) Mutation() *RoutineMutation {
	return rc.mutation
}

// Save creates the Routine in the database.
func (rc *RoutineCreate) Save(ctx context.Context) (*Routine, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoutineCreate) SaveX(ctx context.Context) *Routine {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RoutineCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RoutineCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RoutineCreate) check() error {
	if _, ok := rc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "Routine.day"`)}
	}
	if _, ok := rc.mutation.ProgramReleaseID(); !ok {
		return &ValidationError{Name: "program_release", err: errors.New(`ent: missing required edge "Routine.program_release"`)}
	}
	return nil
}

func (rc *RoutineCreate) sqlSave(ctx context.Context) (*Routine, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RoutineCreate) createSpec() (*Routine, *sqlgraph.CreateSpec) {
	var (
		_node = &Routine{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(routine.Table, sqlgraph.NewFieldSpec(routine.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Day(); ok {
		_spec.SetField(routine.FieldDay, field.TypeInt, value)
		_node.Day = value
	}
	if nodes := rc.mutation.ProgramReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routine.ProgramReleaseTable,
			Columns: []string{routine.ProgramReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrelease.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_release_routines = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   routine.RoutineActsTable,
			Columns: []string{routine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoutineCreateBulk is the builder for creating many Routine entities in bulk.
type RoutineCreateBulk struct {
	config
	builders []*RoutineCreate
}

// Save creates the Routine entities in the database.
func (rcb *RoutineCreateBulk) Save(ctx context.Context) ([]*Routine, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Routine, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoutineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RoutineCreateBulk) SaveX(ctx context.Context) []*Routine {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RoutineCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RoutineCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

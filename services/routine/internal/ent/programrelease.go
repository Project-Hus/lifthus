// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/program"
	"routine/internal/ent/programrelease"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProgramRelease is the model entity for the ProgramRelease schema.
type ProgramRelease struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramReleaseQuery when eager-loading is set.
	Edges                    ProgramReleaseEdges `json:"edges"`
	program_program_releases *int64
	selectValues             sql.SelectValues
}

// ProgramReleaseEdges holds the relations/edges for other nodes in the graph.
type ProgramReleaseEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// S3ProgramImages holds the value of the s3_program_images edge.
	S3ProgramImages []*S3ProgramImage `json:"s3_program_images,omitempty"`
	// DayRoutines holds the value of the day_routines edge.
	DayRoutines []*DayRoutine `json:"day_routines,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramReleaseEdges) ProgramOrErr() (*Program, error) {
	if e.loadedTypes[0] {
		if e.Program == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: program.Label}
		}
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// S3ProgramImagesOrErr returns the S3ProgramImages value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramReleaseEdges) S3ProgramImagesOrErr() ([]*S3ProgramImage, error) {
	if e.loadedTypes[1] {
		return e.S3ProgramImages, nil
	}
	return nil, &NotLoadedError{edge: "s3_program_images"}
}

// DayRoutinesOrErr returns the DayRoutines value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramReleaseEdges) DayRoutinesOrErr() ([]*DayRoutine, error) {
	if e.loadedTypes[2] {
		return e.DayRoutines, nil
	}
	return nil, &NotLoadedError{edge: "day_routines"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramRelease) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programrelease.FieldID, programrelease.FieldVersion:
			values[i] = new(sql.NullInt64)
		case programrelease.FieldText:
			values[i] = new(sql.NullString)
		case programrelease.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case programrelease.ForeignKeys[0]: // program_program_releases
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramRelease fields.
func (pr *ProgramRelease) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programrelease.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case programrelease.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pr.Version = int(value.Int64)
			}
		case programrelease.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case programrelease.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				pr.Text = value.String
			}
		case programrelease.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_program_releases", value)
			} else if value.Valid {
				pr.program_program_releases = new(int64)
				*pr.program_program_releases = int64(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramRelease.
// This includes values selected through modifiers, order, etc.
func (pr *ProgramRelease) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the ProgramRelease entity.
func (pr *ProgramRelease) QueryProgram() *ProgramQuery {
	return NewProgramReleaseClient(pr.config).QueryProgram(pr)
}

// QueryS3ProgramImages queries the "s3_program_images" edge of the ProgramRelease entity.
func (pr *ProgramRelease) QueryS3ProgramImages() *S3ProgramImageQuery {
	return NewProgramReleaseClient(pr.config).QueryS3ProgramImages(pr)
}

// QueryDayRoutines queries the "day_routines" edge of the ProgramRelease entity.
func (pr *ProgramRelease) QueryDayRoutines() *DayRoutineQuery {
	return NewProgramReleaseClient(pr.config).QueryDayRoutines(pr)
}

// Update returns a builder for updating this ProgramRelease.
// Note that you need to call ProgramRelease.Unwrap() before calling this method if this ProgramRelease
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProgramRelease) Update() *ProgramReleaseUpdateOne {
	return NewProgramReleaseClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProgramRelease entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProgramRelease) Unwrap() *ProgramRelease {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProgramRelease is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProgramRelease) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramRelease(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", pr.Version))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(pr.Text)
	builder.WriteByte(')')
	return builder.String()
}

// ProgramReleases is a parsable slice of ProgramRelease.
type ProgramReleases []*ProgramRelease

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/s3image"
	"routine/internal/ent/s3programimage"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// S3ProgramImage is the model entity for the S3ProgramImage schema.
type S3ProgramImage struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// ProgramReleaseID holds the value of the "program_release_id" field.
	ProgramReleaseID int64 `json:"program_release_id,omitempty"`
	// ImageID holds the value of the "image_id" field.
	ImageID int64 `json:"image_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the S3ProgramImageQuery when eager-loading is set.
	Edges        S3ProgramImageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// S3ProgramImageEdges holds the relations/edges for other nodes in the graph.
type S3ProgramImageEdges struct {
	// ProgramRelease holds the value of the program_release edge.
	ProgramRelease *ProgramRelease `json:"program_release,omitempty"`
	// S3Image holds the value of the s3_image edge.
	S3Image *S3Image `json:"s3_image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProgramReleaseOrErr returns the ProgramRelease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e S3ProgramImageEdges) ProgramReleaseOrErr() (*ProgramRelease, error) {
	if e.loadedTypes[0] {
		if e.ProgramRelease == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: programrelease.Label}
		}
		return e.ProgramRelease, nil
	}
	return nil, &NotLoadedError{edge: "program_release"}
}

// S3ImageOrErr returns the S3Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e S3ProgramImageEdges) S3ImageOrErr() (*S3Image, error) {
	if e.loadedTypes[1] {
		if e.S3Image == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: s3image.Label}
		}
		return e.S3Image, nil
	}
	return nil, &NotLoadedError{edge: "s3_image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*S3ProgramImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case s3programimage.FieldID, s3programimage.FieldOrder, s3programimage.FieldProgramReleaseID, s3programimage.FieldImageID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the S3ProgramImage fields.
func (si *S3ProgramImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case s3programimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int64(value.Int64)
		case s3programimage.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				si.Order = int(value.Int64)
			}
		case s3programimage.FieldProgramReleaseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_release_id", values[i])
			} else if value.Valid {
				si.ProgramReleaseID = value.Int64
			}
		case s3programimage.FieldImageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field image_id", values[i])
			} else if value.Valid {
				si.ImageID = value.Int64
			}
		default:
			si.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the S3ProgramImage.
// This includes values selected through modifiers, order, etc.
func (si *S3ProgramImage) Value(name string) (ent.Value, error) {
	return si.selectValues.Get(name)
}

// QueryProgramRelease queries the "program_release" edge of the S3ProgramImage entity.
func (si *S3ProgramImage) QueryProgramRelease() *ProgramReleaseQuery {
	return NewS3ProgramImageClient(si.config).QueryProgramRelease(si)
}

// QueryS3Image queries the "s3_image" edge of the S3ProgramImage entity.
func (si *S3ProgramImage) QueryS3Image() *S3ImageQuery {
	return NewS3ProgramImageClient(si.config).QueryS3Image(si)
}

// Update returns a builder for updating this S3ProgramImage.
// Note that you need to call S3ProgramImage.Unwrap() before calling this method if this S3ProgramImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *S3ProgramImage) Update() *S3ProgramImageUpdateOne {
	return NewS3ProgramImageClient(si.config).UpdateOne(si)
}

// Unwrap unwraps the S3ProgramImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *S3ProgramImage) Unwrap() *S3ProgramImage {
	_tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: S3ProgramImage is not a transactional entity")
	}
	si.config.driver = _tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *S3ProgramImage) String() string {
	var builder strings.Builder
	builder.WriteString("S3ProgramImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", si.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", si.Order))
	builder.WriteString(", ")
	builder.WriteString("program_release_id=")
	builder.WriteString(fmt.Sprintf("%v", si.ProgramReleaseID))
	builder.WriteString(", ")
	builder.WriteString("image_id=")
	builder.WriteString(fmt.Sprintf("%v", si.ImageID))
	builder.WriteByte(')')
	return builder.String()
}

// S3ProgramImages is a parsable slice of S3ProgramImage.
type S3ProgramImages []*S3ProgramImage

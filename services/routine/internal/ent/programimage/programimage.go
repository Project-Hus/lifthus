// Code generated by ent, DO NOT EDIT.

package programimage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the programimage type in the database.
	Label = "program_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldProgramVersionID holds the string denoting the program_version_id field in the database.
	FieldProgramVersionID = "program_version_id"
	// FieldImageID holds the string denoting the image_id field in the database.
	FieldImageID = "image_id"
	// EdgeProgramVersion holds the string denoting the program_version edge name in mutations.
	EdgeProgramVersion = "program_version"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// Table holds the table name of the programimage in the database.
	Table = "program_images"
	// ProgramVersionTable is the table that holds the program_version relation/edge.
	ProgramVersionTable = "program_images"
	// ProgramVersionInverseTable is the table name for the ProgramVersion entity.
	// It exists in this package in order to avoid circular dependency with the "programversion" package.
	ProgramVersionInverseTable = "program_versions"
	// ProgramVersionColumn is the table column denoting the program_version relation/edge.
	ProgramVersionColumn = "program_version_id"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "program_images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "image_id"
)

// Columns holds all SQL columns for programimage fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldProgramVersionID,
	FieldImageID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProgramImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByProgramVersionID orders the results by the program_version_id field.
func ByProgramVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgramVersionID, opts...).ToFunc()
}

// ByImageID orders the results by the image_id field.
func ByImageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageID, opts...).ToFunc()
}

// ByProgramVersionField orders the results by program_version field.
func ByProgramVersionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramVersionStep(), sql.OrderByField(field, opts...))
	}
}

// ByImageField orders the results by image field.
func ByImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), sql.OrderByField(field, opts...))
	}
}
func newProgramVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramVersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProgramVersionTable, ProgramVersionColumn),
	)
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ImageTable, ImageColumn),
	)
}

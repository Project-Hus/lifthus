// Code generated by ent, DO NOT EDIT.

package programimage

import (
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldOrder, v))
}

// ProgramVersionID applies equality check predicate on the "program_version_id" field. It's identical to ProgramVersionIDEQ.
func ProgramVersionID(v uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldProgramVersionID, v))
}

// ImageID applies equality check predicate on the "image_id" field. It's identical to ImageIDEQ.
func ImageID(v uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldImageID, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v uint) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldLTE(FieldOrder, v))
}

// ProgramVersionIDEQ applies the EQ predicate on the "program_version_id" field.
func ProgramVersionIDEQ(v uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldProgramVersionID, v))
}

// ProgramVersionIDNEQ applies the NEQ predicate on the "program_version_id" field.
func ProgramVersionIDNEQ(v uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNEQ(FieldProgramVersionID, v))
}

// ProgramVersionIDIn applies the In predicate on the "program_version_id" field.
func ProgramVersionIDIn(vs ...uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldIn(FieldProgramVersionID, vs...))
}

// ProgramVersionIDNotIn applies the NotIn predicate on the "program_version_id" field.
func ProgramVersionIDNotIn(vs ...uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNotIn(FieldProgramVersionID, vs...))
}

// ImageIDEQ applies the EQ predicate on the "image_id" field.
func ImageIDEQ(v uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldEQ(FieldImageID, v))
}

// ImageIDNEQ applies the NEQ predicate on the "image_id" field.
func ImageIDNEQ(v uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNEQ(FieldImageID, v))
}

// ImageIDIn applies the In predicate on the "image_id" field.
func ImageIDIn(vs ...uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldIn(FieldImageID, vs...))
}

// ImageIDNotIn applies the NotIn predicate on the "image_id" field.
func ImageIDNotIn(vs ...uint64) predicate.ProgramImage {
	return predicate.ProgramImage(sql.FieldNotIn(FieldImageID, vs...))
}

// HasProgramVersion applies the HasEdge predicate on the "program_version" edge.
func HasProgramVersion() predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProgramVersionTable, ProgramVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramVersionWith applies the HasEdge predicate on the "program_version" edge with a given conditions (other predicates).
func HasProgramVersionWith(preds ...predicate.ProgramVersion) predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		step := newProgramVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImage applies the HasEdge predicate on the "image" edge.
func HasImage() predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ImageTable, ImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageWith applies the HasEdge predicate on the "image" edge with a given conditions (other predicates).
func HasImageWith(preds ...predicate.Image) predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		step := newImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProgramImage) predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProgramImage) predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProgramImage) predicate.ProgramImage {
	return predicate.ProgramImage(func(s *sql.Selector) {
		p(s.Not())
	})
}

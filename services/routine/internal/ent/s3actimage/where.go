// Code generated by ent, DO NOT EDIT.

package s3actimage

import (
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldOrder, v))
}

// ActID applies equality check predicate on the "act_id" field. It's identical to ActIDEQ.
func ActID(v int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldActID, v))
}

// ImageID applies equality check predicate on the "image_id" field. It's identical to ImageIDEQ.
func ImageID(v int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldImageID, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldLTE(FieldOrder, v))
}

// ActIDEQ applies the EQ predicate on the "act_id" field.
func ActIDEQ(v int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldActID, v))
}

// ActIDNEQ applies the NEQ predicate on the "act_id" field.
func ActIDNEQ(v int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNEQ(FieldActID, v))
}

// ActIDIn applies the In predicate on the "act_id" field.
func ActIDIn(vs ...int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldIn(FieldActID, vs...))
}

// ActIDNotIn applies the NotIn predicate on the "act_id" field.
func ActIDNotIn(vs ...int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNotIn(FieldActID, vs...))
}

// ImageIDEQ applies the EQ predicate on the "image_id" field.
func ImageIDEQ(v int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldEQ(FieldImageID, v))
}

// ImageIDNEQ applies the NEQ predicate on the "image_id" field.
func ImageIDNEQ(v int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNEQ(FieldImageID, v))
}

// ImageIDIn applies the In predicate on the "image_id" field.
func ImageIDIn(vs ...int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldIn(FieldImageID, vs...))
}

// ImageIDNotIn applies the NotIn predicate on the "image_id" field.
func ImageIDNotIn(vs ...int64) predicate.S3ActImage {
	return predicate.S3ActImage(sql.FieldNotIn(FieldImageID, vs...))
}

// HasAct applies the HasEdge predicate on the "act" edge.
func HasAct() predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActWith applies the HasEdge predicate on the "act" edge with a given conditions (other predicates).
func HasActWith(preds ...predicate.Act) predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		step := newActStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasS3Image applies the HasEdge predicate on the "s3_image" edge.
func HasS3Image() predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, S3ImageTable, S3ImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasS3ImageWith applies the HasEdge predicate on the "s3_image" edge with a given conditions (other predicates).
func HasS3ImageWith(preds ...predicate.S3Image) predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		step := newS3ImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3ActImage) predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3ActImage) predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3ActImage) predicate.S3ActImage {
	return predicate.S3ActImage(func(s *sql.Selector) {
		p(s.Not())
	})
}

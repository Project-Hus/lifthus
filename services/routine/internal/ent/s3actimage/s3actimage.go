// Code generated by ent, DO NOT EDIT.

package s3actimage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the s3actimage type in the database.
	Label = "s3act_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldActID holds the string denoting the act_id field in the database.
	FieldActID = "act_id"
	// FieldImageID holds the string denoting the image_id field in the database.
	FieldImageID = "image_id"
	// EdgeAct holds the string denoting the act edge name in mutations.
	EdgeAct = "act"
	// EdgeS3Image holds the string denoting the s3_image edge name in mutations.
	EdgeS3Image = "s3_image"
	// Table holds the table name of the s3actimage in the database.
	Table = "s3act_images"
	// ActTable is the table that holds the act relation/edge.
	ActTable = "s3act_images"
	// ActInverseTable is the table name for the Act entity.
	// It exists in this package in order to avoid circular dependency with the "act" package.
	ActInverseTable = "acts"
	// ActColumn is the table column denoting the act relation/edge.
	ActColumn = "act_id"
	// S3ImageTable is the table that holds the s3_image relation/edge.
	S3ImageTable = "s3act_images"
	// S3ImageInverseTable is the table name for the S3Image entity.
	// It exists in this package in order to avoid circular dependency with the "s3image" package.
	S3ImageInverseTable = "s3images"
	// S3ImageColumn is the table column denoting the s3_image relation/edge.
	S3ImageColumn = "image_id"
)

// Columns holds all SQL columns for s3actimage fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldActID,
	FieldImageID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the S3ActImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByActID orders the results by the act_id field.
func ByActID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActID, opts...).ToFunc()
}

// ByImageID orders the results by the image_id field.
func ByImageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageID, opts...).ToFunc()
}

// ByActField orders the results by act field.
func ByActField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActStep(), sql.OrderByField(field, opts...))
	}
}

// ByS3ImageField orders the results by s3_image field.
func ByS3ImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newS3ImageStep(), sql.OrderByField(field, opts...))
	}
}
func newActStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
	)
}
func newS3ImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(S3ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, S3ImageTable, S3ImageColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/predicate"
	"routine/internal/ent/s3actimage"
	"routine/internal/ent/s3image"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// S3ImageUpdate is the builder for updating S3Image entities.
type S3ImageUpdate struct {
	config
	hooks    []Hook
	mutation *S3ImageMutation
}

// Where appends a list predicates to the S3ImageUpdate builder.
func (su *S3ImageUpdate) Where(ps ...predicate.S3Image) *S3ImageUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetKey sets the "key" field.
func (su *S3ImageUpdate) SetKey(s string) *S3ImageUpdate {
	su.mutation.SetKey(s)
	return su
}

// SetSrc sets the "src" field.
func (su *S3ImageUpdate) SetSrc(s string) *S3ImageUpdate {
	su.mutation.SetSrc(s)
	return su
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by IDs.
func (su *S3ImageUpdate) AddS3ActImageIDs(ids ...int64) *S3ImageUpdate {
	su.mutation.AddS3ActImageIDs(ids...)
	return su
}

// AddS3ActImages adds the "s3_act_images" edges to the S3ActImage entity.
func (su *S3ImageUpdate) AddS3ActImages(s ...*S3ActImage) *S3ImageUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddS3ActImageIDs(ids...)
}

// Mutation returns the S3ImageMutation object of the builder.
func (su *S3ImageUpdate) Mutation() *S3ImageMutation {
	return su.mutation
}

// ClearS3ActImages clears all "s3_act_images" edges to the S3ActImage entity.
func (su *S3ImageUpdate) ClearS3ActImages() *S3ImageUpdate {
	su.mutation.ClearS3ActImages()
	return su
}

// RemoveS3ActImageIDs removes the "s3_act_images" edge to S3ActImage entities by IDs.
func (su *S3ImageUpdate) RemoveS3ActImageIDs(ids ...int64) *S3ImageUpdate {
	su.mutation.RemoveS3ActImageIDs(ids...)
	return su
}

// RemoveS3ActImages removes "s3_act_images" edges to S3ActImage entities.
func (su *S3ImageUpdate) RemoveS3ActImages(s ...*S3ActImage) *S3ImageUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveS3ActImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *S3ImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *S3ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *S3ImageUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *S3ImageUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *S3ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(s3image.Table, s3image.Columns, sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.SetField(s3image.FieldKey, field.TypeString, value)
	}
	if value, ok := su.mutation.Src(); ok {
		_spec.SetField(s3image.FieldSrc, field.TypeString, value)
	}
	if su.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedS3ActImagesIDs(); len(nodes) > 0 && !su.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.S3ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// S3ImageUpdateOne is the builder for updating a single S3Image entity.
type S3ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *S3ImageMutation
}

// SetKey sets the "key" field.
func (suo *S3ImageUpdateOne) SetKey(s string) *S3ImageUpdateOne {
	suo.mutation.SetKey(s)
	return suo
}

// SetSrc sets the "src" field.
func (suo *S3ImageUpdateOne) SetSrc(s string) *S3ImageUpdateOne {
	suo.mutation.SetSrc(s)
	return suo
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by IDs.
func (suo *S3ImageUpdateOne) AddS3ActImageIDs(ids ...int64) *S3ImageUpdateOne {
	suo.mutation.AddS3ActImageIDs(ids...)
	return suo
}

// AddS3ActImages adds the "s3_act_images" edges to the S3ActImage entity.
func (suo *S3ImageUpdateOne) AddS3ActImages(s ...*S3ActImage) *S3ImageUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddS3ActImageIDs(ids...)
}

// Mutation returns the S3ImageMutation object of the builder.
func (suo *S3ImageUpdateOne) Mutation() *S3ImageMutation {
	return suo.mutation
}

// ClearS3ActImages clears all "s3_act_images" edges to the S3ActImage entity.
func (suo *S3ImageUpdateOne) ClearS3ActImages() *S3ImageUpdateOne {
	suo.mutation.ClearS3ActImages()
	return suo
}

// RemoveS3ActImageIDs removes the "s3_act_images" edge to S3ActImage entities by IDs.
func (suo *S3ImageUpdateOne) RemoveS3ActImageIDs(ids ...int64) *S3ImageUpdateOne {
	suo.mutation.RemoveS3ActImageIDs(ids...)
	return suo
}

// RemoveS3ActImages removes "s3_act_images" edges to S3ActImage entities.
func (suo *S3ImageUpdateOne) RemoveS3ActImages(s ...*S3ActImage) *S3ImageUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveS3ActImageIDs(ids...)
}

// Where appends a list predicates to the S3ImageUpdate builder.
func (suo *S3ImageUpdateOne) Where(ps ...predicate.S3Image) *S3ImageUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *S3ImageUpdateOne) Select(field string, fields ...string) *S3ImageUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated S3Image entity.
func (suo *S3ImageUpdateOne) Save(ctx context.Context) (*S3Image, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *S3ImageUpdateOne) SaveX(ctx context.Context) *S3Image {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *S3ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *S3ImageUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *S3ImageUpdateOne) sqlSave(ctx context.Context) (_node *S3Image, err error) {
	_spec := sqlgraph.NewUpdateSpec(s3image.Table, s3image.Columns, sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "S3Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, s3image.FieldID)
		for _, f := range fields {
			if !s3image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != s3image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.SetField(s3image.FieldKey, field.TypeString, value)
	}
	if value, ok := suo.mutation.Src(); ok {
		_spec.SetField(s3image.FieldSrc, field.TypeString, value)
	}
	if suo.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedS3ActImagesIDs(); len(nodes) > 0 && !suo.mutation.S3ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.S3ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &S3Image{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

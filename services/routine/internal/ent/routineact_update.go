// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/dayroutine"
	"routine/internal/ent/predicate"
	"routine/internal/ent/routineact"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoutineActUpdate is the builder for updating RoutineAct entities.
type RoutineActUpdate struct {
	config
	hooks    []Hook
	mutation *RoutineActMutation
}

// Where appends a list predicates to the RoutineActUpdate builder.
func (rau *RoutineActUpdate) Where(ps ...predicate.RoutineAct) *RoutineActUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetActID sets the "act" edge to the Act entity by ID.
func (rau *RoutineActUpdate) SetActID(id int64) *RoutineActUpdate {
	rau.mutation.SetActID(id)
	return rau
}

// SetAct sets the "act" edge to the Act entity.
func (rau *RoutineActUpdate) SetAct(a *Act) *RoutineActUpdate {
	return rau.SetActID(a.ID)
}

// SetDayRoutineID sets the "day_routine" edge to the DayRoutine entity by ID.
func (rau *RoutineActUpdate) SetDayRoutineID(id int64) *RoutineActUpdate {
	rau.mutation.SetDayRoutineID(id)
	return rau
}

// SetDayRoutine sets the "day_routine" edge to the DayRoutine entity.
func (rau *RoutineActUpdate) SetDayRoutine(d *DayRoutine) *RoutineActUpdate {
	return rau.SetDayRoutineID(d.ID)
}

// Mutation returns the RoutineActMutation object of the builder.
func (rau *RoutineActUpdate) Mutation() *RoutineActMutation {
	return rau.mutation
}

// ClearAct clears the "act" edge to the Act entity.
func (rau *RoutineActUpdate) ClearAct() *RoutineActUpdate {
	rau.mutation.ClearAct()
	return rau
}

// ClearDayRoutine clears the "day_routine" edge to the DayRoutine entity.
func (rau *RoutineActUpdate) ClearDayRoutine() *RoutineActUpdate {
	rau.mutation.ClearDayRoutine()
	return rau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *RoutineActUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rau.sqlSave, rau.mutation, rau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rau *RoutineActUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *RoutineActUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *RoutineActUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rau *RoutineActUpdate) check() error {
	if _, ok := rau.mutation.ActID(); rau.mutation.ActCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoutineAct.act"`)
	}
	if _, ok := rau.mutation.DayRoutineID(); rau.mutation.DayRoutineCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoutineAct.day_routine"`)
	}
	return nil
}

func (rau *RoutineActUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(routineact.Table, routineact.Columns, sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64))
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rau.mutation.ActCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.ActTable,
			Columns: []string{routineact.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.ActIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.ActTable,
			Columns: []string{routineact.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rau.mutation.DayRoutineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.DayRoutineTable,
			Columns: []string{routineact.DayRoutineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.DayRoutineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.DayRoutineTable,
			Columns: []string{routineact.DayRoutineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{routineact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rau.mutation.done = true
	return n, nil
}

// RoutineActUpdateOne is the builder for updating a single RoutineAct entity.
type RoutineActUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoutineActMutation
}

// SetActID sets the "act" edge to the Act entity by ID.
func (rauo *RoutineActUpdateOne) SetActID(id int64) *RoutineActUpdateOne {
	rauo.mutation.SetActID(id)
	return rauo
}

// SetAct sets the "act" edge to the Act entity.
func (rauo *RoutineActUpdateOne) SetAct(a *Act) *RoutineActUpdateOne {
	return rauo.SetActID(a.ID)
}

// SetDayRoutineID sets the "day_routine" edge to the DayRoutine entity by ID.
func (rauo *RoutineActUpdateOne) SetDayRoutineID(id int64) *RoutineActUpdateOne {
	rauo.mutation.SetDayRoutineID(id)
	return rauo
}

// SetDayRoutine sets the "day_routine" edge to the DayRoutine entity.
func (rauo *RoutineActUpdateOne) SetDayRoutine(d *DayRoutine) *RoutineActUpdateOne {
	return rauo.SetDayRoutineID(d.ID)
}

// Mutation returns the RoutineActMutation object of the builder.
func (rauo *RoutineActUpdateOne) Mutation() *RoutineActMutation {
	return rauo.mutation
}

// ClearAct clears the "act" edge to the Act entity.
func (rauo *RoutineActUpdateOne) ClearAct() *RoutineActUpdateOne {
	rauo.mutation.ClearAct()
	return rauo
}

// ClearDayRoutine clears the "day_routine" edge to the DayRoutine entity.
func (rauo *RoutineActUpdateOne) ClearDayRoutine() *RoutineActUpdateOne {
	rauo.mutation.ClearDayRoutine()
	return rauo
}

// Where appends a list predicates to the RoutineActUpdate builder.
func (rauo *RoutineActUpdateOne) Where(ps ...predicate.RoutineAct) *RoutineActUpdateOne {
	rauo.mutation.Where(ps...)
	return rauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *RoutineActUpdateOne) Select(field string, fields ...string) *RoutineActUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated RoutineAct entity.
func (rauo *RoutineActUpdateOne) Save(ctx context.Context) (*RoutineAct, error) {
	return withHooks(ctx, rauo.sqlSave, rauo.mutation, rauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *RoutineActUpdateOne) SaveX(ctx context.Context) *RoutineAct {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *RoutineActUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *RoutineActUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rauo *RoutineActUpdateOne) check() error {
	if _, ok := rauo.mutation.ActID(); rauo.mutation.ActCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoutineAct.act"`)
	}
	if _, ok := rauo.mutation.DayRoutineID(); rauo.mutation.DayRoutineCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoutineAct.day_routine"`)
	}
	return nil
}

func (rauo *RoutineActUpdateOne) sqlSave(ctx context.Context) (_node *RoutineAct, err error) {
	if err := rauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(routineact.Table, routineact.Columns, sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64))
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoutineAct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, routineact.FieldID)
		for _, f := range fields {
			if !routineact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != routineact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rauo.mutation.ActCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.ActTable,
			Columns: []string{routineact.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.ActIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.ActTable,
			Columns: []string{routineact.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rauo.mutation.DayRoutineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.DayRoutineTable,
			Columns: []string{routineact.DayRoutineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.DayRoutineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineact.DayRoutineTable,
			Columns: []string{routineact.DayRoutineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoutineAct{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{routineact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rauo.mutation.done = true
	return _node, nil
}

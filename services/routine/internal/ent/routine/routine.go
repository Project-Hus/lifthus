// Code generated by ent, DO NOT EDIT.

package routine

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the routine type in the database.
	Label = "routine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDay holds the string denoting the day field in the database.
	FieldDay = "day"
	// EdgeProgramRelease holds the string denoting the program_release edge name in mutations.
	EdgeProgramRelease = "program_release"
	// EdgeRoutineActs holds the string denoting the routine_acts edge name in mutations.
	EdgeRoutineActs = "routine_acts"
	// Table holds the table name of the routine in the database.
	Table = "routines"
	// ProgramReleaseTable is the table that holds the program_release relation/edge.
	ProgramReleaseTable = "routines"
	// ProgramReleaseInverseTable is the table name for the ProgramRelease entity.
	// It exists in this package in order to avoid circular dependency with the "programrelease" package.
	ProgramReleaseInverseTable = "program_releases"
	// ProgramReleaseColumn is the table column denoting the program_release relation/edge.
	ProgramReleaseColumn = "program_release_routines"
	// RoutineActsTable is the table that holds the routine_acts relation/edge.
	RoutineActsTable = "routine_acts"
	// RoutineActsInverseTable is the table name for the RoutineAct entity.
	// It exists in this package in order to avoid circular dependency with the "routineact" package.
	RoutineActsInverseTable = "routine_acts"
	// RoutineActsColumn is the table column denoting the routine_acts relation/edge.
	RoutineActsColumn = "routine_routine_acts"
)

// Columns holds all SQL columns for routine fields.
var Columns = []string{
	FieldID,
	FieldDay,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "routines"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"program_release_routines",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Routine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDay orders the results by the day field.
func ByDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDay, opts...).ToFunc()
}

// ByProgramReleaseField orders the results by program_release field.
func ByProgramReleaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramReleaseStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoutineActsCount orders the results by routine_acts count.
func ByRoutineActsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoutineActsStep(), opts...)
	}
}

// ByRoutineActs orders the results by routine_acts terms.
func ByRoutineActs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutineActsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramReleaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramReleaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramReleaseTable, ProgramReleaseColumn),
	)
}
func newRoutineActsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutineActsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoutineActsTable, RoutineActsColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package programversion

import (
	"routine/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldCode, v))
}

// ProgramCode applies equality check predicate on the "program_code" field. It's identical to ProgramCodeEQ.
func ProgramCode(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldProgramCode, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldVersion, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldText, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldContainsFold(FieldCode, v))
}

// ProgramCodeEQ applies the EQ predicate on the "program_code" field.
func ProgramCodeEQ(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldProgramCode, v))
}

// ProgramCodeNEQ applies the NEQ predicate on the "program_code" field.
func ProgramCodeNEQ(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNEQ(FieldProgramCode, v))
}

// ProgramCodeIn applies the In predicate on the "program_code" field.
func ProgramCodeIn(vs ...string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldIn(FieldProgramCode, vs...))
}

// ProgramCodeNotIn applies the NotIn predicate on the "program_code" field.
func ProgramCodeNotIn(vs ...string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNotIn(FieldProgramCode, vs...))
}

// ProgramCodeGT applies the GT predicate on the "program_code" field.
func ProgramCodeGT(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGT(FieldProgramCode, v))
}

// ProgramCodeGTE applies the GTE predicate on the "program_code" field.
func ProgramCodeGTE(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGTE(FieldProgramCode, v))
}

// ProgramCodeLT applies the LT predicate on the "program_code" field.
func ProgramCodeLT(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLT(FieldProgramCode, v))
}

// ProgramCodeLTE applies the LTE predicate on the "program_code" field.
func ProgramCodeLTE(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLTE(FieldProgramCode, v))
}

// ProgramCodeContains applies the Contains predicate on the "program_code" field.
func ProgramCodeContains(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldContains(FieldProgramCode, v))
}

// ProgramCodeHasPrefix applies the HasPrefix predicate on the "program_code" field.
func ProgramCodeHasPrefix(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldHasPrefix(FieldProgramCode, v))
}

// ProgramCodeHasSuffix applies the HasSuffix predicate on the "program_code" field.
func ProgramCodeHasSuffix(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldHasSuffix(FieldProgramCode, v))
}

// ProgramCodeEqualFold applies the EqualFold predicate on the "program_code" field.
func ProgramCodeEqualFold(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEqualFold(FieldProgramCode, v))
}

// ProgramCodeContainsFold applies the ContainsFold predicate on the "program_code" field.
func ProgramCodeContainsFold(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldContainsFold(FieldProgramCode, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLTE(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLTE(FieldCreatedAt, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.ProgramVersion {
	return predicate.ProgramVersion(sql.FieldContainsFold(FieldText, v))
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ImagesTable, ImagesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.Image) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyRoutines applies the HasEdge predicate on the "daily_routines" edge.
func HasDailyRoutines() predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DailyRoutinesTable, DailyRoutinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyRoutinesWith applies the HasEdge predicate on the "daily_routines" edge with a given conditions (other predicates).
func HasDailyRoutinesWith(preds ...predicate.DailyRoutine) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := newDailyRoutinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgramImages applies the HasEdge predicate on the "program_images" edge.
func HasProgramImages() predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProgramImagesTable, ProgramImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramImagesWith applies the HasEdge predicate on the "program_images" edge with a given conditions (other predicates).
func HasProgramImagesWith(preds ...predicate.ProgramImage) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		step := newProgramImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProgramVersion) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProgramVersion) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProgramVersion) predicate.ProgramVersion {
	return predicate.ProgramVersion(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/image"
	"routine/internal/ent/programimage"
	"routine/internal/ent/programversion"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramImageCreate is the builder for creating a ProgramImage entity.
type ProgramImageCreate struct {
	config
	mutation *ProgramImageMutation
	hooks    []Hook
}

// SetOrder sets the "order" field.
func (pic *ProgramImageCreate) SetOrder(u uint) *ProgramImageCreate {
	pic.mutation.SetOrder(u)
	return pic
}

// SetProgramVersionID sets the "program_version_id" field.
func (pic *ProgramImageCreate) SetProgramVersionID(u uint64) *ProgramImageCreate {
	pic.mutation.SetProgramVersionID(u)
	return pic
}

// SetImageID sets the "image_id" field.
func (pic *ProgramImageCreate) SetImageID(u uint64) *ProgramImageCreate {
	pic.mutation.SetImageID(u)
	return pic
}

// SetID sets the "id" field.
func (pic *ProgramImageCreate) SetID(u uint64) *ProgramImageCreate {
	pic.mutation.SetID(u)
	return pic
}

// SetProgramVersion sets the "program_version" edge to the ProgramVersion entity.
func (pic *ProgramImageCreate) SetProgramVersion(p *ProgramVersion) *ProgramImageCreate {
	return pic.SetProgramVersionID(p.ID)
}

// SetImage sets the "image" edge to the Image entity.
func (pic *ProgramImageCreate) SetImage(i *Image) *ProgramImageCreate {
	return pic.SetImageID(i.ID)
}

// Mutation returns the ProgramImageMutation object of the builder.
func (pic *ProgramImageCreate) Mutation() *ProgramImageMutation {
	return pic.mutation
}

// Save creates the ProgramImage in the database.
func (pic *ProgramImageCreate) Save(ctx context.Context) (*ProgramImage, error) {
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProgramImageCreate) SaveX(ctx context.Context) *ProgramImage {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProgramImageCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProgramImageCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProgramImageCreate) check() error {
	if _, ok := pic.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "ProgramImage.order"`)}
	}
	if _, ok := pic.mutation.ProgramVersionID(); !ok {
		return &ValidationError{Name: "program_version_id", err: errors.New(`ent: missing required field "ProgramImage.program_version_id"`)}
	}
	if _, ok := pic.mutation.ImageID(); !ok {
		return &ValidationError{Name: "image_id", err: errors.New(`ent: missing required field "ProgramImage.image_id"`)}
	}
	if _, ok := pic.mutation.ProgramVersionID(); !ok {
		return &ValidationError{Name: "program_version", err: errors.New(`ent: missing required edge "ProgramImage.program_version"`)}
	}
	if _, ok := pic.mutation.ImageID(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required edge "ProgramImage.image"`)}
	}
	return nil
}

func (pic *ProgramImageCreate) sqlSave(ctx context.Context) (*ProgramImage, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProgramImageCreate) createSpec() (*ProgramImage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramImage{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(programimage.Table, sqlgraph.NewFieldSpec(programimage.FieldID, field.TypeUint64))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.Order(); ok {
		_spec.SetField(programimage.FieldOrder, field.TypeUint, value)
		_node.Order = value
	}
	if nodes := pic.mutation.ProgramVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programimage.ProgramVersionTable,
			Columns: []string{programimage.ProgramVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProgramVersionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programimage.ImageTable,
			Columns: []string{programimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ImageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProgramImageCreateBulk is the builder for creating many ProgramImage entities in bulk.
type ProgramImageCreateBulk struct {
	config
	builders []*ProgramImageCreate
}

// Save creates the ProgramImage entities in the database.
func (picb *ProgramImageCreateBulk) Save(ctx context.Context) ([]*ProgramImage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProgramImage, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProgramImageCreateBulk) SaveX(ctx context.Context) []*ProgramImage {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProgramImageCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProgramImageCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/actimage"
	"routine/internal/ent/actversion"
	"routine/internal/ent/image"
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActImageUpdate is the builder for updating ActImage entities.
type ActImageUpdate struct {
	config
	hooks    []Hook
	mutation *ActImageMutation
}

// Where appends a list predicates to the ActImageUpdate builder.
func (aiu *ActImageUpdate) Where(ps ...predicate.ActImage) *ActImageUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetOrder sets the "order" field.
func (aiu *ActImageUpdate) SetOrder(u uint) *ActImageUpdate {
	aiu.mutation.ResetOrder()
	aiu.mutation.SetOrder(u)
	return aiu
}

// AddOrder adds u to the "order" field.
func (aiu *ActImageUpdate) AddOrder(u int) *ActImageUpdate {
	aiu.mutation.AddOrder(u)
	return aiu
}

// SetActVersionID sets the "act_version_id" field.
func (aiu *ActImageUpdate) SetActVersionID(u uint64) *ActImageUpdate {
	aiu.mutation.SetActVersionID(u)
	return aiu
}

// SetImageID sets the "image_id" field.
func (aiu *ActImageUpdate) SetImageID(u uint64) *ActImageUpdate {
	aiu.mutation.SetImageID(u)
	return aiu
}

// SetActVersion sets the "act_version" edge to the ActVersion entity.
func (aiu *ActImageUpdate) SetActVersion(a *ActVersion) *ActImageUpdate {
	return aiu.SetActVersionID(a.ID)
}

// SetImage sets the "image" edge to the Image entity.
func (aiu *ActImageUpdate) SetImage(i *Image) *ActImageUpdate {
	return aiu.SetImageID(i.ID)
}

// Mutation returns the ActImageMutation object of the builder.
func (aiu *ActImageUpdate) Mutation() *ActImageMutation {
	return aiu.mutation
}

// ClearActVersion clears the "act_version" edge to the ActVersion entity.
func (aiu *ActImageUpdate) ClearActVersion() *ActImageUpdate {
	aiu.mutation.ClearActVersion()
	return aiu
}

// ClearImage clears the "image" edge to the Image entity.
func (aiu *ActImageUpdate) ClearImage() *ActImageUpdate {
	aiu.mutation.ClearImage()
	return aiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *ActImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *ActImageUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *ActImageUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *ActImageUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *ActImageUpdate) check() error {
	if _, ok := aiu.mutation.ActVersionID(); aiu.mutation.ActVersionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ActImage.act_version"`)
	}
	if _, ok := aiu.mutation.ImageID(); aiu.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ActImage.image"`)
	}
	return nil
}

func (aiu *ActImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(actimage.Table, actimage.Columns, sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.Order(); ok {
		_spec.SetField(actimage.FieldOrder, field.TypeUint, value)
	}
	if value, ok := aiu.mutation.AddedOrder(); ok {
		_spec.AddField(actimage.FieldOrder, field.TypeUint, value)
	}
	if aiu.mutation.ActVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ActVersionTable,
			Columns: []string{actimage.ActVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.ActVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ActVersionTable,
			Columns: []string{actimage.ActVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ImageTable,
			Columns: []string{actimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ImageTable,
			Columns: []string{actimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// ActImageUpdateOne is the builder for updating a single ActImage entity.
type ActImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActImageMutation
}

// SetOrder sets the "order" field.
func (aiuo *ActImageUpdateOne) SetOrder(u uint) *ActImageUpdateOne {
	aiuo.mutation.ResetOrder()
	aiuo.mutation.SetOrder(u)
	return aiuo
}

// AddOrder adds u to the "order" field.
func (aiuo *ActImageUpdateOne) AddOrder(u int) *ActImageUpdateOne {
	aiuo.mutation.AddOrder(u)
	return aiuo
}

// SetActVersionID sets the "act_version_id" field.
func (aiuo *ActImageUpdateOne) SetActVersionID(u uint64) *ActImageUpdateOne {
	aiuo.mutation.SetActVersionID(u)
	return aiuo
}

// SetImageID sets the "image_id" field.
func (aiuo *ActImageUpdateOne) SetImageID(u uint64) *ActImageUpdateOne {
	aiuo.mutation.SetImageID(u)
	return aiuo
}

// SetActVersion sets the "act_version" edge to the ActVersion entity.
func (aiuo *ActImageUpdateOne) SetActVersion(a *ActVersion) *ActImageUpdateOne {
	return aiuo.SetActVersionID(a.ID)
}

// SetImage sets the "image" edge to the Image entity.
func (aiuo *ActImageUpdateOne) SetImage(i *Image) *ActImageUpdateOne {
	return aiuo.SetImageID(i.ID)
}

// Mutation returns the ActImageMutation object of the builder.
func (aiuo *ActImageUpdateOne) Mutation() *ActImageMutation {
	return aiuo.mutation
}

// ClearActVersion clears the "act_version" edge to the ActVersion entity.
func (aiuo *ActImageUpdateOne) ClearActVersion() *ActImageUpdateOne {
	aiuo.mutation.ClearActVersion()
	return aiuo
}

// ClearImage clears the "image" edge to the Image entity.
func (aiuo *ActImageUpdateOne) ClearImage() *ActImageUpdateOne {
	aiuo.mutation.ClearImage()
	return aiuo
}

// Where appends a list predicates to the ActImageUpdate builder.
func (aiuo *ActImageUpdateOne) Where(ps ...predicate.ActImage) *ActImageUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *ActImageUpdateOne) Select(field string, fields ...string) *ActImageUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated ActImage entity.
func (aiuo *ActImageUpdateOne) Save(ctx context.Context) (*ActImage, error) {
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *ActImageUpdateOne) SaveX(ctx context.Context) *ActImage {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *ActImageUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *ActImageUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *ActImageUpdateOne) check() error {
	if _, ok := aiuo.mutation.ActVersionID(); aiuo.mutation.ActVersionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ActImage.act_version"`)
	}
	if _, ok := aiuo.mutation.ImageID(); aiuo.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ActImage.image"`)
	}
	return nil
}

func (aiuo *ActImageUpdateOne) sqlSave(ctx context.Context) (_node *ActImage, err error) {
	if err := aiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actimage.Table, actimage.Columns, sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actimage.FieldID)
		for _, f := range fields {
			if !actimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != actimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.Order(); ok {
		_spec.SetField(actimage.FieldOrder, field.TypeUint, value)
	}
	if value, ok := aiuo.mutation.AddedOrder(); ok {
		_spec.AddField(actimage.FieldOrder, field.TypeUint, value)
	}
	if aiuo.mutation.ActVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ActVersionTable,
			Columns: []string{actimage.ActVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.ActVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ActVersionTable,
			Columns: []string{actimage.ActVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ImageTable,
			Columns: []string{actimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actimage.ImageTable,
			Columns: []string{actimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActImage{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}

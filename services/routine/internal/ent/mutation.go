// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/predicate"
	"routine/internal/ent/program"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/routine"
	"routine/internal/ent/routineact"
	"routine/internal/ent/s3actimage"
	"routine/internal/ent/s3image"
	"routine/internal/ent/s3programimage"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAct            = "Act"
	TypeProgram        = "Program"
	TypeProgramRelease = "ProgramRelease"
	TypeRoutine        = "Routine"
	TypeRoutineAct     = "RoutineAct"
	TypeS3ActImage     = "S3ActImage"
	TypeS3Image        = "S3Image"
	TypeS3ProgramImage = "S3ProgramImage"
)

// ActMutation represents an operation that mutates the Act nodes in the graph.
type ActMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int64
	code                 *string
	author               *int64
	addauthor            *int64
	act_type             *act.ActType
	name                 *string
	text                 *string
	standard             *bool
	created_at           *time.Time
	clearedFields        map[string]struct{}
	s3_act_images        map[int64]struct{}
	removeds3_act_images map[int64]struct{}
	cleareds3_act_images bool
	routine_acts         map[int64]struct{}
	removedroutine_acts  map[int64]struct{}
	clearedroutine_acts  bool
	done                 bool
	oldValue             func(context.Context) (*Act, error)
	predicates           []predicate.Act
}

var _ ent.Mutation = (*ActMutation)(nil)

// actOption allows management of the mutation configuration using functional options.
type actOption func(*ActMutation)

// newActMutation creates new mutation for the Act entity.
func newActMutation(c config, op Op, opts ...actOption) *ActMutation {
	m := &ActMutation{
		config:        c,
		op:            op,
		typ:           TypeAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActID sets the ID field of the mutation.
func withActID(id int64) actOption {
	return func(m *ActMutation) {
		var (
			err   error
			once  sync.Once
			value *Act
		)
		m.oldValue = func(ctx context.Context) (*Act, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Act.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAct sets the old Act of the mutation.
func withAct(node *Act) actOption {
	return func(m *ActMutation) {
		m.oldValue = func(context.Context) (*Act, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Act entities.
func (m *ActMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Act.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActMutation) ResetCode() {
	m.code = nil
}

// SetAuthor sets the "author" field.
func (m *ActMutation) SetAuthor(i int64) {
	m.author = &i
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ActMutation) Author() (r int64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldAuthor(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds i to the "author" field.
func (m *ActMutation) AddAuthor(i int64) {
	if m.addauthor != nil {
		*m.addauthor += i
	} else {
		m.addauthor = &i
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ActMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ActMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetActType sets the "act_type" field.
func (m *ActMutation) SetActType(at act.ActType) {
	m.act_type = &at
}

// ActType returns the value of the "act_type" field in the mutation.
func (m *ActMutation) ActType() (r act.ActType, exists bool) {
	v := m.act_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActType returns the old "act_type" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldActType(ctx context.Context) (v act.ActType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActType: %w", err)
	}
	return oldValue.ActType, nil
}

// ResetActType resets all changes to the "act_type" field.
func (m *ActMutation) ResetActType() {
	m.act_type = nil
}

// SetName sets the "name" field.
func (m *ActMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActMutation) ResetName() {
	m.name = nil
}

// SetText sets the "text" field.
func (m *ActMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ActMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ActMutation) ResetText() {
	m.text = nil
}

// SetStandard sets the "standard" field.
func (m *ActMutation) SetStandard(b bool) {
	m.standard = &b
}

// Standard returns the value of the "standard" field in the mutation.
func (m *ActMutation) Standard() (r bool, exists bool) {
	v := m.standard
	if v == nil {
		return
	}
	return *v, true
}

// OldStandard returns the old "standard" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldStandard(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStandard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStandard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStandard: %w", err)
	}
	return oldValue.Standard, nil
}

// ResetStandard resets all changes to the "standard" field.
func (m *ActMutation) ResetStandard() {
	m.standard = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ActMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by ids.
func (m *ActMutation) AddS3ActImageIDs(ids ...int64) {
	if m.s3_act_images == nil {
		m.s3_act_images = make(map[int64]struct{})
	}
	for i := range ids {
		m.s3_act_images[ids[i]] = struct{}{}
	}
}

// ClearS3ActImages clears the "s3_act_images" edge to the S3ActImage entity.
func (m *ActMutation) ClearS3ActImages() {
	m.cleareds3_act_images = true
}

// S3ActImagesCleared reports if the "s3_act_images" edge to the S3ActImage entity was cleared.
func (m *ActMutation) S3ActImagesCleared() bool {
	return m.cleareds3_act_images
}

// RemoveS3ActImageIDs removes the "s3_act_images" edge to the S3ActImage entity by IDs.
func (m *ActMutation) RemoveS3ActImageIDs(ids ...int64) {
	if m.removeds3_act_images == nil {
		m.removeds3_act_images = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.s3_act_images, ids[i])
		m.removeds3_act_images[ids[i]] = struct{}{}
	}
}

// RemovedS3ActImages returns the removed IDs of the "s3_act_images" edge to the S3ActImage entity.
func (m *ActMutation) RemovedS3ActImagesIDs() (ids []int64) {
	for id := range m.removeds3_act_images {
		ids = append(ids, id)
	}
	return
}

// S3ActImagesIDs returns the "s3_act_images" edge IDs in the mutation.
func (m *ActMutation) S3ActImagesIDs() (ids []int64) {
	for id := range m.s3_act_images {
		ids = append(ids, id)
	}
	return
}

// ResetS3ActImages resets all changes to the "s3_act_images" edge.
func (m *ActMutation) ResetS3ActImages() {
	m.s3_act_images = nil
	m.cleareds3_act_images = false
	m.removeds3_act_images = nil
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by ids.
func (m *ActMutation) AddRoutineActIDs(ids ...int64) {
	if m.routine_acts == nil {
		m.routine_acts = make(map[int64]struct{})
	}
	for i := range ids {
		m.routine_acts[ids[i]] = struct{}{}
	}
}

// ClearRoutineActs clears the "routine_acts" edge to the RoutineAct entity.
func (m *ActMutation) ClearRoutineActs() {
	m.clearedroutine_acts = true
}

// RoutineActsCleared reports if the "routine_acts" edge to the RoutineAct entity was cleared.
func (m *ActMutation) RoutineActsCleared() bool {
	return m.clearedroutine_acts
}

// RemoveRoutineActIDs removes the "routine_acts" edge to the RoutineAct entity by IDs.
func (m *ActMutation) RemoveRoutineActIDs(ids ...int64) {
	if m.removedroutine_acts == nil {
		m.removedroutine_acts = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.routine_acts, ids[i])
		m.removedroutine_acts[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActs returns the removed IDs of the "routine_acts" edge to the RoutineAct entity.
func (m *ActMutation) RemovedRoutineActsIDs() (ids []int64) {
	for id := range m.removedroutine_acts {
		ids = append(ids, id)
	}
	return
}

// RoutineActsIDs returns the "routine_acts" edge IDs in the mutation.
func (m *ActMutation) RoutineActsIDs() (ids []int64) {
	for id := range m.routine_acts {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActs resets all changes to the "routine_acts" edge.
func (m *ActMutation) ResetRoutineActs() {
	m.routine_acts = nil
	m.clearedroutine_acts = false
	m.removedroutine_acts = nil
}

// Where appends a list predicates to the ActMutation builder.
func (m *ActMutation) Where(ps ...predicate.Act) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Act, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Act).
func (m *ActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.code != nil {
		fields = append(fields, act.FieldCode)
	}
	if m.author != nil {
		fields = append(fields, act.FieldAuthor)
	}
	if m.act_type != nil {
		fields = append(fields, act.FieldActType)
	}
	if m.name != nil {
		fields = append(fields, act.FieldName)
	}
	if m.text != nil {
		fields = append(fields, act.FieldText)
	}
	if m.standard != nil {
		fields = append(fields, act.FieldStandard)
	}
	if m.created_at != nil {
		fields = append(fields, act.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case act.FieldCode:
		return m.Code()
	case act.FieldAuthor:
		return m.Author()
	case act.FieldActType:
		return m.ActType()
	case act.FieldName:
		return m.Name()
	case act.FieldText:
		return m.Text()
	case act.FieldStandard:
		return m.Standard()
	case act.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case act.FieldCode:
		return m.OldCode(ctx)
	case act.FieldAuthor:
		return m.OldAuthor(ctx)
	case act.FieldActType:
		return m.OldActType(ctx)
	case act.FieldName:
		return m.OldName(ctx)
	case act.FieldText:
		return m.OldText(ctx)
	case act.FieldStandard:
		return m.OldStandard(ctx)
	case act.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Act field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case act.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case act.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case act.FieldActType:
		v, ok := value.(act.ActType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActType(v)
		return nil
	case act.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case act.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case act.FieldStandard:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStandard(v)
		return nil
	case act.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, act.FieldAuthor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case act.FieldAuthor:
		return m.AddedAuthor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case act.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	}
	return fmt.Errorf("unknown Act numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Act nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActMutation) ResetField(name string) error {
	switch name {
	case act.FieldCode:
		m.ResetCode()
		return nil
	case act.FieldAuthor:
		m.ResetAuthor()
		return nil
	case act.FieldActType:
		m.ResetActType()
		return nil
	case act.FieldName:
		m.ResetName()
		return nil
	case act.FieldText:
		m.ResetText()
		return nil
	case act.FieldStandard:
		m.ResetStandard()
		return nil
	case act.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.s3_act_images != nil {
		edges = append(edges, act.EdgeS3ActImages)
	}
	if m.routine_acts != nil {
		edges = append(edges, act.EdgeRoutineActs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeS3ActImages:
		ids := make([]ent.Value, 0, len(m.s3_act_images))
		for id := range m.s3_act_images {
			ids = append(ids, id)
		}
		return ids
	case act.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.routine_acts))
		for id := range m.routine_acts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeds3_act_images != nil {
		edges = append(edges, act.EdgeS3ActImages)
	}
	if m.removedroutine_acts != nil {
		edges = append(edges, act.EdgeRoutineActs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeS3ActImages:
		ids := make([]ent.Value, 0, len(m.removeds3_act_images))
		for id := range m.removeds3_act_images {
			ids = append(ids, id)
		}
		return ids
	case act.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.removedroutine_acts))
		for id := range m.removedroutine_acts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareds3_act_images {
		edges = append(edges, act.EdgeS3ActImages)
	}
	if m.clearedroutine_acts {
		edges = append(edges, act.EdgeRoutineActs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActMutation) EdgeCleared(name string) bool {
	switch name {
	case act.EdgeS3ActImages:
		return m.cleareds3_act_images
	case act.EdgeRoutineActs:
		return m.clearedroutine_acts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Act unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActMutation) ResetEdge(name string) error {
	switch name {
	case act.EdgeS3ActImages:
		m.ResetS3ActImages()
		return nil
	case act.EdgeRoutineActs:
		m.ResetRoutineActs()
		return nil
	}
	return fmt.Errorf("unknown Act edge %s", name)
}

// ProgramMutation represents an operation that mutates the Program nodes in the graph.
type ProgramMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int64
	code                    *string
	program_type            *program.ProgramType
	title                   *string
	author                  *int64
	addauthor               *int64
	created_at              *time.Time
	parent_program          *string
	parent_version          *int
	addparent_version       *int
	clearedFields           map[string]struct{}
	program_releases        map[int64]struct{}
	removedprogram_releases map[int64]struct{}
	clearedprogram_releases bool
	done                    bool
	oldValue                func(context.Context) (*Program, error)
	predicates              []predicate.Program
}

var _ ent.Mutation = (*ProgramMutation)(nil)

// programOption allows management of the mutation configuration using functional options.
type programOption func(*ProgramMutation)

// newProgramMutation creates new mutation for the Program entity.
func newProgramMutation(c config, op Op, opts ...programOption) *ProgramMutation {
	m := &ProgramMutation{
		config:        c,
		op:            op,
		typ:           TypeProgram,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgramID sets the ID field of the mutation.
func withProgramID(id int64) programOption {
	return func(m *ProgramMutation) {
		var (
			err   error
			once  sync.Once
			value *Program
		)
		m.oldValue = func(ctx context.Context) (*Program, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Program.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgram sets the old Program of the mutation.
func withProgram(node *Program) programOption {
	return func(m *ProgramMutation) {
		m.oldValue = func(context.Context) (*Program, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgramMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgramMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Program entities.
func (m *ProgramMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgramMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgramMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Program.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ProgramMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProgramMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ProgramMutation) ResetCode() {
	m.code = nil
}

// SetProgramType sets the "program_type" field.
func (m *ProgramMutation) SetProgramType(pt program.ProgramType) {
	m.program_type = &pt
}

// ProgramType returns the value of the "program_type" field in the mutation.
func (m *ProgramMutation) ProgramType() (r program.ProgramType, exists bool) {
	v := m.program_type
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramType returns the old "program_type" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldProgramType(ctx context.Context) (v program.ProgramType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramType: %w", err)
	}
	return oldValue.ProgramType, nil
}

// ResetProgramType resets all changes to the "program_type" field.
func (m *ProgramMutation) ResetProgramType() {
	m.program_type = nil
}

// SetTitle sets the "title" field.
func (m *ProgramMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProgramMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProgramMutation) ResetTitle() {
	m.title = nil
}

// SetAuthor sets the "author" field.
func (m *ProgramMutation) SetAuthor(i int64) {
	m.author = &i
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ProgramMutation) Author() (r int64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldAuthor(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds i to the "author" field.
func (m *ProgramMutation) AddAuthor(i int64) {
	if m.addauthor != nil {
		*m.addauthor += i
	} else {
		m.addauthor = &i
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ProgramMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ProgramMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProgramMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProgramMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProgramMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetParentProgram sets the "parent_program" field.
func (m *ProgramMutation) SetParentProgram(s string) {
	m.parent_program = &s
}

// ParentProgram returns the value of the "parent_program" field in the mutation.
func (m *ProgramMutation) ParentProgram() (r string, exists bool) {
	v := m.parent_program
	if v == nil {
		return
	}
	return *v, true
}

// OldParentProgram returns the old "parent_program" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldParentProgram(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentProgram is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentProgram requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentProgram: %w", err)
	}
	return oldValue.ParentProgram, nil
}

// ClearParentProgram clears the value of the "parent_program" field.
func (m *ProgramMutation) ClearParentProgram() {
	m.parent_program = nil
	m.clearedFields[program.FieldParentProgram] = struct{}{}
}

// ParentProgramCleared returns if the "parent_program" field was cleared in this mutation.
func (m *ProgramMutation) ParentProgramCleared() bool {
	_, ok := m.clearedFields[program.FieldParentProgram]
	return ok
}

// ResetParentProgram resets all changes to the "parent_program" field.
func (m *ProgramMutation) ResetParentProgram() {
	m.parent_program = nil
	delete(m.clearedFields, program.FieldParentProgram)
}

// SetParentVersion sets the "parent_version" field.
func (m *ProgramMutation) SetParentVersion(i int) {
	m.parent_version = &i
	m.addparent_version = nil
}

// ParentVersion returns the value of the "parent_version" field in the mutation.
func (m *ProgramMutation) ParentVersion() (r int, exists bool) {
	v := m.parent_version
	if v == nil {
		return
	}
	return *v, true
}

// OldParentVersion returns the old "parent_version" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldParentVersion(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentVersion: %w", err)
	}
	return oldValue.ParentVersion, nil
}

// AddParentVersion adds i to the "parent_version" field.
func (m *ProgramMutation) AddParentVersion(i int) {
	if m.addparent_version != nil {
		*m.addparent_version += i
	} else {
		m.addparent_version = &i
	}
}

// AddedParentVersion returns the value that was added to the "parent_version" field in this mutation.
func (m *ProgramMutation) AddedParentVersion() (r int, exists bool) {
	v := m.addparent_version
	if v == nil {
		return
	}
	return *v, true
}

// ClearParentVersion clears the value of the "parent_version" field.
func (m *ProgramMutation) ClearParentVersion() {
	m.parent_version = nil
	m.addparent_version = nil
	m.clearedFields[program.FieldParentVersion] = struct{}{}
}

// ParentVersionCleared returns if the "parent_version" field was cleared in this mutation.
func (m *ProgramMutation) ParentVersionCleared() bool {
	_, ok := m.clearedFields[program.FieldParentVersion]
	return ok
}

// ResetParentVersion resets all changes to the "parent_version" field.
func (m *ProgramMutation) ResetParentVersion() {
	m.parent_version = nil
	m.addparent_version = nil
	delete(m.clearedFields, program.FieldParentVersion)
}

// AddProgramReleaseIDs adds the "program_releases" edge to the ProgramRelease entity by ids.
func (m *ProgramMutation) AddProgramReleaseIDs(ids ...int64) {
	if m.program_releases == nil {
		m.program_releases = make(map[int64]struct{})
	}
	for i := range ids {
		m.program_releases[ids[i]] = struct{}{}
	}
}

// ClearProgramReleases clears the "program_releases" edge to the ProgramRelease entity.
func (m *ProgramMutation) ClearProgramReleases() {
	m.clearedprogram_releases = true
}

// ProgramReleasesCleared reports if the "program_releases" edge to the ProgramRelease entity was cleared.
func (m *ProgramMutation) ProgramReleasesCleared() bool {
	return m.clearedprogram_releases
}

// RemoveProgramReleaseIDs removes the "program_releases" edge to the ProgramRelease entity by IDs.
func (m *ProgramMutation) RemoveProgramReleaseIDs(ids ...int64) {
	if m.removedprogram_releases == nil {
		m.removedprogram_releases = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.program_releases, ids[i])
		m.removedprogram_releases[ids[i]] = struct{}{}
	}
}

// RemovedProgramReleases returns the removed IDs of the "program_releases" edge to the ProgramRelease entity.
func (m *ProgramMutation) RemovedProgramReleasesIDs() (ids []int64) {
	for id := range m.removedprogram_releases {
		ids = append(ids, id)
	}
	return
}

// ProgramReleasesIDs returns the "program_releases" edge IDs in the mutation.
func (m *ProgramMutation) ProgramReleasesIDs() (ids []int64) {
	for id := range m.program_releases {
		ids = append(ids, id)
	}
	return
}

// ResetProgramReleases resets all changes to the "program_releases" edge.
func (m *ProgramMutation) ResetProgramReleases() {
	m.program_releases = nil
	m.clearedprogram_releases = false
	m.removedprogram_releases = nil
}

// Where appends a list predicates to the ProgramMutation builder.
func (m *ProgramMutation) Where(ps ...predicate.Program) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProgramMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProgramMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Program, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProgramMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProgramMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Program).
func (m *ProgramMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgramMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.code != nil {
		fields = append(fields, program.FieldCode)
	}
	if m.program_type != nil {
		fields = append(fields, program.FieldProgramType)
	}
	if m.title != nil {
		fields = append(fields, program.FieldTitle)
	}
	if m.author != nil {
		fields = append(fields, program.FieldAuthor)
	}
	if m.created_at != nil {
		fields = append(fields, program.FieldCreatedAt)
	}
	if m.parent_program != nil {
		fields = append(fields, program.FieldParentProgram)
	}
	if m.parent_version != nil {
		fields = append(fields, program.FieldParentVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgramMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case program.FieldCode:
		return m.Code()
	case program.FieldProgramType:
		return m.ProgramType()
	case program.FieldTitle:
		return m.Title()
	case program.FieldAuthor:
		return m.Author()
	case program.FieldCreatedAt:
		return m.CreatedAt()
	case program.FieldParentProgram:
		return m.ParentProgram()
	case program.FieldParentVersion:
		return m.ParentVersion()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgramMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case program.FieldCode:
		return m.OldCode(ctx)
	case program.FieldProgramType:
		return m.OldProgramType(ctx)
	case program.FieldTitle:
		return m.OldTitle(ctx)
	case program.FieldAuthor:
		return m.OldAuthor(ctx)
	case program.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case program.FieldParentProgram:
		return m.OldParentProgram(ctx)
	case program.FieldParentVersion:
		return m.OldParentVersion(ctx)
	}
	return nil, fmt.Errorf("unknown Program field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramMutation) SetField(name string, value ent.Value) error {
	switch name {
	case program.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case program.FieldProgramType:
		v, ok := value.(program.ProgramType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramType(v)
		return nil
	case program.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case program.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case program.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case program.FieldParentProgram:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentProgram(v)
		return nil
	case program.FieldParentVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Program field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgramMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, program.FieldAuthor)
	}
	if m.addparent_version != nil {
		fields = append(fields, program.FieldParentVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgramMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case program.FieldAuthor:
		return m.AddedAuthor()
	case program.FieldParentVersion:
		return m.AddedParentVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramMutation) AddField(name string, value ent.Value) error {
	switch name {
	case program.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	case program.FieldParentVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Program numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgramMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(program.FieldParentProgram) {
		fields = append(fields, program.FieldParentProgram)
	}
	if m.FieldCleared(program.FieldParentVersion) {
		fields = append(fields, program.FieldParentVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgramMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgramMutation) ClearField(name string) error {
	switch name {
	case program.FieldParentProgram:
		m.ClearParentProgram()
		return nil
	case program.FieldParentVersion:
		m.ClearParentVersion()
		return nil
	}
	return fmt.Errorf("unknown Program nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgramMutation) ResetField(name string) error {
	switch name {
	case program.FieldCode:
		m.ResetCode()
		return nil
	case program.FieldProgramType:
		m.ResetProgramType()
		return nil
	case program.FieldTitle:
		m.ResetTitle()
		return nil
	case program.FieldAuthor:
		m.ResetAuthor()
		return nil
	case program.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case program.FieldParentProgram:
		m.ResetParentProgram()
		return nil
	case program.FieldParentVersion:
		m.ResetParentVersion()
		return nil
	}
	return fmt.Errorf("unknown Program field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgramMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.program_releases != nil {
		edges = append(edges, program.EdgeProgramReleases)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgramMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case program.EdgeProgramReleases:
		ids := make([]ent.Value, 0, len(m.program_releases))
		for id := range m.program_releases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgramMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprogram_releases != nil {
		edges = append(edges, program.EdgeProgramReleases)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgramMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case program.EdgeProgramReleases:
		ids := make([]ent.Value, 0, len(m.removedprogram_releases))
		for id := range m.removedprogram_releases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgramMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprogram_releases {
		edges = append(edges, program.EdgeProgramReleases)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgramMutation) EdgeCleared(name string) bool {
	switch name {
	case program.EdgeProgramReleases:
		return m.clearedprogram_releases
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgramMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Program unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgramMutation) ResetEdge(name string) error {
	switch name {
	case program.EdgeProgramReleases:
		m.ResetProgramReleases()
		return nil
	}
	return fmt.Errorf("unknown Program edge %s", name)
}

// ProgramReleaseMutation represents an operation that mutates the ProgramRelease nodes in the graph.
type ProgramReleaseMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	version                  *int
	addversion               *int
	created_at               *time.Time
	text                     *string
	clearedFields            map[string]struct{}
	program                  *int64
	clearedprogram           bool
	s3_program_images        map[int64]struct{}
	removeds3_program_images map[int64]struct{}
	cleareds3_program_images bool
	routines                 map[int64]struct{}
	removedroutines          map[int64]struct{}
	clearedroutines          bool
	done                     bool
	oldValue                 func(context.Context) (*ProgramRelease, error)
	predicates               []predicate.ProgramRelease
}

var _ ent.Mutation = (*ProgramReleaseMutation)(nil)

// programreleaseOption allows management of the mutation configuration using functional options.
type programreleaseOption func(*ProgramReleaseMutation)

// newProgramReleaseMutation creates new mutation for the ProgramRelease entity.
func newProgramReleaseMutation(c config, op Op, opts ...programreleaseOption) *ProgramReleaseMutation {
	m := &ProgramReleaseMutation{
		config:        c,
		op:            op,
		typ:           TypeProgramRelease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgramReleaseID sets the ID field of the mutation.
func withProgramReleaseID(id int64) programreleaseOption {
	return func(m *ProgramReleaseMutation) {
		var (
			err   error
			once  sync.Once
			value *ProgramRelease
		)
		m.oldValue = func(ctx context.Context) (*ProgramRelease, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProgramRelease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgramRelease sets the old ProgramRelease of the mutation.
func withProgramRelease(node *ProgramRelease) programreleaseOption {
	return func(m *ProgramReleaseMutation) {
		m.oldValue = func(context.Context) (*ProgramRelease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgramReleaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgramReleaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProgramRelease entities.
func (m *ProgramReleaseMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgramReleaseMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgramReleaseMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProgramRelease.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVersion sets the "version" field.
func (m *ProgramReleaseMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ProgramReleaseMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ProgramRelease entity.
// If the ProgramRelease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramReleaseMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *ProgramReleaseMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ProgramReleaseMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *ProgramReleaseMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProgramReleaseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProgramReleaseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProgramRelease entity.
// If the ProgramRelease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramReleaseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProgramReleaseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetText sets the "text" field.
func (m *ProgramReleaseMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ProgramReleaseMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the ProgramRelease entity.
// If the ProgramRelease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramReleaseMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ProgramReleaseMutation) ResetText() {
	m.text = nil
}

// SetProgramID sets the "program" edge to the Program entity by id.
func (m *ProgramReleaseMutation) SetProgramID(id int64) {
	m.program = &id
}

// ClearProgram clears the "program" edge to the Program entity.
func (m *ProgramReleaseMutation) ClearProgram() {
	m.clearedprogram = true
}

// ProgramCleared reports if the "program" edge to the Program entity was cleared.
func (m *ProgramReleaseMutation) ProgramCleared() bool {
	return m.clearedprogram
}

// ProgramID returns the "program" edge ID in the mutation.
func (m *ProgramReleaseMutation) ProgramID() (id int64, exists bool) {
	if m.program != nil {
		return *m.program, true
	}
	return
}

// ProgramIDs returns the "program" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramID instead. It exists only for internal usage by the builders.
func (m *ProgramReleaseMutation) ProgramIDs() (ids []int64) {
	if id := m.program; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgram resets all changes to the "program" edge.
func (m *ProgramReleaseMutation) ResetProgram() {
	m.program = nil
	m.clearedprogram = false
}

// AddS3ProgramImageIDs adds the "s3_program_images" edge to the S3ProgramImage entity by ids.
func (m *ProgramReleaseMutation) AddS3ProgramImageIDs(ids ...int64) {
	if m.s3_program_images == nil {
		m.s3_program_images = make(map[int64]struct{})
	}
	for i := range ids {
		m.s3_program_images[ids[i]] = struct{}{}
	}
}

// ClearS3ProgramImages clears the "s3_program_images" edge to the S3ProgramImage entity.
func (m *ProgramReleaseMutation) ClearS3ProgramImages() {
	m.cleareds3_program_images = true
}

// S3ProgramImagesCleared reports if the "s3_program_images" edge to the S3ProgramImage entity was cleared.
func (m *ProgramReleaseMutation) S3ProgramImagesCleared() bool {
	return m.cleareds3_program_images
}

// RemoveS3ProgramImageIDs removes the "s3_program_images" edge to the S3ProgramImage entity by IDs.
func (m *ProgramReleaseMutation) RemoveS3ProgramImageIDs(ids ...int64) {
	if m.removeds3_program_images == nil {
		m.removeds3_program_images = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.s3_program_images, ids[i])
		m.removeds3_program_images[ids[i]] = struct{}{}
	}
}

// RemovedS3ProgramImages returns the removed IDs of the "s3_program_images" edge to the S3ProgramImage entity.
func (m *ProgramReleaseMutation) RemovedS3ProgramImagesIDs() (ids []int64) {
	for id := range m.removeds3_program_images {
		ids = append(ids, id)
	}
	return
}

// S3ProgramImagesIDs returns the "s3_program_images" edge IDs in the mutation.
func (m *ProgramReleaseMutation) S3ProgramImagesIDs() (ids []int64) {
	for id := range m.s3_program_images {
		ids = append(ids, id)
	}
	return
}

// ResetS3ProgramImages resets all changes to the "s3_program_images" edge.
func (m *ProgramReleaseMutation) ResetS3ProgramImages() {
	m.s3_program_images = nil
	m.cleareds3_program_images = false
	m.removeds3_program_images = nil
}

// AddRoutineIDs adds the "routines" edge to the Routine entity by ids.
func (m *ProgramReleaseMutation) AddRoutineIDs(ids ...int64) {
	if m.routines == nil {
		m.routines = make(map[int64]struct{})
	}
	for i := range ids {
		m.routines[ids[i]] = struct{}{}
	}
}

// ClearRoutines clears the "routines" edge to the Routine entity.
func (m *ProgramReleaseMutation) ClearRoutines() {
	m.clearedroutines = true
}

// RoutinesCleared reports if the "routines" edge to the Routine entity was cleared.
func (m *ProgramReleaseMutation) RoutinesCleared() bool {
	return m.clearedroutines
}

// RemoveRoutineIDs removes the "routines" edge to the Routine entity by IDs.
func (m *ProgramReleaseMutation) RemoveRoutineIDs(ids ...int64) {
	if m.removedroutines == nil {
		m.removedroutines = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.routines, ids[i])
		m.removedroutines[ids[i]] = struct{}{}
	}
}

// RemovedRoutines returns the removed IDs of the "routines" edge to the Routine entity.
func (m *ProgramReleaseMutation) RemovedRoutinesIDs() (ids []int64) {
	for id := range m.removedroutines {
		ids = append(ids, id)
	}
	return
}

// RoutinesIDs returns the "routines" edge IDs in the mutation.
func (m *ProgramReleaseMutation) RoutinesIDs() (ids []int64) {
	for id := range m.routines {
		ids = append(ids, id)
	}
	return
}

// ResetRoutines resets all changes to the "routines" edge.
func (m *ProgramReleaseMutation) ResetRoutines() {
	m.routines = nil
	m.clearedroutines = false
	m.removedroutines = nil
}

// Where appends a list predicates to the ProgramReleaseMutation builder.
func (m *ProgramReleaseMutation) Where(ps ...predicate.ProgramRelease) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProgramReleaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProgramReleaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProgramRelease, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProgramReleaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProgramReleaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProgramRelease).
func (m *ProgramReleaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgramReleaseMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.version != nil {
		fields = append(fields, programrelease.FieldVersion)
	}
	if m.created_at != nil {
		fields = append(fields, programrelease.FieldCreatedAt)
	}
	if m.text != nil {
		fields = append(fields, programrelease.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgramReleaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case programrelease.FieldVersion:
		return m.Version()
	case programrelease.FieldCreatedAt:
		return m.CreatedAt()
	case programrelease.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgramReleaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case programrelease.FieldVersion:
		return m.OldVersion(ctx)
	case programrelease.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case programrelease.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown ProgramRelease field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramReleaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case programrelease.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case programrelease.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case programrelease.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown ProgramRelease field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgramReleaseMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, programrelease.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgramReleaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case programrelease.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramReleaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case programrelease.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown ProgramRelease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgramReleaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgramReleaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgramReleaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProgramRelease nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgramReleaseMutation) ResetField(name string) error {
	switch name {
	case programrelease.FieldVersion:
		m.ResetVersion()
		return nil
	case programrelease.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case programrelease.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown ProgramRelease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgramReleaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.program != nil {
		edges = append(edges, programrelease.EdgeProgram)
	}
	if m.s3_program_images != nil {
		edges = append(edges, programrelease.EdgeS3ProgramImages)
	}
	if m.routines != nil {
		edges = append(edges, programrelease.EdgeRoutines)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgramReleaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case programrelease.EdgeProgram:
		if id := m.program; id != nil {
			return []ent.Value{*id}
		}
	case programrelease.EdgeS3ProgramImages:
		ids := make([]ent.Value, 0, len(m.s3_program_images))
		for id := range m.s3_program_images {
			ids = append(ids, id)
		}
		return ids
	case programrelease.EdgeRoutines:
		ids := make([]ent.Value, 0, len(m.routines))
		for id := range m.routines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgramReleaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeds3_program_images != nil {
		edges = append(edges, programrelease.EdgeS3ProgramImages)
	}
	if m.removedroutines != nil {
		edges = append(edges, programrelease.EdgeRoutines)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgramReleaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case programrelease.EdgeS3ProgramImages:
		ids := make([]ent.Value, 0, len(m.removeds3_program_images))
		for id := range m.removeds3_program_images {
			ids = append(ids, id)
		}
		return ids
	case programrelease.EdgeRoutines:
		ids := make([]ent.Value, 0, len(m.removedroutines))
		for id := range m.removedroutines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgramReleaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprogram {
		edges = append(edges, programrelease.EdgeProgram)
	}
	if m.cleareds3_program_images {
		edges = append(edges, programrelease.EdgeS3ProgramImages)
	}
	if m.clearedroutines {
		edges = append(edges, programrelease.EdgeRoutines)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgramReleaseMutation) EdgeCleared(name string) bool {
	switch name {
	case programrelease.EdgeProgram:
		return m.clearedprogram
	case programrelease.EdgeS3ProgramImages:
		return m.cleareds3_program_images
	case programrelease.EdgeRoutines:
		return m.clearedroutines
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgramReleaseMutation) ClearEdge(name string) error {
	switch name {
	case programrelease.EdgeProgram:
		m.ClearProgram()
		return nil
	}
	return fmt.Errorf("unknown ProgramRelease unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgramReleaseMutation) ResetEdge(name string) error {
	switch name {
	case programrelease.EdgeProgram:
		m.ResetProgram()
		return nil
	case programrelease.EdgeS3ProgramImages:
		m.ResetS3ProgramImages()
		return nil
	case programrelease.EdgeRoutines:
		m.ResetRoutines()
		return nil
	}
	return fmt.Errorf("unknown ProgramRelease edge %s", name)
}

// RoutineMutation represents an operation that mutates the Routine nodes in the graph.
type RoutineMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int64
	day                    *int
	addday                 *int
	clearedFields          map[string]struct{}
	program_release        *int64
	clearedprogram_release bool
	routine_acts           map[int64]struct{}
	removedroutine_acts    map[int64]struct{}
	clearedroutine_acts    bool
	done                   bool
	oldValue               func(context.Context) (*Routine, error)
	predicates             []predicate.Routine
}

var _ ent.Mutation = (*RoutineMutation)(nil)

// routineOption allows management of the mutation configuration using functional options.
type routineOption func(*RoutineMutation)

// newRoutineMutation creates new mutation for the Routine entity.
func newRoutineMutation(c config, op Op, opts ...routineOption) *RoutineMutation {
	m := &RoutineMutation{
		config:        c,
		op:            op,
		typ:           TypeRoutine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoutineID sets the ID field of the mutation.
func withRoutineID(id int64) routineOption {
	return func(m *RoutineMutation) {
		var (
			err   error
			once  sync.Once
			value *Routine
		)
		m.oldValue = func(ctx context.Context) (*Routine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Routine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoutine sets the old Routine of the mutation.
func withRoutine(node *Routine) routineOption {
	return func(m *RoutineMutation) {
		m.oldValue = func(context.Context) (*Routine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoutineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoutineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Routine entities.
func (m *RoutineMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoutineMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoutineMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Routine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDay sets the "day" field.
func (m *RoutineMutation) SetDay(i int) {
	m.day = &i
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *RoutineMutation) Day() (r int, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the Routine entity.
// If the Routine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineMutation) OldDay(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds i to the "day" field.
func (m *RoutineMutation) AddDay(i int) {
	if m.addday != nil {
		*m.addday += i
	} else {
		m.addday = &i
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *RoutineMutation) AddedDay() (r int, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *RoutineMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetProgramReleaseID sets the "program_release" edge to the ProgramRelease entity by id.
func (m *RoutineMutation) SetProgramReleaseID(id int64) {
	m.program_release = &id
}

// ClearProgramRelease clears the "program_release" edge to the ProgramRelease entity.
func (m *RoutineMutation) ClearProgramRelease() {
	m.clearedprogram_release = true
}

// ProgramReleaseCleared reports if the "program_release" edge to the ProgramRelease entity was cleared.
func (m *RoutineMutation) ProgramReleaseCleared() bool {
	return m.clearedprogram_release
}

// ProgramReleaseID returns the "program_release" edge ID in the mutation.
func (m *RoutineMutation) ProgramReleaseID() (id int64, exists bool) {
	if m.program_release != nil {
		return *m.program_release, true
	}
	return
}

// ProgramReleaseIDs returns the "program_release" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramReleaseID instead. It exists only for internal usage by the builders.
func (m *RoutineMutation) ProgramReleaseIDs() (ids []int64) {
	if id := m.program_release; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgramRelease resets all changes to the "program_release" edge.
func (m *RoutineMutation) ResetProgramRelease() {
	m.program_release = nil
	m.clearedprogram_release = false
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by ids.
func (m *RoutineMutation) AddRoutineActIDs(ids ...int64) {
	if m.routine_acts == nil {
		m.routine_acts = make(map[int64]struct{})
	}
	for i := range ids {
		m.routine_acts[ids[i]] = struct{}{}
	}
}

// ClearRoutineActs clears the "routine_acts" edge to the RoutineAct entity.
func (m *RoutineMutation) ClearRoutineActs() {
	m.clearedroutine_acts = true
}

// RoutineActsCleared reports if the "routine_acts" edge to the RoutineAct entity was cleared.
func (m *RoutineMutation) RoutineActsCleared() bool {
	return m.clearedroutine_acts
}

// RemoveRoutineActIDs removes the "routine_acts" edge to the RoutineAct entity by IDs.
func (m *RoutineMutation) RemoveRoutineActIDs(ids ...int64) {
	if m.removedroutine_acts == nil {
		m.removedroutine_acts = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.routine_acts, ids[i])
		m.removedroutine_acts[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActs returns the removed IDs of the "routine_acts" edge to the RoutineAct entity.
func (m *RoutineMutation) RemovedRoutineActsIDs() (ids []int64) {
	for id := range m.removedroutine_acts {
		ids = append(ids, id)
	}
	return
}

// RoutineActsIDs returns the "routine_acts" edge IDs in the mutation.
func (m *RoutineMutation) RoutineActsIDs() (ids []int64) {
	for id := range m.routine_acts {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActs resets all changes to the "routine_acts" edge.
func (m *RoutineMutation) ResetRoutineActs() {
	m.routine_acts = nil
	m.clearedroutine_acts = false
	m.removedroutine_acts = nil
}

// Where appends a list predicates to the RoutineMutation builder.
func (m *RoutineMutation) Where(ps ...predicate.Routine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoutineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoutineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Routine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoutineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoutineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Routine).
func (m *RoutineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoutineMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.day != nil {
		fields = append(fields, routine.FieldDay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoutineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case routine.FieldDay:
		return m.Day()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoutineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case routine.FieldDay:
		return m.OldDay(ctx)
	}
	return nil, fmt.Errorf("unknown Routine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case routine.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	}
	return fmt.Errorf("unknown Routine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoutineMutation) AddedFields() []string {
	var fields []string
	if m.addday != nil {
		fields = append(fields, routine.FieldDay)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoutineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case routine.FieldDay:
		return m.AddedDay()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case routine.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	}
	return fmt.Errorf("unknown Routine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoutineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoutineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoutineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Routine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoutineMutation) ResetField(name string) error {
	switch name {
	case routine.FieldDay:
		m.ResetDay()
		return nil
	}
	return fmt.Errorf("unknown Routine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoutineMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.program_release != nil {
		edges = append(edges, routine.EdgeProgramRelease)
	}
	if m.routine_acts != nil {
		edges = append(edges, routine.EdgeRoutineActs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoutineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case routine.EdgeProgramRelease:
		if id := m.program_release; id != nil {
			return []ent.Value{*id}
		}
	case routine.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.routine_acts))
		for id := range m.routine_acts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoutineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroutine_acts != nil {
		edges = append(edges, routine.EdgeRoutineActs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoutineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case routine.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.removedroutine_acts))
		for id := range m.removedroutine_acts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoutineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprogram_release {
		edges = append(edges, routine.EdgeProgramRelease)
	}
	if m.clearedroutine_acts {
		edges = append(edges, routine.EdgeRoutineActs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoutineMutation) EdgeCleared(name string) bool {
	switch name {
	case routine.EdgeProgramRelease:
		return m.clearedprogram_release
	case routine.EdgeRoutineActs:
		return m.clearedroutine_acts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoutineMutation) ClearEdge(name string) error {
	switch name {
	case routine.EdgeProgramRelease:
		m.ClearProgramRelease()
		return nil
	}
	return fmt.Errorf("unknown Routine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoutineMutation) ResetEdge(name string) error {
	switch name {
	case routine.EdgeProgramRelease:
		m.ResetProgramRelease()
		return nil
	case routine.EdgeRoutineActs:
		m.ResetRoutineActs()
		return nil
	}
	return fmt.Errorf("unknown Routine edge %s", name)
}

// RoutineActMutation represents an operation that mutates the RoutineAct nodes in the graph.
type RoutineActMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	_order            *int
	add_order         *int
	act_code          *string
	stage             *routineact.Stage
	reps_or_meters    *uint
	addreps_or_meters *int
	ratio_or_secs     *float64
	addratio_or_secs  *float64
	clearedFields     map[string]struct{}
	act               *int64
	clearedact        bool
	routine           *int64
	clearedroutine    bool
	done              bool
	oldValue          func(context.Context) (*RoutineAct, error)
	predicates        []predicate.RoutineAct
}

var _ ent.Mutation = (*RoutineActMutation)(nil)

// routineactOption allows management of the mutation configuration using functional options.
type routineactOption func(*RoutineActMutation)

// newRoutineActMutation creates new mutation for the RoutineAct entity.
func newRoutineActMutation(c config, op Op, opts ...routineactOption) *RoutineActMutation {
	m := &RoutineActMutation{
		config:        c,
		op:            op,
		typ:           TypeRoutineAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoutineActID sets the ID field of the mutation.
func withRoutineActID(id int64) routineactOption {
	return func(m *RoutineActMutation) {
		var (
			err   error
			once  sync.Once
			value *RoutineAct
		)
		m.oldValue = func(ctx context.Context) (*RoutineAct, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoutineAct.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoutineAct sets the old RoutineAct of the mutation.
func withRoutineAct(node *RoutineAct) routineactOption {
	return func(m *RoutineActMutation) {
		m.oldValue = func(context.Context) (*RoutineAct, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoutineActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoutineActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoutineAct entities.
func (m *RoutineActMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoutineActMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoutineActMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoutineAct.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrder sets the "order" field.
func (m *RoutineActMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RoutineActMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *RoutineActMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RoutineActMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RoutineActMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetActCode sets the "act_code" field.
func (m *RoutineActMutation) SetActCode(s string) {
	m.act_code = &s
}

// ActCode returns the value of the "act_code" field in the mutation.
func (m *RoutineActMutation) ActCode() (r string, exists bool) {
	v := m.act_code
	if v == nil {
		return
	}
	return *v, true
}

// OldActCode returns the old "act_code" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldActCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActCode: %w", err)
	}
	return oldValue.ActCode, nil
}

// ResetActCode resets all changes to the "act_code" field.
func (m *RoutineActMutation) ResetActCode() {
	m.act_code = nil
}

// SetStage sets the "stage" field.
func (m *RoutineActMutation) SetStage(r routineact.Stage) {
	m.stage = &r
}

// Stage returns the value of the "stage" field in the mutation.
func (m *RoutineActMutation) Stage() (r routineact.Stage, exists bool) {
	v := m.stage
	if v == nil {
		return
	}
	return *v, true
}

// OldStage returns the old "stage" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldStage(ctx context.Context) (v routineact.Stage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStage: %w", err)
	}
	return oldValue.Stage, nil
}

// ResetStage resets all changes to the "stage" field.
func (m *RoutineActMutation) ResetStage() {
	m.stage = nil
}

// SetRepsOrMeters sets the "reps_or_meters" field.
func (m *RoutineActMutation) SetRepsOrMeters(u uint) {
	m.reps_or_meters = &u
	m.addreps_or_meters = nil
}

// RepsOrMeters returns the value of the "reps_or_meters" field in the mutation.
func (m *RoutineActMutation) RepsOrMeters() (r uint, exists bool) {
	v := m.reps_or_meters
	if v == nil {
		return
	}
	return *v, true
}

// OldRepsOrMeters returns the old "reps_or_meters" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldRepsOrMeters(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepsOrMeters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepsOrMeters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepsOrMeters: %w", err)
	}
	return oldValue.RepsOrMeters, nil
}

// AddRepsOrMeters adds u to the "reps_or_meters" field.
func (m *RoutineActMutation) AddRepsOrMeters(u int) {
	if m.addreps_or_meters != nil {
		*m.addreps_or_meters += u
	} else {
		m.addreps_or_meters = &u
	}
}

// AddedRepsOrMeters returns the value that was added to the "reps_or_meters" field in this mutation.
func (m *RoutineActMutation) AddedRepsOrMeters() (r int, exists bool) {
	v := m.addreps_or_meters
	if v == nil {
		return
	}
	return *v, true
}

// ResetRepsOrMeters resets all changes to the "reps_or_meters" field.
func (m *RoutineActMutation) ResetRepsOrMeters() {
	m.reps_or_meters = nil
	m.addreps_or_meters = nil
}

// SetRatioOrSecs sets the "ratio_or_secs" field.
func (m *RoutineActMutation) SetRatioOrSecs(f float64) {
	m.ratio_or_secs = &f
	m.addratio_or_secs = nil
}

// RatioOrSecs returns the value of the "ratio_or_secs" field in the mutation.
func (m *RoutineActMutation) RatioOrSecs() (r float64, exists bool) {
	v := m.ratio_or_secs
	if v == nil {
		return
	}
	return *v, true
}

// OldRatioOrSecs returns the old "ratio_or_secs" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldRatioOrSecs(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRatioOrSecs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRatioOrSecs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRatioOrSecs: %w", err)
	}
	return oldValue.RatioOrSecs, nil
}

// AddRatioOrSecs adds f to the "ratio_or_secs" field.
func (m *RoutineActMutation) AddRatioOrSecs(f float64) {
	if m.addratio_or_secs != nil {
		*m.addratio_or_secs += f
	} else {
		m.addratio_or_secs = &f
	}
}

// AddedRatioOrSecs returns the value that was added to the "ratio_or_secs" field in this mutation.
func (m *RoutineActMutation) AddedRatioOrSecs() (r float64, exists bool) {
	v := m.addratio_or_secs
	if v == nil {
		return
	}
	return *v, true
}

// ResetRatioOrSecs resets all changes to the "ratio_or_secs" field.
func (m *RoutineActMutation) ResetRatioOrSecs() {
	m.ratio_or_secs = nil
	m.addratio_or_secs = nil
}

// SetActID sets the "act" edge to the Act entity by id.
func (m *RoutineActMutation) SetActID(id int64) {
	m.act = &id
}

// ClearAct clears the "act" edge to the Act entity.
func (m *RoutineActMutation) ClearAct() {
	m.clearedact = true
}

// ActCleared reports if the "act" edge to the Act entity was cleared.
func (m *RoutineActMutation) ActCleared() bool {
	return m.clearedact
}

// ActID returns the "act" edge ID in the mutation.
func (m *RoutineActMutation) ActID() (id int64, exists bool) {
	if m.act != nil {
		return *m.act, true
	}
	return
}

// ActIDs returns the "act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActID instead. It exists only for internal usage by the builders.
func (m *RoutineActMutation) ActIDs() (ids []int64) {
	if id := m.act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAct resets all changes to the "act" edge.
func (m *RoutineActMutation) ResetAct() {
	m.act = nil
	m.clearedact = false
}

// SetRoutineID sets the "routine" edge to the Routine entity by id.
func (m *RoutineActMutation) SetRoutineID(id int64) {
	m.routine = &id
}

// ClearRoutine clears the "routine" edge to the Routine entity.
func (m *RoutineActMutation) ClearRoutine() {
	m.clearedroutine = true
}

// RoutineCleared reports if the "routine" edge to the Routine entity was cleared.
func (m *RoutineActMutation) RoutineCleared() bool {
	return m.clearedroutine
}

// RoutineID returns the "routine" edge ID in the mutation.
func (m *RoutineActMutation) RoutineID() (id int64, exists bool) {
	if m.routine != nil {
		return *m.routine, true
	}
	return
}

// RoutineIDs returns the "routine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoutineID instead. It exists only for internal usage by the builders.
func (m *RoutineActMutation) RoutineIDs() (ids []int64) {
	if id := m.routine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoutine resets all changes to the "routine" edge.
func (m *RoutineActMutation) ResetRoutine() {
	m.routine = nil
	m.clearedroutine = false
}

// Where appends a list predicates to the RoutineActMutation builder.
func (m *RoutineActMutation) Where(ps ...predicate.RoutineAct) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoutineActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoutineActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoutineAct, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoutineActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoutineActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoutineAct).
func (m *RoutineActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoutineActMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._order != nil {
		fields = append(fields, routineact.FieldOrder)
	}
	if m.act_code != nil {
		fields = append(fields, routineact.FieldActCode)
	}
	if m.stage != nil {
		fields = append(fields, routineact.FieldStage)
	}
	if m.reps_or_meters != nil {
		fields = append(fields, routineact.FieldRepsOrMeters)
	}
	if m.ratio_or_secs != nil {
		fields = append(fields, routineact.FieldRatioOrSecs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoutineActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case routineact.FieldOrder:
		return m.Order()
	case routineact.FieldActCode:
		return m.ActCode()
	case routineact.FieldStage:
		return m.Stage()
	case routineact.FieldRepsOrMeters:
		return m.RepsOrMeters()
	case routineact.FieldRatioOrSecs:
		return m.RatioOrSecs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoutineActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case routineact.FieldOrder:
		return m.OldOrder(ctx)
	case routineact.FieldActCode:
		return m.OldActCode(ctx)
	case routineact.FieldStage:
		return m.OldStage(ctx)
	case routineact.FieldRepsOrMeters:
		return m.OldRepsOrMeters(ctx)
	case routineact.FieldRatioOrSecs:
		return m.OldRatioOrSecs(ctx)
	}
	return nil, fmt.Errorf("unknown RoutineAct field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case routineact.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case routineact.FieldActCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActCode(v)
		return nil
	case routineact.FieldStage:
		v, ok := value.(routineact.Stage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStage(v)
		return nil
	case routineact.FieldRepsOrMeters:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepsOrMeters(v)
		return nil
	case routineact.FieldRatioOrSecs:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRatioOrSecs(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineAct field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoutineActMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, routineact.FieldOrder)
	}
	if m.addreps_or_meters != nil {
		fields = append(fields, routineact.FieldRepsOrMeters)
	}
	if m.addratio_or_secs != nil {
		fields = append(fields, routineact.FieldRatioOrSecs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoutineActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case routineact.FieldOrder:
		return m.AddedOrder()
	case routineact.FieldRepsOrMeters:
		return m.AddedRepsOrMeters()
	case routineact.FieldRatioOrSecs:
		return m.AddedRatioOrSecs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case routineact.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case routineact.FieldRepsOrMeters:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRepsOrMeters(v)
		return nil
	case routineact.FieldRatioOrSecs:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRatioOrSecs(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineAct numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoutineActMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoutineActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoutineActMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoutineAct nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoutineActMutation) ResetField(name string) error {
	switch name {
	case routineact.FieldOrder:
		m.ResetOrder()
		return nil
	case routineact.FieldActCode:
		m.ResetActCode()
		return nil
	case routineact.FieldStage:
		m.ResetStage()
		return nil
	case routineact.FieldRepsOrMeters:
		m.ResetRepsOrMeters()
		return nil
	case routineact.FieldRatioOrSecs:
		m.ResetRatioOrSecs()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoutineActMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.act != nil {
		edges = append(edges, routineact.EdgeAct)
	}
	if m.routine != nil {
		edges = append(edges, routineact.EdgeRoutine)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoutineActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case routineact.EdgeAct:
		if id := m.act; id != nil {
			return []ent.Value{*id}
		}
	case routineact.EdgeRoutine:
		if id := m.routine; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoutineActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoutineActMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoutineActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedact {
		edges = append(edges, routineact.EdgeAct)
	}
	if m.clearedroutine {
		edges = append(edges, routineact.EdgeRoutine)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoutineActMutation) EdgeCleared(name string) bool {
	switch name {
	case routineact.EdgeAct:
		return m.clearedact
	case routineact.EdgeRoutine:
		return m.clearedroutine
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoutineActMutation) ClearEdge(name string) error {
	switch name {
	case routineact.EdgeAct:
		m.ClearAct()
		return nil
	case routineact.EdgeRoutine:
		m.ClearRoutine()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoutineActMutation) ResetEdge(name string) error {
	switch name {
	case routineact.EdgeAct:
		m.ResetAct()
		return nil
	case routineact.EdgeRoutine:
		m.ResetRoutine()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct edge %s", name)
}

// S3ActImageMutation represents an operation that mutates the S3ActImage nodes in the graph.
type S3ActImageMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	_order          *int
	add_order       *int
	clearedFields   map[string]struct{}
	act             *int64
	clearedact      bool
	s3_image        *int64
	cleareds3_image bool
	done            bool
	oldValue        func(context.Context) (*S3ActImage, error)
	predicates      []predicate.S3ActImage
}

var _ ent.Mutation = (*S3ActImageMutation)(nil)

// s3actimageOption allows management of the mutation configuration using functional options.
type s3actimageOption func(*S3ActImageMutation)

// newS3ActImageMutation creates new mutation for the S3ActImage entity.
func newS3ActImageMutation(c config, op Op, opts ...s3actimageOption) *S3ActImageMutation {
	m := &S3ActImageMutation{
		config:        c,
		op:            op,
		typ:           TypeS3ActImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3ActImageID sets the ID field of the mutation.
func withS3ActImageID(id int64) s3actimageOption {
	return func(m *S3ActImageMutation) {
		var (
			err   error
			once  sync.Once
			value *S3ActImage
		)
		m.oldValue = func(ctx context.Context) (*S3ActImage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3ActImage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3ActImage sets the old S3ActImage of the mutation.
func withS3ActImage(node *S3ActImage) s3actimageOption {
	return func(m *S3ActImageMutation) {
		m.oldValue = func(context.Context) (*S3ActImage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3ActImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3ActImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3ActImage entities.
func (m *S3ActImageMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3ActImageMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3ActImageMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3ActImage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrder sets the "order" field.
func (m *S3ActImageMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *S3ActImageMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the S3ActImage entity.
// If the S3ActImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ActImageMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *S3ActImageMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *S3ActImageMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *S3ActImageMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetActID sets the "act_id" field.
func (m *S3ActImageMutation) SetActID(i int64) {
	m.act = &i
}

// ActID returns the value of the "act_id" field in the mutation.
func (m *S3ActImageMutation) ActID() (r int64, exists bool) {
	v := m.act
	if v == nil {
		return
	}
	return *v, true
}

// OldActID returns the old "act_id" field's value of the S3ActImage entity.
// If the S3ActImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ActImageMutation) OldActID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActID: %w", err)
	}
	return oldValue.ActID, nil
}

// ResetActID resets all changes to the "act_id" field.
func (m *S3ActImageMutation) ResetActID() {
	m.act = nil
}

// SetImageID sets the "image_id" field.
func (m *S3ActImageMutation) SetImageID(i int64) {
	m.s3_image = &i
}

// ImageID returns the value of the "image_id" field in the mutation.
func (m *S3ActImageMutation) ImageID() (r int64, exists bool) {
	v := m.s3_image
	if v == nil {
		return
	}
	return *v, true
}

// OldImageID returns the old "image_id" field's value of the S3ActImage entity.
// If the S3ActImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ActImageMutation) OldImageID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageID: %w", err)
	}
	return oldValue.ImageID, nil
}

// ResetImageID resets all changes to the "image_id" field.
func (m *S3ActImageMutation) ResetImageID() {
	m.s3_image = nil
}

// ClearAct clears the "act" edge to the Act entity.
func (m *S3ActImageMutation) ClearAct() {
	m.clearedact = true
}

// ActCleared reports if the "act" edge to the Act entity was cleared.
func (m *S3ActImageMutation) ActCleared() bool {
	return m.clearedact
}

// ActIDs returns the "act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActID instead. It exists only for internal usage by the builders.
func (m *S3ActImageMutation) ActIDs() (ids []int64) {
	if id := m.act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAct resets all changes to the "act" edge.
func (m *S3ActImageMutation) ResetAct() {
	m.act = nil
	m.clearedact = false
}

// SetS3ImageID sets the "s3_image" edge to the S3Image entity by id.
func (m *S3ActImageMutation) SetS3ImageID(id int64) {
	m.s3_image = &id
}

// ClearS3Image clears the "s3_image" edge to the S3Image entity.
func (m *S3ActImageMutation) ClearS3Image() {
	m.cleareds3_image = true
}

// S3ImageCleared reports if the "s3_image" edge to the S3Image entity was cleared.
func (m *S3ActImageMutation) S3ImageCleared() bool {
	return m.cleareds3_image
}

// S3ImageID returns the "s3_image" edge ID in the mutation.
func (m *S3ActImageMutation) S3ImageID() (id int64, exists bool) {
	if m.s3_image != nil {
		return *m.s3_image, true
	}
	return
}

// S3ImageIDs returns the "s3_image" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// S3ImageID instead. It exists only for internal usage by the builders.
func (m *S3ActImageMutation) S3ImageIDs() (ids []int64) {
	if id := m.s3_image; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetS3Image resets all changes to the "s3_image" edge.
func (m *S3ActImageMutation) ResetS3Image() {
	m.s3_image = nil
	m.cleareds3_image = false
}

// Where appends a list predicates to the S3ActImageMutation builder.
func (m *S3ActImageMutation) Where(ps ...predicate.S3ActImage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3ActImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3ActImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3ActImage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3ActImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3ActImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3ActImage).
func (m *S3ActImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3ActImageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._order != nil {
		fields = append(fields, s3actimage.FieldOrder)
	}
	if m.act != nil {
		fields = append(fields, s3actimage.FieldActID)
	}
	if m.s3_image != nil {
		fields = append(fields, s3actimage.FieldImageID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3ActImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3actimage.FieldOrder:
		return m.Order()
	case s3actimage.FieldActID:
		return m.ActID()
	case s3actimage.FieldImageID:
		return m.ImageID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3ActImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3actimage.FieldOrder:
		return m.OldOrder(ctx)
	case s3actimage.FieldActID:
		return m.OldActID(ctx)
	case s3actimage.FieldImageID:
		return m.OldImageID(ctx)
	}
	return nil, fmt.Errorf("unknown S3ActImage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3ActImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3actimage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case s3actimage.FieldActID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActID(v)
		return nil
	case s3actimage.FieldImageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageID(v)
		return nil
	}
	return fmt.Errorf("unknown S3ActImage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3ActImageMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, s3actimage.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3ActImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case s3actimage.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3ActImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case s3actimage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown S3ActImage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3ActImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3ActImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3ActImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3ActImage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3ActImageMutation) ResetField(name string) error {
	switch name {
	case s3actimage.FieldOrder:
		m.ResetOrder()
		return nil
	case s3actimage.FieldActID:
		m.ResetActID()
		return nil
	case s3actimage.FieldImageID:
		m.ResetImageID()
		return nil
	}
	return fmt.Errorf("unknown S3ActImage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3ActImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.act != nil {
		edges = append(edges, s3actimage.EdgeAct)
	}
	if m.s3_image != nil {
		edges = append(edges, s3actimage.EdgeS3Image)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3ActImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case s3actimage.EdgeAct:
		if id := m.act; id != nil {
			return []ent.Value{*id}
		}
	case s3actimage.EdgeS3Image:
		if id := m.s3_image; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3ActImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3ActImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3ActImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedact {
		edges = append(edges, s3actimage.EdgeAct)
	}
	if m.cleareds3_image {
		edges = append(edges, s3actimage.EdgeS3Image)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3ActImageMutation) EdgeCleared(name string) bool {
	switch name {
	case s3actimage.EdgeAct:
		return m.clearedact
	case s3actimage.EdgeS3Image:
		return m.cleareds3_image
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3ActImageMutation) ClearEdge(name string) error {
	switch name {
	case s3actimage.EdgeAct:
		m.ClearAct()
		return nil
	case s3actimage.EdgeS3Image:
		m.ClearS3Image()
		return nil
	}
	return fmt.Errorf("unknown S3ActImage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3ActImageMutation) ResetEdge(name string) error {
	switch name {
	case s3actimage.EdgeAct:
		m.ResetAct()
		return nil
	case s3actimage.EdgeS3Image:
		m.ResetS3Image()
		return nil
	}
	return fmt.Errorf("unknown S3ActImage edge %s", name)
}

// S3ImageMutation represents an operation that mutates the S3Image nodes in the graph.
type S3ImageMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int64
	key                  *string
	src                  *string
	created_at           *time.Time
	clearedFields        map[string]struct{}
	s3_act_images        map[int64]struct{}
	removeds3_act_images map[int64]struct{}
	cleareds3_act_images bool
	done                 bool
	oldValue             func(context.Context) (*S3Image, error)
	predicates           []predicate.S3Image
}

var _ ent.Mutation = (*S3ImageMutation)(nil)

// s3imageOption allows management of the mutation configuration using functional options.
type s3imageOption func(*S3ImageMutation)

// newS3ImageMutation creates new mutation for the S3Image entity.
func newS3ImageMutation(c config, op Op, opts ...s3imageOption) *S3ImageMutation {
	m := &S3ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeS3Image,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3ImageID sets the ID field of the mutation.
func withS3ImageID(id int64) s3imageOption {
	return func(m *S3ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *S3Image
		)
		m.oldValue = func(ctx context.Context) (*S3Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3Image sets the old S3Image of the mutation.
func withS3Image(node *S3Image) s3imageOption {
	return func(m *S3ImageMutation) {
		m.oldValue = func(context.Context) (*S3Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3Image entities.
func (m *S3ImageMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3ImageMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3ImageMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *S3ImageMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *S3ImageMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the S3Image entity.
// If the S3Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ImageMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *S3ImageMutation) ResetKey() {
	m.key = nil
}

// SetSrc sets the "src" field.
func (m *S3ImageMutation) SetSrc(s string) {
	m.src = &s
}

// Src returns the value of the "src" field in the mutation.
func (m *S3ImageMutation) Src() (r string, exists bool) {
	v := m.src
	if v == nil {
		return
	}
	return *v, true
}

// OldSrc returns the old "src" field's value of the S3Image entity.
// If the S3Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ImageMutation) OldSrc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSrc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSrc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSrc: %w", err)
	}
	return oldValue.Src, nil
}

// ResetSrc resets all changes to the "src" field.
func (m *S3ImageMutation) ResetSrc() {
	m.src = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *S3ImageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *S3ImageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the S3Image entity.
// If the S3Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ImageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *S3ImageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by ids.
func (m *S3ImageMutation) AddS3ActImageIDs(ids ...int64) {
	if m.s3_act_images == nil {
		m.s3_act_images = make(map[int64]struct{})
	}
	for i := range ids {
		m.s3_act_images[ids[i]] = struct{}{}
	}
}

// ClearS3ActImages clears the "s3_act_images" edge to the S3ActImage entity.
func (m *S3ImageMutation) ClearS3ActImages() {
	m.cleareds3_act_images = true
}

// S3ActImagesCleared reports if the "s3_act_images" edge to the S3ActImage entity was cleared.
func (m *S3ImageMutation) S3ActImagesCleared() bool {
	return m.cleareds3_act_images
}

// RemoveS3ActImageIDs removes the "s3_act_images" edge to the S3ActImage entity by IDs.
func (m *S3ImageMutation) RemoveS3ActImageIDs(ids ...int64) {
	if m.removeds3_act_images == nil {
		m.removeds3_act_images = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.s3_act_images, ids[i])
		m.removeds3_act_images[ids[i]] = struct{}{}
	}
}

// RemovedS3ActImages returns the removed IDs of the "s3_act_images" edge to the S3ActImage entity.
func (m *S3ImageMutation) RemovedS3ActImagesIDs() (ids []int64) {
	for id := range m.removeds3_act_images {
		ids = append(ids, id)
	}
	return
}

// S3ActImagesIDs returns the "s3_act_images" edge IDs in the mutation.
func (m *S3ImageMutation) S3ActImagesIDs() (ids []int64) {
	for id := range m.s3_act_images {
		ids = append(ids, id)
	}
	return
}

// ResetS3ActImages resets all changes to the "s3_act_images" edge.
func (m *S3ImageMutation) ResetS3ActImages() {
	m.s3_act_images = nil
	m.cleareds3_act_images = false
	m.removeds3_act_images = nil
}

// Where appends a list predicates to the S3ImageMutation builder.
func (m *S3ImageMutation) Where(ps ...predicate.S3Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3Image).
func (m *S3ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3ImageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.key != nil {
		fields = append(fields, s3image.FieldKey)
	}
	if m.src != nil {
		fields = append(fields, s3image.FieldSrc)
	}
	if m.created_at != nil {
		fields = append(fields, s3image.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3image.FieldKey:
		return m.Key()
	case s3image.FieldSrc:
		return m.Src()
	case s3image.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3image.FieldKey:
		return m.OldKey(ctx)
	case s3image.FieldSrc:
		return m.OldSrc(ctx)
	case s3image.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown S3Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3image.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case s3image.FieldSrc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSrc(v)
		return nil
	case s3image.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown S3Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3ImageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3ImageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown S3Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3ImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3ImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3ImageMutation) ResetField(name string) error {
	switch name {
	case s3image.FieldKey:
		m.ResetKey()
		return nil
	case s3image.FieldSrc:
		m.ResetSrc()
		return nil
	case s3image.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown S3Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.s3_act_images != nil {
		edges = append(edges, s3image.EdgeS3ActImages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case s3image.EdgeS3ActImages:
		ids := make([]ent.Value, 0, len(m.s3_act_images))
		for id := range m.s3_act_images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeds3_act_images != nil {
		edges = append(edges, s3image.EdgeS3ActImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3ImageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case s3image.EdgeS3ActImages:
		ids := make([]ent.Value, 0, len(m.removeds3_act_images))
		for id := range m.removeds3_act_images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareds3_act_images {
		edges = append(edges, s3image.EdgeS3ActImages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case s3image.EdgeS3ActImages:
		return m.cleareds3_act_images
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3ImageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown S3Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3ImageMutation) ResetEdge(name string) error {
	switch name {
	case s3image.EdgeS3ActImages:
		m.ResetS3ActImages()
		return nil
	}
	return fmt.Errorf("unknown S3Image edge %s", name)
}

// S3ProgramImageMutation represents an operation that mutates the S3ProgramImage nodes in the graph.
type S3ProgramImageMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int64
	_order                 *int
	add_order              *int
	clearedFields          map[string]struct{}
	program_release        *int64
	clearedprogram_release bool
	s3_image               *int64
	cleareds3_image        bool
	done                   bool
	oldValue               func(context.Context) (*S3ProgramImage, error)
	predicates             []predicate.S3ProgramImage
}

var _ ent.Mutation = (*S3ProgramImageMutation)(nil)

// s3programimageOption allows management of the mutation configuration using functional options.
type s3programimageOption func(*S3ProgramImageMutation)

// newS3ProgramImageMutation creates new mutation for the S3ProgramImage entity.
func newS3ProgramImageMutation(c config, op Op, opts ...s3programimageOption) *S3ProgramImageMutation {
	m := &S3ProgramImageMutation{
		config:        c,
		op:            op,
		typ:           TypeS3ProgramImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3ProgramImageID sets the ID field of the mutation.
func withS3ProgramImageID(id int64) s3programimageOption {
	return func(m *S3ProgramImageMutation) {
		var (
			err   error
			once  sync.Once
			value *S3ProgramImage
		)
		m.oldValue = func(ctx context.Context) (*S3ProgramImage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3ProgramImage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3ProgramImage sets the old S3ProgramImage of the mutation.
func withS3ProgramImage(node *S3ProgramImage) s3programimageOption {
	return func(m *S3ProgramImageMutation) {
		m.oldValue = func(context.Context) (*S3ProgramImage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3ProgramImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3ProgramImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3ProgramImage entities.
func (m *S3ProgramImageMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3ProgramImageMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3ProgramImageMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3ProgramImage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrder sets the "order" field.
func (m *S3ProgramImageMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *S3ProgramImageMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the S3ProgramImage entity.
// If the S3ProgramImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ProgramImageMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *S3ProgramImageMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *S3ProgramImageMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *S3ProgramImageMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetProgramReleaseID sets the "program_release_id" field.
func (m *S3ProgramImageMutation) SetProgramReleaseID(i int64) {
	m.program_release = &i
}

// ProgramReleaseID returns the value of the "program_release_id" field in the mutation.
func (m *S3ProgramImageMutation) ProgramReleaseID() (r int64, exists bool) {
	v := m.program_release
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramReleaseID returns the old "program_release_id" field's value of the S3ProgramImage entity.
// If the S3ProgramImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ProgramImageMutation) OldProgramReleaseID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramReleaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramReleaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramReleaseID: %w", err)
	}
	return oldValue.ProgramReleaseID, nil
}

// ResetProgramReleaseID resets all changes to the "program_release_id" field.
func (m *S3ProgramImageMutation) ResetProgramReleaseID() {
	m.program_release = nil
}

// SetImageID sets the "image_id" field.
func (m *S3ProgramImageMutation) SetImageID(i int64) {
	m.s3_image = &i
}

// ImageID returns the value of the "image_id" field in the mutation.
func (m *S3ProgramImageMutation) ImageID() (r int64, exists bool) {
	v := m.s3_image
	if v == nil {
		return
	}
	return *v, true
}

// OldImageID returns the old "image_id" field's value of the S3ProgramImage entity.
// If the S3ProgramImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3ProgramImageMutation) OldImageID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageID: %w", err)
	}
	return oldValue.ImageID, nil
}

// ResetImageID resets all changes to the "image_id" field.
func (m *S3ProgramImageMutation) ResetImageID() {
	m.s3_image = nil
}

// ClearProgramRelease clears the "program_release" edge to the ProgramRelease entity.
func (m *S3ProgramImageMutation) ClearProgramRelease() {
	m.clearedprogram_release = true
}

// ProgramReleaseCleared reports if the "program_release" edge to the ProgramRelease entity was cleared.
func (m *S3ProgramImageMutation) ProgramReleaseCleared() bool {
	return m.clearedprogram_release
}

// ProgramReleaseIDs returns the "program_release" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramReleaseID instead. It exists only for internal usage by the builders.
func (m *S3ProgramImageMutation) ProgramReleaseIDs() (ids []int64) {
	if id := m.program_release; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgramRelease resets all changes to the "program_release" edge.
func (m *S3ProgramImageMutation) ResetProgramRelease() {
	m.program_release = nil
	m.clearedprogram_release = false
}

// SetS3ImageID sets the "s3_image" edge to the S3Image entity by id.
func (m *S3ProgramImageMutation) SetS3ImageID(id int64) {
	m.s3_image = &id
}

// ClearS3Image clears the "s3_image" edge to the S3Image entity.
func (m *S3ProgramImageMutation) ClearS3Image() {
	m.cleareds3_image = true
}

// S3ImageCleared reports if the "s3_image" edge to the S3Image entity was cleared.
func (m *S3ProgramImageMutation) S3ImageCleared() bool {
	return m.cleareds3_image
}

// S3ImageID returns the "s3_image" edge ID in the mutation.
func (m *S3ProgramImageMutation) S3ImageID() (id int64, exists bool) {
	if m.s3_image != nil {
		return *m.s3_image, true
	}
	return
}

// S3ImageIDs returns the "s3_image" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// S3ImageID instead. It exists only for internal usage by the builders.
func (m *S3ProgramImageMutation) S3ImageIDs() (ids []int64) {
	if id := m.s3_image; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetS3Image resets all changes to the "s3_image" edge.
func (m *S3ProgramImageMutation) ResetS3Image() {
	m.s3_image = nil
	m.cleareds3_image = false
}

// Where appends a list predicates to the S3ProgramImageMutation builder.
func (m *S3ProgramImageMutation) Where(ps ...predicate.S3ProgramImage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3ProgramImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3ProgramImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3ProgramImage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3ProgramImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3ProgramImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3ProgramImage).
func (m *S3ProgramImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3ProgramImageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._order != nil {
		fields = append(fields, s3programimage.FieldOrder)
	}
	if m.program_release != nil {
		fields = append(fields, s3programimage.FieldProgramReleaseID)
	}
	if m.s3_image != nil {
		fields = append(fields, s3programimage.FieldImageID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3ProgramImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3programimage.FieldOrder:
		return m.Order()
	case s3programimage.FieldProgramReleaseID:
		return m.ProgramReleaseID()
	case s3programimage.FieldImageID:
		return m.ImageID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3ProgramImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3programimage.FieldOrder:
		return m.OldOrder(ctx)
	case s3programimage.FieldProgramReleaseID:
		return m.OldProgramReleaseID(ctx)
	case s3programimage.FieldImageID:
		return m.OldImageID(ctx)
	}
	return nil, fmt.Errorf("unknown S3ProgramImage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3ProgramImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3programimage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case s3programimage.FieldProgramReleaseID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramReleaseID(v)
		return nil
	case s3programimage.FieldImageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageID(v)
		return nil
	}
	return fmt.Errorf("unknown S3ProgramImage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3ProgramImageMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, s3programimage.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3ProgramImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case s3programimage.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3ProgramImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case s3programimage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown S3ProgramImage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3ProgramImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3ProgramImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3ProgramImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3ProgramImage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3ProgramImageMutation) ResetField(name string) error {
	switch name {
	case s3programimage.FieldOrder:
		m.ResetOrder()
		return nil
	case s3programimage.FieldProgramReleaseID:
		m.ResetProgramReleaseID()
		return nil
	case s3programimage.FieldImageID:
		m.ResetImageID()
		return nil
	}
	return fmt.Errorf("unknown S3ProgramImage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3ProgramImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.program_release != nil {
		edges = append(edges, s3programimage.EdgeProgramRelease)
	}
	if m.s3_image != nil {
		edges = append(edges, s3programimage.EdgeS3Image)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3ProgramImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case s3programimage.EdgeProgramRelease:
		if id := m.program_release; id != nil {
			return []ent.Value{*id}
		}
	case s3programimage.EdgeS3Image:
		if id := m.s3_image; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3ProgramImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3ProgramImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3ProgramImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprogram_release {
		edges = append(edges, s3programimage.EdgeProgramRelease)
	}
	if m.cleareds3_image {
		edges = append(edges, s3programimage.EdgeS3Image)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3ProgramImageMutation) EdgeCleared(name string) bool {
	switch name {
	case s3programimage.EdgeProgramRelease:
		return m.clearedprogram_release
	case s3programimage.EdgeS3Image:
		return m.cleareds3_image
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3ProgramImageMutation) ClearEdge(name string) error {
	switch name {
	case s3programimage.EdgeProgramRelease:
		m.ClearProgramRelease()
		return nil
	case s3programimage.EdgeS3Image:
		m.ClearS3Image()
		return nil
	}
	return fmt.Errorf("unknown S3ProgramImage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3ProgramImageMutation) ResetEdge(name string) error {
	switch name {
	case s3programimage.EdgeProgramRelease:
		m.ResetProgramRelease()
		return nil
	case s3programimage.EdgeS3Image:
		m.ResetS3Image()
		return nil
	}
	return fmt.Errorf("unknown S3ProgramImage edge %s", name)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/actimage"
	"routine/internal/ent/actversion"
	"routine/internal/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAct        = "Act"
	TypeActImage   = "ActImage"
	TypeActVersion = "ActVersion"
)

// ActMutation represents an operation that mutates the Act nodes in the graph.
type ActMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	code                *string
	act_type            *act.ActType
	name                *string
	author              *uint64
	addauthor           *int64
	created_at          *time.Time
	clearedFields       map[string]struct{}
	act_versions        map[uint64]struct{}
	removedact_versions map[uint64]struct{}
	clearedact_versions bool
	done                bool
	oldValue            func(context.Context) (*Act, error)
	predicates          []predicate.Act
}

var _ ent.Mutation = (*ActMutation)(nil)

// actOption allows management of the mutation configuration using functional options.
type actOption func(*ActMutation)

// newActMutation creates new mutation for the Act entity.
func newActMutation(c config, op Op, opts ...actOption) *ActMutation {
	m := &ActMutation{
		config:        c,
		op:            op,
		typ:           TypeAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActID sets the ID field of the mutation.
func withActID(id uint64) actOption {
	return func(m *ActMutation) {
		var (
			err   error
			once  sync.Once
			value *Act
		)
		m.oldValue = func(ctx context.Context) (*Act, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Act.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAct sets the old Act of the mutation.
func withAct(node *Act) actOption {
	return func(m *ActMutation) {
		m.oldValue = func(context.Context) (*Act, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Act entities.
func (m *ActMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Act.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActMutation) ResetCode() {
	m.code = nil
}

// SetActType sets the "act_type" field.
func (m *ActMutation) SetActType(at act.ActType) {
	m.act_type = &at
}

// ActType returns the value of the "act_type" field in the mutation.
func (m *ActMutation) ActType() (r act.ActType, exists bool) {
	v := m.act_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActType returns the old "act_type" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldActType(ctx context.Context) (v act.ActType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActType: %w", err)
	}
	return oldValue.ActType, nil
}

// ResetActType resets all changes to the "act_type" field.
func (m *ActMutation) ResetActType() {
	m.act_type = nil
}

// SetName sets the "name" field.
func (m *ActMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActMutation) ResetName() {
	m.name = nil
}

// SetAuthor sets the "author" field.
func (m *ActMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ActMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *ActMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ActMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ActMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ActMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by ids.
func (m *ActMutation) AddActVersionIDs(ids ...uint64) {
	if m.act_versions == nil {
		m.act_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.act_versions[ids[i]] = struct{}{}
	}
}

// ClearActVersions clears the "act_versions" edge to the ActVersion entity.
func (m *ActMutation) ClearActVersions() {
	m.clearedact_versions = true
}

// ActVersionsCleared reports if the "act_versions" edge to the ActVersion entity was cleared.
func (m *ActMutation) ActVersionsCleared() bool {
	return m.clearedact_versions
}

// RemoveActVersionIDs removes the "act_versions" edge to the ActVersion entity by IDs.
func (m *ActMutation) RemoveActVersionIDs(ids ...uint64) {
	if m.removedact_versions == nil {
		m.removedact_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.act_versions, ids[i])
		m.removedact_versions[ids[i]] = struct{}{}
	}
}

// RemovedActVersions returns the removed IDs of the "act_versions" edge to the ActVersion entity.
func (m *ActMutation) RemovedActVersionsIDs() (ids []uint64) {
	for id := range m.removedact_versions {
		ids = append(ids, id)
	}
	return
}

// ActVersionsIDs returns the "act_versions" edge IDs in the mutation.
func (m *ActMutation) ActVersionsIDs() (ids []uint64) {
	for id := range m.act_versions {
		ids = append(ids, id)
	}
	return
}

// ResetActVersions resets all changes to the "act_versions" edge.
func (m *ActMutation) ResetActVersions() {
	m.act_versions = nil
	m.clearedact_versions = false
	m.removedact_versions = nil
}

// Where appends a list predicates to the ActMutation builder.
func (m *ActMutation) Where(ps ...predicate.Act) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Act, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Act).
func (m *ActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, act.FieldCode)
	}
	if m.act_type != nil {
		fields = append(fields, act.FieldActType)
	}
	if m.name != nil {
		fields = append(fields, act.FieldName)
	}
	if m.author != nil {
		fields = append(fields, act.FieldAuthor)
	}
	if m.created_at != nil {
		fields = append(fields, act.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case act.FieldCode:
		return m.Code()
	case act.FieldActType:
		return m.ActType()
	case act.FieldName:
		return m.Name()
	case act.FieldAuthor:
		return m.Author()
	case act.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case act.FieldCode:
		return m.OldCode(ctx)
	case act.FieldActType:
		return m.OldActType(ctx)
	case act.FieldName:
		return m.OldName(ctx)
	case act.FieldAuthor:
		return m.OldAuthor(ctx)
	case act.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Act field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case act.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case act.FieldActType:
		v, ok := value.(act.ActType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActType(v)
		return nil
	case act.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case act.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case act.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, act.FieldAuthor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case act.FieldAuthor:
		return m.AddedAuthor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case act.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	}
	return fmt.Errorf("unknown Act numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Act nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActMutation) ResetField(name string) error {
	switch name {
	case act.FieldCode:
		m.ResetCode()
		return nil
	case act.FieldActType:
		m.ResetActType()
		return nil
	case act.FieldName:
		m.ResetName()
		return nil
	case act.FieldAuthor:
		m.ResetAuthor()
		return nil
	case act.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.act_versions != nil {
		edges = append(edges, act.EdgeActVersions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeActVersions:
		ids := make([]ent.Value, 0, len(m.act_versions))
		for id := range m.act_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedact_versions != nil {
		edges = append(edges, act.EdgeActVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeActVersions:
		ids := make([]ent.Value, 0, len(m.removedact_versions))
		for id := range m.removedact_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedact_versions {
		edges = append(edges, act.EdgeActVersions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActMutation) EdgeCleared(name string) bool {
	switch name {
	case act.EdgeActVersions:
		return m.clearedact_versions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Act unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActMutation) ResetEdge(name string) error {
	switch name {
	case act.EdgeActVersions:
		m.ResetActVersions()
		return nil
	}
	return fmt.Errorf("unknown Act edge %s", name)
}

// ActImageMutation represents an operation that mutates the ActImage nodes in the graph.
type ActImageMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	_order             *uint
	add_order          *int
	src                *string
	clearedFields      map[string]struct{}
	act_version        *uint64
	clearedact_version bool
	done               bool
	oldValue           func(context.Context) (*ActImage, error)
	predicates         []predicate.ActImage
}

var _ ent.Mutation = (*ActImageMutation)(nil)

// actimageOption allows management of the mutation configuration using functional options.
type actimageOption func(*ActImageMutation)

// newActImageMutation creates new mutation for the ActImage entity.
func newActImageMutation(c config, op Op, opts ...actimageOption) *ActImageMutation {
	m := &ActImageMutation{
		config:        c,
		op:            op,
		typ:           TypeActImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActImageID sets the ID field of the mutation.
func withActImageID(id uint64) actimageOption {
	return func(m *ActImageMutation) {
		var (
			err   error
			once  sync.Once
			value *ActImage
		)
		m.oldValue = func(ctx context.Context) (*ActImage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActImage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActImage sets the old ActImage of the mutation.
func withActImage(node *ActImage) actimageOption {
	return func(m *ActImageMutation) {
		m.oldValue = func(context.Context) (*ActImage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ActImage entities.
func (m *ActImageMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActImageMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActImageMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ActImage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrder sets the "order" field.
func (m *ActImageMutation) SetOrder(u uint) {
	m._order = &u
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *ActImageMutation) Order() (r uint, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the ActImage entity.
// If the ActImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActImageMutation) OldOrder(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds u to the "order" field.
func (m *ActImageMutation) AddOrder(u int) {
	if m.add_order != nil {
		*m.add_order += u
	} else {
		m.add_order = &u
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *ActImageMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *ActImageMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetSrc sets the "src" field.
func (m *ActImageMutation) SetSrc(s string) {
	m.src = &s
}

// Src returns the value of the "src" field in the mutation.
func (m *ActImageMutation) Src() (r string, exists bool) {
	v := m.src
	if v == nil {
		return
	}
	return *v, true
}

// OldSrc returns the old "src" field's value of the ActImage entity.
// If the ActImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActImageMutation) OldSrc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSrc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSrc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSrc: %w", err)
	}
	return oldValue.Src, nil
}

// ResetSrc resets all changes to the "src" field.
func (m *ActImageMutation) ResetSrc() {
	m.src = nil
}

// SetActVersionID sets the "act_version" edge to the ActVersion entity by id.
func (m *ActImageMutation) SetActVersionID(id uint64) {
	m.act_version = &id
}

// ClearActVersion clears the "act_version" edge to the ActVersion entity.
func (m *ActImageMutation) ClearActVersion() {
	m.clearedact_version = true
}

// ActVersionCleared reports if the "act_version" edge to the ActVersion entity was cleared.
func (m *ActImageMutation) ActVersionCleared() bool {
	return m.clearedact_version
}

// ActVersionID returns the "act_version" edge ID in the mutation.
func (m *ActImageMutation) ActVersionID() (id uint64, exists bool) {
	if m.act_version != nil {
		return *m.act_version, true
	}
	return
}

// ActVersionIDs returns the "act_version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActVersionID instead. It exists only for internal usage by the builders.
func (m *ActImageMutation) ActVersionIDs() (ids []uint64) {
	if id := m.act_version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActVersion resets all changes to the "act_version" edge.
func (m *ActImageMutation) ResetActVersion() {
	m.act_version = nil
	m.clearedact_version = false
}

// Where appends a list predicates to the ActImageMutation builder.
func (m *ActImageMutation) Where(ps ...predicate.ActImage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ActImage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ActImage).
func (m *ActImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActImageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._order != nil {
		fields = append(fields, actimage.FieldOrder)
	}
	if m.src != nil {
		fields = append(fields, actimage.FieldSrc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actimage.FieldOrder:
		return m.Order()
	case actimage.FieldSrc:
		return m.Src()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actimage.FieldOrder:
		return m.OldOrder(ctx)
	case actimage.FieldSrc:
		return m.OldSrc(ctx)
	}
	return nil, fmt.Errorf("unknown ActImage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actimage.FieldOrder:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case actimage.FieldSrc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSrc(v)
		return nil
	}
	return fmt.Errorf("unknown ActImage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActImageMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, actimage.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case actimage.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case actimage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown ActImage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActImage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActImageMutation) ResetField(name string) error {
	switch name {
	case actimage.FieldOrder:
		m.ResetOrder()
		return nil
	case actimage.FieldSrc:
		m.ResetSrc()
		return nil
	}
	return fmt.Errorf("unknown ActImage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.act_version != nil {
		edges = append(edges, actimage.EdgeActVersion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case actimage.EdgeActVersion:
		if id := m.act_version; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedact_version {
		edges = append(edges, actimage.EdgeActVersion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActImageMutation) EdgeCleared(name string) bool {
	switch name {
	case actimage.EdgeActVersion:
		return m.clearedact_version
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActImageMutation) ClearEdge(name string) error {
	switch name {
	case actimage.EdgeActVersion:
		m.ClearActVersion()
		return nil
	}
	return fmt.Errorf("unknown ActImage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActImageMutation) ResetEdge(name string) error {
	switch name {
	case actimage.EdgeActVersion:
		m.ResetActVersion()
		return nil
	}
	return fmt.Errorf("unknown ActImage edge %s", name)
}

// ActVersionMutation represents an operation that mutates the ActVersion nodes in the graph.
type ActVersionMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	code              *string
	act_code          *string
	version           *uint
	addversion        *int
	clearedFields     map[string]struct{}
	act_images        map[uint64]struct{}
	removedact_images map[uint64]struct{}
	clearedact_images bool
	act               *uint64
	clearedact        bool
	done              bool
	oldValue          func(context.Context) (*ActVersion, error)
	predicates        []predicate.ActVersion
}

var _ ent.Mutation = (*ActVersionMutation)(nil)

// actversionOption allows management of the mutation configuration using functional options.
type actversionOption func(*ActVersionMutation)

// newActVersionMutation creates new mutation for the ActVersion entity.
func newActVersionMutation(c config, op Op, opts ...actversionOption) *ActVersionMutation {
	m := &ActVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeActVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActVersionID sets the ID field of the mutation.
func withActVersionID(id uint64) actversionOption {
	return func(m *ActVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *ActVersion
		)
		m.oldValue = func(ctx context.Context) (*ActVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActVersion sets the old ActVersion of the mutation.
func withActVersion(node *ActVersion) actversionOption {
	return func(m *ActVersionMutation) {
		m.oldValue = func(context.Context) (*ActVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ActVersion entities.
func (m *ActVersionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActVersionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActVersionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ActVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActVersionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActVersionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActVersionMutation) ResetCode() {
	m.code = nil
}

// SetActCode sets the "act_code" field.
func (m *ActVersionMutation) SetActCode(s string) {
	m.act_code = &s
}

// ActCode returns the value of the "act_code" field in the mutation.
func (m *ActVersionMutation) ActCode() (r string, exists bool) {
	v := m.act_code
	if v == nil {
		return
	}
	return *v, true
}

// OldActCode returns the old "act_code" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldActCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActCode: %w", err)
	}
	return oldValue.ActCode, nil
}

// ResetActCode resets all changes to the "act_code" field.
func (m *ActVersionMutation) ResetActCode() {
	m.act_code = nil
}

// SetVersion sets the "version" field.
func (m *ActVersionMutation) SetVersion(u uint) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ActVersionMutation) Version() (r uint, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldVersion(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *ActVersionMutation) AddVersion(u int) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ActVersionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *ActVersionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// AddActImageIDs adds the "act_images" edge to the ActImage entity by ids.
func (m *ActVersionMutation) AddActImageIDs(ids ...uint64) {
	if m.act_images == nil {
		m.act_images = make(map[uint64]struct{})
	}
	for i := range ids {
		m.act_images[ids[i]] = struct{}{}
	}
}

// ClearActImages clears the "act_images" edge to the ActImage entity.
func (m *ActVersionMutation) ClearActImages() {
	m.clearedact_images = true
}

// ActImagesCleared reports if the "act_images" edge to the ActImage entity was cleared.
func (m *ActVersionMutation) ActImagesCleared() bool {
	return m.clearedact_images
}

// RemoveActImageIDs removes the "act_images" edge to the ActImage entity by IDs.
func (m *ActVersionMutation) RemoveActImageIDs(ids ...uint64) {
	if m.removedact_images == nil {
		m.removedact_images = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.act_images, ids[i])
		m.removedact_images[ids[i]] = struct{}{}
	}
}

// RemovedActImages returns the removed IDs of the "act_images" edge to the ActImage entity.
func (m *ActVersionMutation) RemovedActImagesIDs() (ids []uint64) {
	for id := range m.removedact_images {
		ids = append(ids, id)
	}
	return
}

// ActImagesIDs returns the "act_images" edge IDs in the mutation.
func (m *ActVersionMutation) ActImagesIDs() (ids []uint64) {
	for id := range m.act_images {
		ids = append(ids, id)
	}
	return
}

// ResetActImages resets all changes to the "act_images" edge.
func (m *ActVersionMutation) ResetActImages() {
	m.act_images = nil
	m.clearedact_images = false
	m.removedact_images = nil
}

// SetActID sets the "act" edge to the Act entity by id.
func (m *ActVersionMutation) SetActID(id uint64) {
	m.act = &id
}

// ClearAct clears the "act" edge to the Act entity.
func (m *ActVersionMutation) ClearAct() {
	m.clearedact = true
}

// ActCleared reports if the "act" edge to the Act entity was cleared.
func (m *ActVersionMutation) ActCleared() bool {
	return m.clearedact
}

// ActID returns the "act" edge ID in the mutation.
func (m *ActVersionMutation) ActID() (id uint64, exists bool) {
	if m.act != nil {
		return *m.act, true
	}
	return
}

// ActIDs returns the "act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActID instead. It exists only for internal usage by the builders.
func (m *ActVersionMutation) ActIDs() (ids []uint64) {
	if id := m.act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAct resets all changes to the "act" edge.
func (m *ActVersionMutation) ResetAct() {
	m.act = nil
	m.clearedact = false
}

// Where appends a list predicates to the ActVersionMutation builder.
func (m *ActVersionMutation) Where(ps ...predicate.ActVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ActVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ActVersion).
func (m *ActVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActVersionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.code != nil {
		fields = append(fields, actversion.FieldCode)
	}
	if m.act_code != nil {
		fields = append(fields, actversion.FieldActCode)
	}
	if m.version != nil {
		fields = append(fields, actversion.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actversion.FieldCode:
		return m.Code()
	case actversion.FieldActCode:
		return m.ActCode()
	case actversion.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actversion.FieldCode:
		return m.OldCode(ctx)
	case actversion.FieldActCode:
		return m.OldActCode(ctx)
	case actversion.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown ActVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actversion.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case actversion.FieldActCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActCode(v)
		return nil
	case actversion.FieldVersion:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown ActVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActVersionMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, actversion.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case actversion.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case actversion.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown ActVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActVersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActVersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActVersionMutation) ResetField(name string) error {
	switch name {
	case actversion.FieldCode:
		m.ResetCode()
		return nil
	case actversion.FieldActCode:
		m.ResetActCode()
		return nil
	case actversion.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown ActVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.act_images != nil {
		edges = append(edges, actversion.EdgeActImages)
	}
	if m.act != nil {
		edges = append(edges, actversion.EdgeAct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case actversion.EdgeActImages:
		ids := make([]ent.Value, 0, len(m.act_images))
		for id := range m.act_images {
			ids = append(ids, id)
		}
		return ids
	case actversion.EdgeAct:
		if id := m.act; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedact_images != nil {
		edges = append(edges, actversion.EdgeActImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case actversion.EdgeActImages:
		ids := make([]ent.Value, 0, len(m.removedact_images))
		for id := range m.removedact_images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedact_images {
		edges = append(edges, actversion.EdgeActImages)
	}
	if m.clearedact {
		edges = append(edges, actversion.EdgeAct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case actversion.EdgeActImages:
		return m.clearedact_images
	case actversion.EdgeAct:
		return m.clearedact
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActVersionMutation) ClearEdge(name string) error {
	switch name {
	case actversion.EdgeAct:
		m.ClearAct()
		return nil
	}
	return fmt.Errorf("unknown ActVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActVersionMutation) ResetEdge(name string) error {
	switch name {
	case actversion.EdgeActImages:
		m.ResetActImages()
		return nil
	case actversion.EdgeAct:
		m.ResetAct()
		return nil
	}
	return fmt.Errorf("unknown ActVersion edge %s", name)
}

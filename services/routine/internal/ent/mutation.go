// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/actversion"
	"routine/internal/ent/dailyroutine"
	"routine/internal/ent/image"
	"routine/internal/ent/predicate"
	"routine/internal/ent/program"
	"routine/internal/ent/programversion"
	"routine/internal/ent/routineact"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAct            = "Act"
	TypeActVersion     = "ActVersion"
	TypeDailyRoutine   = "DailyRoutine"
	TypeImage          = "Image"
	TypeProgram        = "Program"
	TypeProgramVersion = "ProgramVersion"
	TypeRoutineAct     = "RoutineAct"
)

// ActMutation represents an operation that mutates the Act nodes in the graph.
type ActMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	code                *string
	act_type            *act.ActType
	name                *string
	author              *uint64
	addauthor           *int64
	created_at          *time.Time
	clearedFields       map[string]struct{}
	act_versions        map[uint64]struct{}
	removedact_versions map[uint64]struct{}
	clearedact_versions bool
	done                bool
	oldValue            func(context.Context) (*Act, error)
	predicates          []predicate.Act
}

var _ ent.Mutation = (*ActMutation)(nil)

// actOption allows management of the mutation configuration using functional options.
type actOption func(*ActMutation)

// newActMutation creates new mutation for the Act entity.
func newActMutation(c config, op Op, opts ...actOption) *ActMutation {
	m := &ActMutation{
		config:        c,
		op:            op,
		typ:           TypeAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActID sets the ID field of the mutation.
func withActID(id uint64) actOption {
	return func(m *ActMutation) {
		var (
			err   error
			once  sync.Once
			value *Act
		)
		m.oldValue = func(ctx context.Context) (*Act, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Act.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAct sets the old Act of the mutation.
func withAct(node *Act) actOption {
	return func(m *ActMutation) {
		m.oldValue = func(context.Context) (*Act, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Act entities.
func (m *ActMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Act.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActMutation) ResetCode() {
	m.code = nil
}

// SetActType sets the "act_type" field.
func (m *ActMutation) SetActType(at act.ActType) {
	m.act_type = &at
}

// ActType returns the value of the "act_type" field in the mutation.
func (m *ActMutation) ActType() (r act.ActType, exists bool) {
	v := m.act_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActType returns the old "act_type" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldActType(ctx context.Context) (v act.ActType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActType: %w", err)
	}
	return oldValue.ActType, nil
}

// ResetActType resets all changes to the "act_type" field.
func (m *ActMutation) ResetActType() {
	m.act_type = nil
}

// SetName sets the "name" field.
func (m *ActMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActMutation) ResetName() {
	m.name = nil
}

// SetAuthor sets the "author" field.
func (m *ActMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ActMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *ActMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ActMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ActMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ActMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by ids.
func (m *ActMutation) AddActVersionIDs(ids ...uint64) {
	if m.act_versions == nil {
		m.act_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.act_versions[ids[i]] = struct{}{}
	}
}

// ClearActVersions clears the "act_versions" edge to the ActVersion entity.
func (m *ActMutation) ClearActVersions() {
	m.clearedact_versions = true
}

// ActVersionsCleared reports if the "act_versions" edge to the ActVersion entity was cleared.
func (m *ActMutation) ActVersionsCleared() bool {
	return m.clearedact_versions
}

// RemoveActVersionIDs removes the "act_versions" edge to the ActVersion entity by IDs.
func (m *ActMutation) RemoveActVersionIDs(ids ...uint64) {
	if m.removedact_versions == nil {
		m.removedact_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.act_versions, ids[i])
		m.removedact_versions[ids[i]] = struct{}{}
	}
}

// RemovedActVersions returns the removed IDs of the "act_versions" edge to the ActVersion entity.
func (m *ActMutation) RemovedActVersionsIDs() (ids []uint64) {
	for id := range m.removedact_versions {
		ids = append(ids, id)
	}
	return
}

// ActVersionsIDs returns the "act_versions" edge IDs in the mutation.
func (m *ActMutation) ActVersionsIDs() (ids []uint64) {
	for id := range m.act_versions {
		ids = append(ids, id)
	}
	return
}

// ResetActVersions resets all changes to the "act_versions" edge.
func (m *ActMutation) ResetActVersions() {
	m.act_versions = nil
	m.clearedact_versions = false
	m.removedact_versions = nil
}

// Where appends a list predicates to the ActMutation builder.
func (m *ActMutation) Where(ps ...predicate.Act) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Act, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Act).
func (m *ActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, act.FieldCode)
	}
	if m.act_type != nil {
		fields = append(fields, act.FieldActType)
	}
	if m.name != nil {
		fields = append(fields, act.FieldName)
	}
	if m.author != nil {
		fields = append(fields, act.FieldAuthor)
	}
	if m.created_at != nil {
		fields = append(fields, act.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case act.FieldCode:
		return m.Code()
	case act.FieldActType:
		return m.ActType()
	case act.FieldName:
		return m.Name()
	case act.FieldAuthor:
		return m.Author()
	case act.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case act.FieldCode:
		return m.OldCode(ctx)
	case act.FieldActType:
		return m.OldActType(ctx)
	case act.FieldName:
		return m.OldName(ctx)
	case act.FieldAuthor:
		return m.OldAuthor(ctx)
	case act.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Act field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case act.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case act.FieldActType:
		v, ok := value.(act.ActType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActType(v)
		return nil
	case act.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case act.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case act.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, act.FieldAuthor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case act.FieldAuthor:
		return m.AddedAuthor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case act.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	}
	return fmt.Errorf("unknown Act numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Act nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActMutation) ResetField(name string) error {
	switch name {
	case act.FieldCode:
		m.ResetCode()
		return nil
	case act.FieldActType:
		m.ResetActType()
		return nil
	case act.FieldName:
		m.ResetName()
		return nil
	case act.FieldAuthor:
		m.ResetAuthor()
		return nil
	case act.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.act_versions != nil {
		edges = append(edges, act.EdgeActVersions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeActVersions:
		ids := make([]ent.Value, 0, len(m.act_versions))
		for id := range m.act_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedact_versions != nil {
		edges = append(edges, act.EdgeActVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeActVersions:
		ids := make([]ent.Value, 0, len(m.removedact_versions))
		for id := range m.removedact_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedact_versions {
		edges = append(edges, act.EdgeActVersions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActMutation) EdgeCleared(name string) bool {
	switch name {
	case act.EdgeActVersions:
		return m.clearedact_versions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Act unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActMutation) ResetEdge(name string) error {
	switch name {
	case act.EdgeActVersions:
		m.ResetActVersions()
		return nil
	}
	return fmt.Errorf("unknown Act edge %s", name)
}

// ActVersionMutation represents an operation that mutates the ActVersion nodes in the graph.
type ActVersionMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	code          *string
	act_code      *string
	version       *uint
	addversion    *int
	created_at    *time.Time
	text          *string
	clearedFields map[string]struct{}
	act           *uint64
	clearedact    bool
	images        map[uint64]struct{}
	removedimages map[uint64]struct{}
	clearedimages bool
	done          bool
	oldValue      func(context.Context) (*ActVersion, error)
	predicates    []predicate.ActVersion
}

var _ ent.Mutation = (*ActVersionMutation)(nil)

// actversionOption allows management of the mutation configuration using functional options.
type actversionOption func(*ActVersionMutation)

// newActVersionMutation creates new mutation for the ActVersion entity.
func newActVersionMutation(c config, op Op, opts ...actversionOption) *ActVersionMutation {
	m := &ActVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeActVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActVersionID sets the ID field of the mutation.
func withActVersionID(id uint64) actversionOption {
	return func(m *ActVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *ActVersion
		)
		m.oldValue = func(ctx context.Context) (*ActVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActVersion sets the old ActVersion of the mutation.
func withActVersion(node *ActVersion) actversionOption {
	return func(m *ActVersionMutation) {
		m.oldValue = func(context.Context) (*ActVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ActVersion entities.
func (m *ActVersionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActVersionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActVersionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ActVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActVersionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActVersionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActVersionMutation) ResetCode() {
	m.code = nil
}

// SetActCode sets the "act_code" field.
func (m *ActVersionMutation) SetActCode(s string) {
	m.act_code = &s
}

// ActCode returns the value of the "act_code" field in the mutation.
func (m *ActVersionMutation) ActCode() (r string, exists bool) {
	v := m.act_code
	if v == nil {
		return
	}
	return *v, true
}

// OldActCode returns the old "act_code" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldActCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActCode: %w", err)
	}
	return oldValue.ActCode, nil
}

// ResetActCode resets all changes to the "act_code" field.
func (m *ActVersionMutation) ResetActCode() {
	m.act_code = nil
}

// SetVersion sets the "version" field.
func (m *ActVersionMutation) SetVersion(u uint) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ActVersionMutation) Version() (r uint, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldVersion(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *ActVersionMutation) AddVersion(u int) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ActVersionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *ActVersionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ActVersionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActVersionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActVersionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetText sets the "text" field.
func (m *ActVersionMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ActVersionMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the ActVersion entity.
// If the ActVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActVersionMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ActVersionMutation) ResetText() {
	m.text = nil
}

// SetActID sets the "act" edge to the Act entity by id.
func (m *ActVersionMutation) SetActID(id uint64) {
	m.act = &id
}

// ClearAct clears the "act" edge to the Act entity.
func (m *ActVersionMutation) ClearAct() {
	m.clearedact = true
}

// ActCleared reports if the "act" edge to the Act entity was cleared.
func (m *ActVersionMutation) ActCleared() bool {
	return m.clearedact
}

// ActID returns the "act" edge ID in the mutation.
func (m *ActVersionMutation) ActID() (id uint64, exists bool) {
	if m.act != nil {
		return *m.act, true
	}
	return
}

// ActIDs returns the "act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActID instead. It exists only for internal usage by the builders.
func (m *ActVersionMutation) ActIDs() (ids []uint64) {
	if id := m.act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAct resets all changes to the "act" edge.
func (m *ActVersionMutation) ResetAct() {
	m.act = nil
	m.clearedact = false
}

// AddImageIDs adds the "images" edge to the Image entity by ids.
func (m *ActVersionMutation) AddImageIDs(ids ...uint64) {
	if m.images == nil {
		m.images = make(map[uint64]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Image entity.
func (m *ActVersionMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Image entity was cleared.
func (m *ActVersionMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Image entity by IDs.
func (m *ActVersionMutation) RemoveImageIDs(ids ...uint64) {
	if m.removedimages == nil {
		m.removedimages = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Image entity.
func (m *ActVersionMutation) RemovedImagesIDs() (ids []uint64) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *ActVersionMutation) ImagesIDs() (ids []uint64) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *ActVersionMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// Where appends a list predicates to the ActVersionMutation builder.
func (m *ActVersionMutation) Where(ps ...predicate.ActVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ActVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ActVersion).
func (m *ActVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActVersionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, actversion.FieldCode)
	}
	if m.act_code != nil {
		fields = append(fields, actversion.FieldActCode)
	}
	if m.version != nil {
		fields = append(fields, actversion.FieldVersion)
	}
	if m.created_at != nil {
		fields = append(fields, actversion.FieldCreatedAt)
	}
	if m.text != nil {
		fields = append(fields, actversion.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actversion.FieldCode:
		return m.Code()
	case actversion.FieldActCode:
		return m.ActCode()
	case actversion.FieldVersion:
		return m.Version()
	case actversion.FieldCreatedAt:
		return m.CreatedAt()
	case actversion.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actversion.FieldCode:
		return m.OldCode(ctx)
	case actversion.FieldActCode:
		return m.OldActCode(ctx)
	case actversion.FieldVersion:
		return m.OldVersion(ctx)
	case actversion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case actversion.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown ActVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actversion.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case actversion.FieldActCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActCode(v)
		return nil
	case actversion.FieldVersion:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case actversion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case actversion.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown ActVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActVersionMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, actversion.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case actversion.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case actversion.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown ActVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActVersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActVersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActVersionMutation) ResetField(name string) error {
	switch name {
	case actversion.FieldCode:
		m.ResetCode()
		return nil
	case actversion.FieldActCode:
		m.ResetActCode()
		return nil
	case actversion.FieldVersion:
		m.ResetVersion()
		return nil
	case actversion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case actversion.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown ActVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.act != nil {
		edges = append(edges, actversion.EdgeAct)
	}
	if m.images != nil {
		edges = append(edges, actversion.EdgeImages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case actversion.EdgeAct:
		if id := m.act; id != nil {
			return []ent.Value{*id}
		}
	case actversion.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedimages != nil {
		edges = append(edges, actversion.EdgeImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case actversion.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedact {
		edges = append(edges, actversion.EdgeAct)
	}
	if m.clearedimages {
		edges = append(edges, actversion.EdgeImages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case actversion.EdgeAct:
		return m.clearedact
	case actversion.EdgeImages:
		return m.clearedimages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActVersionMutation) ClearEdge(name string) error {
	switch name {
	case actversion.EdgeAct:
		m.ClearAct()
		return nil
	}
	return fmt.Errorf("unknown ActVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActVersionMutation) ResetEdge(name string) error {
	switch name {
	case actversion.EdgeAct:
		m.ResetAct()
		return nil
	case actversion.EdgeImages:
		m.ResetImages()
		return nil
	}
	return fmt.Errorf("unknown ActVersion edge %s", name)
}

// DailyRoutineMutation represents an operation that mutates the DailyRoutine nodes in the graph.
type DailyRoutineMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	code                   *string
	program_version_code   *string
	day                    *uint
	addday                 *int
	clearedFields          map[string]struct{}
	program_version        *uint64
	clearedprogram_version bool
	routine_acts           map[uint64]struct{}
	removedroutine_acts    map[uint64]struct{}
	clearedroutine_acts    bool
	done                   bool
	oldValue               func(context.Context) (*DailyRoutine, error)
	predicates             []predicate.DailyRoutine
}

var _ ent.Mutation = (*DailyRoutineMutation)(nil)

// dailyroutineOption allows management of the mutation configuration using functional options.
type dailyroutineOption func(*DailyRoutineMutation)

// newDailyRoutineMutation creates new mutation for the DailyRoutine entity.
func newDailyRoutineMutation(c config, op Op, opts ...dailyroutineOption) *DailyRoutineMutation {
	m := &DailyRoutineMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyRoutine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyRoutineID sets the ID field of the mutation.
func withDailyRoutineID(id uint64) dailyroutineOption {
	return func(m *DailyRoutineMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyRoutine
		)
		m.oldValue = func(ctx context.Context) (*DailyRoutine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyRoutine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyRoutine sets the old DailyRoutine of the mutation.
func withDailyRoutine(node *DailyRoutine) dailyroutineOption {
	return func(m *DailyRoutineMutation) {
		m.oldValue = func(context.Context) (*DailyRoutine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyRoutineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyRoutineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyRoutine entities.
func (m *DailyRoutineMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyRoutineMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyRoutineMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyRoutine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *DailyRoutineMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *DailyRoutineMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *DailyRoutineMutation) ResetCode() {
	m.code = nil
}

// SetProgramVersionCode sets the "program_version_code" field.
func (m *DailyRoutineMutation) SetProgramVersionCode(s string) {
	m.program_version_code = &s
}

// ProgramVersionCode returns the value of the "program_version_code" field in the mutation.
func (m *DailyRoutineMutation) ProgramVersionCode() (r string, exists bool) {
	v := m.program_version_code
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramVersionCode returns the old "program_version_code" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldProgramVersionCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramVersionCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramVersionCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramVersionCode: %w", err)
	}
	return oldValue.ProgramVersionCode, nil
}

// ResetProgramVersionCode resets all changes to the "program_version_code" field.
func (m *DailyRoutineMutation) ResetProgramVersionCode() {
	m.program_version_code = nil
}

// SetDay sets the "day" field.
func (m *DailyRoutineMutation) SetDay(u uint) {
	m.day = &u
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *DailyRoutineMutation) Day() (r uint, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldDay(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds u to the "day" field.
func (m *DailyRoutineMutation) AddDay(u int) {
	if m.addday != nil {
		*m.addday += u
	} else {
		m.addday = &u
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *DailyRoutineMutation) AddedDay() (r int, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *DailyRoutineMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetProgramVersionID sets the "program_version" edge to the ProgramVersion entity by id.
func (m *DailyRoutineMutation) SetProgramVersionID(id uint64) {
	m.program_version = &id
}

// ClearProgramVersion clears the "program_version" edge to the ProgramVersion entity.
func (m *DailyRoutineMutation) ClearProgramVersion() {
	m.clearedprogram_version = true
}

// ProgramVersionCleared reports if the "program_version" edge to the ProgramVersion entity was cleared.
func (m *DailyRoutineMutation) ProgramVersionCleared() bool {
	return m.clearedprogram_version
}

// ProgramVersionID returns the "program_version" edge ID in the mutation.
func (m *DailyRoutineMutation) ProgramVersionID() (id uint64, exists bool) {
	if m.program_version != nil {
		return *m.program_version, true
	}
	return
}

// ProgramVersionIDs returns the "program_version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramVersionID instead. It exists only for internal usage by the builders.
func (m *DailyRoutineMutation) ProgramVersionIDs() (ids []uint64) {
	if id := m.program_version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgramVersion resets all changes to the "program_version" edge.
func (m *DailyRoutineMutation) ResetProgramVersion() {
	m.program_version = nil
	m.clearedprogram_version = false
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by ids.
func (m *DailyRoutineMutation) AddRoutineActIDs(ids ...uint64) {
	if m.routine_acts == nil {
		m.routine_acts = make(map[uint64]struct{})
	}
	for i := range ids {
		m.routine_acts[ids[i]] = struct{}{}
	}
}

// ClearRoutineActs clears the "routine_acts" edge to the RoutineAct entity.
func (m *DailyRoutineMutation) ClearRoutineActs() {
	m.clearedroutine_acts = true
}

// RoutineActsCleared reports if the "routine_acts" edge to the RoutineAct entity was cleared.
func (m *DailyRoutineMutation) RoutineActsCleared() bool {
	return m.clearedroutine_acts
}

// RemoveRoutineActIDs removes the "routine_acts" edge to the RoutineAct entity by IDs.
func (m *DailyRoutineMutation) RemoveRoutineActIDs(ids ...uint64) {
	if m.removedroutine_acts == nil {
		m.removedroutine_acts = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.routine_acts, ids[i])
		m.removedroutine_acts[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActs returns the removed IDs of the "routine_acts" edge to the RoutineAct entity.
func (m *DailyRoutineMutation) RemovedRoutineActsIDs() (ids []uint64) {
	for id := range m.removedroutine_acts {
		ids = append(ids, id)
	}
	return
}

// RoutineActsIDs returns the "routine_acts" edge IDs in the mutation.
func (m *DailyRoutineMutation) RoutineActsIDs() (ids []uint64) {
	for id := range m.routine_acts {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActs resets all changes to the "routine_acts" edge.
func (m *DailyRoutineMutation) ResetRoutineActs() {
	m.routine_acts = nil
	m.clearedroutine_acts = false
	m.removedroutine_acts = nil
}

// Where appends a list predicates to the DailyRoutineMutation builder.
func (m *DailyRoutineMutation) Where(ps ...predicate.DailyRoutine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyRoutineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyRoutineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyRoutine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyRoutineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyRoutineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyRoutine).
func (m *DailyRoutineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyRoutineMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.code != nil {
		fields = append(fields, dailyroutine.FieldCode)
	}
	if m.program_version_code != nil {
		fields = append(fields, dailyroutine.FieldProgramVersionCode)
	}
	if m.day != nil {
		fields = append(fields, dailyroutine.FieldDay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyRoutineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailyroutine.FieldCode:
		return m.Code()
	case dailyroutine.FieldProgramVersionCode:
		return m.ProgramVersionCode()
	case dailyroutine.FieldDay:
		return m.Day()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyRoutineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailyroutine.FieldCode:
		return m.OldCode(ctx)
	case dailyroutine.FieldProgramVersionCode:
		return m.OldProgramVersionCode(ctx)
	case dailyroutine.FieldDay:
		return m.OldDay(ctx)
	}
	return nil, fmt.Errorf("unknown DailyRoutine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRoutineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailyroutine.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case dailyroutine.FieldProgramVersionCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramVersionCode(v)
		return nil
	case dailyroutine.FieldDay:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyRoutineMutation) AddedFields() []string {
	var fields []string
	if m.addday != nil {
		fields = append(fields, dailyroutine.FieldDay)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyRoutineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dailyroutine.FieldDay:
		return m.AddedDay()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRoutineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dailyroutine.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyRoutineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyRoutineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyRoutineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DailyRoutine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyRoutineMutation) ResetField(name string) error {
	switch name {
	case dailyroutine.FieldCode:
		m.ResetCode()
		return nil
	case dailyroutine.FieldProgramVersionCode:
		m.ResetProgramVersionCode()
		return nil
	case dailyroutine.FieldDay:
		m.ResetDay()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyRoutineMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.program_version != nil {
		edges = append(edges, dailyroutine.EdgeProgramVersion)
	}
	if m.routine_acts != nil {
		edges = append(edges, dailyroutine.EdgeRoutineActs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyRoutineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailyroutine.EdgeProgramVersion:
		if id := m.program_version; id != nil {
			return []ent.Value{*id}
		}
	case dailyroutine.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.routine_acts))
		for id := range m.routine_acts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyRoutineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroutine_acts != nil {
		edges = append(edges, dailyroutine.EdgeRoutineActs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyRoutineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dailyroutine.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.removedroutine_acts))
		for id := range m.removedroutine_acts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyRoutineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprogram_version {
		edges = append(edges, dailyroutine.EdgeProgramVersion)
	}
	if m.clearedroutine_acts {
		edges = append(edges, dailyroutine.EdgeRoutineActs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyRoutineMutation) EdgeCleared(name string) bool {
	switch name {
	case dailyroutine.EdgeProgramVersion:
		return m.clearedprogram_version
	case dailyroutine.EdgeRoutineActs:
		return m.clearedroutine_acts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyRoutineMutation) ClearEdge(name string) error {
	switch name {
	case dailyroutine.EdgeProgramVersion:
		m.ClearProgramVersion()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyRoutineMutation) ResetEdge(name string) error {
	switch name {
	case dailyroutine.EdgeProgramVersion:
		m.ResetProgramVersion()
		return nil
	case dailyroutine.EdgeRoutineActs:
		m.ResetRoutineActs()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine edge %s", name)
}

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	key                     *string
	src                     *string
	clearedFields           map[string]struct{}
	act_versions            map[uint64]struct{}
	removedact_versions     map[uint64]struct{}
	clearedact_versions     bool
	program_versions        map[uint64]struct{}
	removedprogram_versions map[uint64]struct{}
	clearedprogram_versions bool
	done                    bool
	oldValue                func(context.Context) (*Image, error)
	predicates              []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uint64) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *ImageMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *ImageMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *ImageMutation) ResetKey() {
	m.key = nil
}

// SetSrc sets the "src" field.
func (m *ImageMutation) SetSrc(s string) {
	m.src = &s
}

// Src returns the value of the "src" field in the mutation.
func (m *ImageMutation) Src() (r string, exists bool) {
	v := m.src
	if v == nil {
		return
	}
	return *v, true
}

// OldSrc returns the old "src" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldSrc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSrc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSrc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSrc: %w", err)
	}
	return oldValue.Src, nil
}

// ResetSrc resets all changes to the "src" field.
func (m *ImageMutation) ResetSrc() {
	m.src = nil
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by ids.
func (m *ImageMutation) AddActVersionIDs(ids ...uint64) {
	if m.act_versions == nil {
		m.act_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.act_versions[ids[i]] = struct{}{}
	}
}

// ClearActVersions clears the "act_versions" edge to the ActVersion entity.
func (m *ImageMutation) ClearActVersions() {
	m.clearedact_versions = true
}

// ActVersionsCleared reports if the "act_versions" edge to the ActVersion entity was cleared.
func (m *ImageMutation) ActVersionsCleared() bool {
	return m.clearedact_versions
}

// RemoveActVersionIDs removes the "act_versions" edge to the ActVersion entity by IDs.
func (m *ImageMutation) RemoveActVersionIDs(ids ...uint64) {
	if m.removedact_versions == nil {
		m.removedact_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.act_versions, ids[i])
		m.removedact_versions[ids[i]] = struct{}{}
	}
}

// RemovedActVersions returns the removed IDs of the "act_versions" edge to the ActVersion entity.
func (m *ImageMutation) RemovedActVersionsIDs() (ids []uint64) {
	for id := range m.removedact_versions {
		ids = append(ids, id)
	}
	return
}

// ActVersionsIDs returns the "act_versions" edge IDs in the mutation.
func (m *ImageMutation) ActVersionsIDs() (ids []uint64) {
	for id := range m.act_versions {
		ids = append(ids, id)
	}
	return
}

// ResetActVersions resets all changes to the "act_versions" edge.
func (m *ImageMutation) ResetActVersions() {
	m.act_versions = nil
	m.clearedact_versions = false
	m.removedact_versions = nil
}

// AddProgramVersionIDs adds the "program_versions" edge to the ProgramVersion entity by ids.
func (m *ImageMutation) AddProgramVersionIDs(ids ...uint64) {
	if m.program_versions == nil {
		m.program_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.program_versions[ids[i]] = struct{}{}
	}
}

// ClearProgramVersions clears the "program_versions" edge to the ProgramVersion entity.
func (m *ImageMutation) ClearProgramVersions() {
	m.clearedprogram_versions = true
}

// ProgramVersionsCleared reports if the "program_versions" edge to the ProgramVersion entity was cleared.
func (m *ImageMutation) ProgramVersionsCleared() bool {
	return m.clearedprogram_versions
}

// RemoveProgramVersionIDs removes the "program_versions" edge to the ProgramVersion entity by IDs.
func (m *ImageMutation) RemoveProgramVersionIDs(ids ...uint64) {
	if m.removedprogram_versions == nil {
		m.removedprogram_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.program_versions, ids[i])
		m.removedprogram_versions[ids[i]] = struct{}{}
	}
}

// RemovedProgramVersions returns the removed IDs of the "program_versions" edge to the ProgramVersion entity.
func (m *ImageMutation) RemovedProgramVersionsIDs() (ids []uint64) {
	for id := range m.removedprogram_versions {
		ids = append(ids, id)
	}
	return
}

// ProgramVersionsIDs returns the "program_versions" edge IDs in the mutation.
func (m *ImageMutation) ProgramVersionsIDs() (ids []uint64) {
	for id := range m.program_versions {
		ids = append(ids, id)
	}
	return
}

// ResetProgramVersions resets all changes to the "program_versions" edge.
func (m *ImageMutation) ResetProgramVersions() {
	m.program_versions = nil
	m.clearedprogram_versions = false
	m.removedprogram_versions = nil
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.key != nil {
		fields = append(fields, image.FieldKey)
	}
	if m.src != nil {
		fields = append(fields, image.FieldSrc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldKey:
		return m.Key()
	case image.FieldSrc:
		return m.Src()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldKey:
		return m.OldKey(ctx)
	case image.FieldSrc:
		return m.OldSrc(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case image.FieldSrc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSrc(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldKey:
		m.ResetKey()
		return nil
	case image.FieldSrc:
		m.ResetSrc()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.act_versions != nil {
		edges = append(edges, image.EdgeActVersions)
	}
	if m.program_versions != nil {
		edges = append(edges, image.EdgeProgramVersions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeActVersions:
		ids := make([]ent.Value, 0, len(m.act_versions))
		for id := range m.act_versions {
			ids = append(ids, id)
		}
		return ids
	case image.EdgeProgramVersions:
		ids := make([]ent.Value, 0, len(m.program_versions))
		for id := range m.program_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedact_versions != nil {
		edges = append(edges, image.EdgeActVersions)
	}
	if m.removedprogram_versions != nil {
		edges = append(edges, image.EdgeProgramVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeActVersions:
		ids := make([]ent.Value, 0, len(m.removedact_versions))
		for id := range m.removedact_versions {
			ids = append(ids, id)
		}
		return ids
	case image.EdgeProgramVersions:
		ids := make([]ent.Value, 0, len(m.removedprogram_versions))
		for id := range m.removedprogram_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedact_versions {
		edges = append(edges, image.EdgeActVersions)
	}
	if m.clearedprogram_versions {
		edges = append(edges, image.EdgeProgramVersions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case image.EdgeActVersions:
		return m.clearedact_versions
	case image.EdgeProgramVersions:
		return m.clearedprogram_versions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	switch name {
	case image.EdgeActVersions:
		m.ResetActVersions()
		return nil
	case image.EdgeProgramVersions:
		m.ResetProgramVersions()
		return nil
	}
	return fmt.Errorf("unknown Image edge %s", name)
}

// ProgramMutation represents an operation that mutates the Program nodes in the graph.
type ProgramMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	code                    *string
	program_type            *program.ProgramType
	title                   *string
	author                  *uint64
	addauthor               *int64
	created_at              *time.Time
	version_derived_from    *string
	clearedFields           map[string]struct{}
	program_versions        map[uint64]struct{}
	removedprogram_versions map[uint64]struct{}
	clearedprogram_versions bool
	done                    bool
	oldValue                func(context.Context) (*Program, error)
	predicates              []predicate.Program
}

var _ ent.Mutation = (*ProgramMutation)(nil)

// programOption allows management of the mutation configuration using functional options.
type programOption func(*ProgramMutation)

// newProgramMutation creates new mutation for the Program entity.
func newProgramMutation(c config, op Op, opts ...programOption) *ProgramMutation {
	m := &ProgramMutation{
		config:        c,
		op:            op,
		typ:           TypeProgram,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgramID sets the ID field of the mutation.
func withProgramID(id uint64) programOption {
	return func(m *ProgramMutation) {
		var (
			err   error
			once  sync.Once
			value *Program
		)
		m.oldValue = func(ctx context.Context) (*Program, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Program.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgram sets the old Program of the mutation.
func withProgram(node *Program) programOption {
	return func(m *ProgramMutation) {
		m.oldValue = func(context.Context) (*Program, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgramMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgramMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Program entities.
func (m *ProgramMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgramMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgramMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Program.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ProgramMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProgramMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ProgramMutation) ResetCode() {
	m.code = nil
}

// SetProgramType sets the "program_type" field.
func (m *ProgramMutation) SetProgramType(pt program.ProgramType) {
	m.program_type = &pt
}

// ProgramType returns the value of the "program_type" field in the mutation.
func (m *ProgramMutation) ProgramType() (r program.ProgramType, exists bool) {
	v := m.program_type
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramType returns the old "program_type" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldProgramType(ctx context.Context) (v program.ProgramType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramType: %w", err)
	}
	return oldValue.ProgramType, nil
}

// ResetProgramType resets all changes to the "program_type" field.
func (m *ProgramMutation) ResetProgramType() {
	m.program_type = nil
}

// SetTitle sets the "title" field.
func (m *ProgramMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProgramMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProgramMutation) ResetTitle() {
	m.title = nil
}

// SetAuthor sets the "author" field.
func (m *ProgramMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ProgramMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *ProgramMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ProgramMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ProgramMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProgramMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProgramMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProgramMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetVersionDerivedFrom sets the "version_derived_from" field.
func (m *ProgramMutation) SetVersionDerivedFrom(s string) {
	m.version_derived_from = &s
}

// VersionDerivedFrom returns the value of the "version_derived_from" field in the mutation.
func (m *ProgramMutation) VersionDerivedFrom() (r string, exists bool) {
	v := m.version_derived_from
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionDerivedFrom returns the old "version_derived_from" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldVersionDerivedFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersionDerivedFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersionDerivedFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionDerivedFrom: %w", err)
	}
	return oldValue.VersionDerivedFrom, nil
}

// ResetVersionDerivedFrom resets all changes to the "version_derived_from" field.
func (m *ProgramMutation) ResetVersionDerivedFrom() {
	m.version_derived_from = nil
}

// AddProgramVersionIDs adds the "program_versions" edge to the ProgramVersion entity by ids.
func (m *ProgramMutation) AddProgramVersionIDs(ids ...uint64) {
	if m.program_versions == nil {
		m.program_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.program_versions[ids[i]] = struct{}{}
	}
}

// ClearProgramVersions clears the "program_versions" edge to the ProgramVersion entity.
func (m *ProgramMutation) ClearProgramVersions() {
	m.clearedprogram_versions = true
}

// ProgramVersionsCleared reports if the "program_versions" edge to the ProgramVersion entity was cleared.
func (m *ProgramMutation) ProgramVersionsCleared() bool {
	return m.clearedprogram_versions
}

// RemoveProgramVersionIDs removes the "program_versions" edge to the ProgramVersion entity by IDs.
func (m *ProgramMutation) RemoveProgramVersionIDs(ids ...uint64) {
	if m.removedprogram_versions == nil {
		m.removedprogram_versions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.program_versions, ids[i])
		m.removedprogram_versions[ids[i]] = struct{}{}
	}
}

// RemovedProgramVersions returns the removed IDs of the "program_versions" edge to the ProgramVersion entity.
func (m *ProgramMutation) RemovedProgramVersionsIDs() (ids []uint64) {
	for id := range m.removedprogram_versions {
		ids = append(ids, id)
	}
	return
}

// ProgramVersionsIDs returns the "program_versions" edge IDs in the mutation.
func (m *ProgramMutation) ProgramVersionsIDs() (ids []uint64) {
	for id := range m.program_versions {
		ids = append(ids, id)
	}
	return
}

// ResetProgramVersions resets all changes to the "program_versions" edge.
func (m *ProgramMutation) ResetProgramVersions() {
	m.program_versions = nil
	m.clearedprogram_versions = false
	m.removedprogram_versions = nil
}

// Where appends a list predicates to the ProgramMutation builder.
func (m *ProgramMutation) Where(ps ...predicate.Program) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProgramMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProgramMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Program, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProgramMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProgramMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Program).
func (m *ProgramMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgramMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.code != nil {
		fields = append(fields, program.FieldCode)
	}
	if m.program_type != nil {
		fields = append(fields, program.FieldProgramType)
	}
	if m.title != nil {
		fields = append(fields, program.FieldTitle)
	}
	if m.author != nil {
		fields = append(fields, program.FieldAuthor)
	}
	if m.created_at != nil {
		fields = append(fields, program.FieldCreatedAt)
	}
	if m.version_derived_from != nil {
		fields = append(fields, program.FieldVersionDerivedFrom)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgramMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case program.FieldCode:
		return m.Code()
	case program.FieldProgramType:
		return m.ProgramType()
	case program.FieldTitle:
		return m.Title()
	case program.FieldAuthor:
		return m.Author()
	case program.FieldCreatedAt:
		return m.CreatedAt()
	case program.FieldVersionDerivedFrom:
		return m.VersionDerivedFrom()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgramMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case program.FieldCode:
		return m.OldCode(ctx)
	case program.FieldProgramType:
		return m.OldProgramType(ctx)
	case program.FieldTitle:
		return m.OldTitle(ctx)
	case program.FieldAuthor:
		return m.OldAuthor(ctx)
	case program.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case program.FieldVersionDerivedFrom:
		return m.OldVersionDerivedFrom(ctx)
	}
	return nil, fmt.Errorf("unknown Program field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramMutation) SetField(name string, value ent.Value) error {
	switch name {
	case program.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case program.FieldProgramType:
		v, ok := value.(program.ProgramType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramType(v)
		return nil
	case program.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case program.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case program.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case program.FieldVersionDerivedFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionDerivedFrom(v)
		return nil
	}
	return fmt.Errorf("unknown Program field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgramMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, program.FieldAuthor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgramMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case program.FieldAuthor:
		return m.AddedAuthor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramMutation) AddField(name string, value ent.Value) error {
	switch name {
	case program.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	}
	return fmt.Errorf("unknown Program numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgramMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgramMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgramMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Program nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgramMutation) ResetField(name string) error {
	switch name {
	case program.FieldCode:
		m.ResetCode()
		return nil
	case program.FieldProgramType:
		m.ResetProgramType()
		return nil
	case program.FieldTitle:
		m.ResetTitle()
		return nil
	case program.FieldAuthor:
		m.ResetAuthor()
		return nil
	case program.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case program.FieldVersionDerivedFrom:
		m.ResetVersionDerivedFrom()
		return nil
	}
	return fmt.Errorf("unknown Program field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgramMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.program_versions != nil {
		edges = append(edges, program.EdgeProgramVersions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgramMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case program.EdgeProgramVersions:
		ids := make([]ent.Value, 0, len(m.program_versions))
		for id := range m.program_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgramMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprogram_versions != nil {
		edges = append(edges, program.EdgeProgramVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgramMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case program.EdgeProgramVersions:
		ids := make([]ent.Value, 0, len(m.removedprogram_versions))
		for id := range m.removedprogram_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgramMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprogram_versions {
		edges = append(edges, program.EdgeProgramVersions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgramMutation) EdgeCleared(name string) bool {
	switch name {
	case program.EdgeProgramVersions:
		return m.clearedprogram_versions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgramMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Program unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgramMutation) ResetEdge(name string) error {
	switch name {
	case program.EdgeProgramVersions:
		m.ResetProgramVersions()
		return nil
	}
	return fmt.Errorf("unknown Program edge %s", name)
}

// ProgramVersionMutation represents an operation that mutates the ProgramVersion nodes in the graph.
type ProgramVersionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uint64
	code                  *string
	program_code          *string
	version               *uint
	addversion            *int
	created_at            *time.Time
	text                  *string
	clearedFields         map[string]struct{}
	program               *uint64
	clearedprogram        bool
	images                map[uint64]struct{}
	removedimages         map[uint64]struct{}
	clearedimages         bool
	daily_routines        map[uint64]struct{}
	removeddaily_routines map[uint64]struct{}
	cleareddaily_routines bool
	done                  bool
	oldValue              func(context.Context) (*ProgramVersion, error)
	predicates            []predicate.ProgramVersion
}

var _ ent.Mutation = (*ProgramVersionMutation)(nil)

// programversionOption allows management of the mutation configuration using functional options.
type programversionOption func(*ProgramVersionMutation)

// newProgramVersionMutation creates new mutation for the ProgramVersion entity.
func newProgramVersionMutation(c config, op Op, opts ...programversionOption) *ProgramVersionMutation {
	m := &ProgramVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeProgramVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgramVersionID sets the ID field of the mutation.
func withProgramVersionID(id uint64) programversionOption {
	return func(m *ProgramVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *ProgramVersion
		)
		m.oldValue = func(ctx context.Context) (*ProgramVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProgramVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgramVersion sets the old ProgramVersion of the mutation.
func withProgramVersion(node *ProgramVersion) programversionOption {
	return func(m *ProgramVersionMutation) {
		m.oldValue = func(context.Context) (*ProgramVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgramVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgramVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProgramVersion entities.
func (m *ProgramVersionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgramVersionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgramVersionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProgramVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ProgramVersionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProgramVersionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the ProgramVersion entity.
// If the ProgramVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramVersionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ProgramVersionMutation) ResetCode() {
	m.code = nil
}

// SetProgramCode sets the "program_code" field.
func (m *ProgramVersionMutation) SetProgramCode(s string) {
	m.program_code = &s
}

// ProgramCode returns the value of the "program_code" field in the mutation.
func (m *ProgramVersionMutation) ProgramCode() (r string, exists bool) {
	v := m.program_code
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramCode returns the old "program_code" field's value of the ProgramVersion entity.
// If the ProgramVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramVersionMutation) OldProgramCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramCode: %w", err)
	}
	return oldValue.ProgramCode, nil
}

// ResetProgramCode resets all changes to the "program_code" field.
func (m *ProgramVersionMutation) ResetProgramCode() {
	m.program_code = nil
}

// SetVersion sets the "version" field.
func (m *ProgramVersionMutation) SetVersion(u uint) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ProgramVersionMutation) Version() (r uint, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ProgramVersion entity.
// If the ProgramVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramVersionMutation) OldVersion(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *ProgramVersionMutation) AddVersion(u int) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ProgramVersionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *ProgramVersionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProgramVersionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProgramVersionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProgramVersion entity.
// If the ProgramVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramVersionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProgramVersionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetText sets the "text" field.
func (m *ProgramVersionMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ProgramVersionMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the ProgramVersion entity.
// If the ProgramVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramVersionMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ProgramVersionMutation) ResetText() {
	m.text = nil
}

// SetProgramID sets the "program" edge to the Program entity by id.
func (m *ProgramVersionMutation) SetProgramID(id uint64) {
	m.program = &id
}

// ClearProgram clears the "program" edge to the Program entity.
func (m *ProgramVersionMutation) ClearProgram() {
	m.clearedprogram = true
}

// ProgramCleared reports if the "program" edge to the Program entity was cleared.
func (m *ProgramVersionMutation) ProgramCleared() bool {
	return m.clearedprogram
}

// ProgramID returns the "program" edge ID in the mutation.
func (m *ProgramVersionMutation) ProgramID() (id uint64, exists bool) {
	if m.program != nil {
		return *m.program, true
	}
	return
}

// ProgramIDs returns the "program" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramID instead. It exists only for internal usage by the builders.
func (m *ProgramVersionMutation) ProgramIDs() (ids []uint64) {
	if id := m.program; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgram resets all changes to the "program" edge.
func (m *ProgramVersionMutation) ResetProgram() {
	m.program = nil
	m.clearedprogram = false
}

// AddImageIDs adds the "images" edge to the Image entity by ids.
func (m *ProgramVersionMutation) AddImageIDs(ids ...uint64) {
	if m.images == nil {
		m.images = make(map[uint64]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Image entity.
func (m *ProgramVersionMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Image entity was cleared.
func (m *ProgramVersionMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Image entity by IDs.
func (m *ProgramVersionMutation) RemoveImageIDs(ids ...uint64) {
	if m.removedimages == nil {
		m.removedimages = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Image entity.
func (m *ProgramVersionMutation) RemovedImagesIDs() (ids []uint64) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *ProgramVersionMutation) ImagesIDs() (ids []uint64) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *ProgramVersionMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by ids.
func (m *ProgramVersionMutation) AddDailyRoutineIDs(ids ...uint64) {
	if m.daily_routines == nil {
		m.daily_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		m.daily_routines[ids[i]] = struct{}{}
	}
}

// ClearDailyRoutines clears the "daily_routines" edge to the DailyRoutine entity.
func (m *ProgramVersionMutation) ClearDailyRoutines() {
	m.cleareddaily_routines = true
}

// DailyRoutinesCleared reports if the "daily_routines" edge to the DailyRoutine entity was cleared.
func (m *ProgramVersionMutation) DailyRoutinesCleared() bool {
	return m.cleareddaily_routines
}

// RemoveDailyRoutineIDs removes the "daily_routines" edge to the DailyRoutine entity by IDs.
func (m *ProgramVersionMutation) RemoveDailyRoutineIDs(ids ...uint64) {
	if m.removeddaily_routines == nil {
		m.removeddaily_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.daily_routines, ids[i])
		m.removeddaily_routines[ids[i]] = struct{}{}
	}
}

// RemovedDailyRoutines returns the removed IDs of the "daily_routines" edge to the DailyRoutine entity.
func (m *ProgramVersionMutation) RemovedDailyRoutinesIDs() (ids []uint64) {
	for id := range m.removeddaily_routines {
		ids = append(ids, id)
	}
	return
}

// DailyRoutinesIDs returns the "daily_routines" edge IDs in the mutation.
func (m *ProgramVersionMutation) DailyRoutinesIDs() (ids []uint64) {
	for id := range m.daily_routines {
		ids = append(ids, id)
	}
	return
}

// ResetDailyRoutines resets all changes to the "daily_routines" edge.
func (m *ProgramVersionMutation) ResetDailyRoutines() {
	m.daily_routines = nil
	m.cleareddaily_routines = false
	m.removeddaily_routines = nil
}

// Where appends a list predicates to the ProgramVersionMutation builder.
func (m *ProgramVersionMutation) Where(ps ...predicate.ProgramVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProgramVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProgramVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProgramVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProgramVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProgramVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProgramVersion).
func (m *ProgramVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgramVersionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, programversion.FieldCode)
	}
	if m.program_code != nil {
		fields = append(fields, programversion.FieldProgramCode)
	}
	if m.version != nil {
		fields = append(fields, programversion.FieldVersion)
	}
	if m.created_at != nil {
		fields = append(fields, programversion.FieldCreatedAt)
	}
	if m.text != nil {
		fields = append(fields, programversion.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgramVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case programversion.FieldCode:
		return m.Code()
	case programversion.FieldProgramCode:
		return m.ProgramCode()
	case programversion.FieldVersion:
		return m.Version()
	case programversion.FieldCreatedAt:
		return m.CreatedAt()
	case programversion.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgramVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case programversion.FieldCode:
		return m.OldCode(ctx)
	case programversion.FieldProgramCode:
		return m.OldProgramCode(ctx)
	case programversion.FieldVersion:
		return m.OldVersion(ctx)
	case programversion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case programversion.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown ProgramVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case programversion.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case programversion.FieldProgramCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramCode(v)
		return nil
	case programversion.FieldVersion:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case programversion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case programversion.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown ProgramVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgramVersionMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, programversion.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgramVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case programversion.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case programversion.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown ProgramVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgramVersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgramVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgramVersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProgramVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgramVersionMutation) ResetField(name string) error {
	switch name {
	case programversion.FieldCode:
		m.ResetCode()
		return nil
	case programversion.FieldProgramCode:
		m.ResetProgramCode()
		return nil
	case programversion.FieldVersion:
		m.ResetVersion()
		return nil
	case programversion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case programversion.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown ProgramVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgramVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.program != nil {
		edges = append(edges, programversion.EdgeProgram)
	}
	if m.images != nil {
		edges = append(edges, programversion.EdgeImages)
	}
	if m.daily_routines != nil {
		edges = append(edges, programversion.EdgeDailyRoutines)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgramVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case programversion.EdgeProgram:
		if id := m.program; id != nil {
			return []ent.Value{*id}
		}
	case programversion.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	case programversion.EdgeDailyRoutines:
		ids := make([]ent.Value, 0, len(m.daily_routines))
		for id := range m.daily_routines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgramVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedimages != nil {
		edges = append(edges, programversion.EdgeImages)
	}
	if m.removeddaily_routines != nil {
		edges = append(edges, programversion.EdgeDailyRoutines)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgramVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case programversion.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	case programversion.EdgeDailyRoutines:
		ids := make([]ent.Value, 0, len(m.removeddaily_routines))
		for id := range m.removeddaily_routines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgramVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprogram {
		edges = append(edges, programversion.EdgeProgram)
	}
	if m.clearedimages {
		edges = append(edges, programversion.EdgeImages)
	}
	if m.cleareddaily_routines {
		edges = append(edges, programversion.EdgeDailyRoutines)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgramVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case programversion.EdgeProgram:
		return m.clearedprogram
	case programversion.EdgeImages:
		return m.clearedimages
	case programversion.EdgeDailyRoutines:
		return m.cleareddaily_routines
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgramVersionMutation) ClearEdge(name string) error {
	switch name {
	case programversion.EdgeProgram:
		m.ClearProgram()
		return nil
	}
	return fmt.Errorf("unknown ProgramVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgramVersionMutation) ResetEdge(name string) error {
	switch name {
	case programversion.EdgeProgram:
		m.ResetProgram()
		return nil
	case programversion.EdgeImages:
		m.ResetImages()
		return nil
	case programversion.EdgeDailyRoutines:
		m.ResetDailyRoutines()
		return nil
	}
	return fmt.Errorf("unknown ProgramVersion edge %s", name)
}

// RoutineActMutation represents an operation that mutates the RoutineAct nodes in the graph.
type RoutineActMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint64
	daily_routine_code   *string
	_order               *uint
	add_order            *int
	act_version          *string
	stage                *routineact.Stage
	reps_or_meters       *uint
	addreps_or_meters    *int
	ratio_or_secs        *float64
	addratio_or_secs     *float64
	clearedFields        map[string]struct{}
	daily_routine        *uint64
	cleareddaily_routine bool
	done                 bool
	oldValue             func(context.Context) (*RoutineAct, error)
	predicates           []predicate.RoutineAct
}

var _ ent.Mutation = (*RoutineActMutation)(nil)

// routineactOption allows management of the mutation configuration using functional options.
type routineactOption func(*RoutineActMutation)

// newRoutineActMutation creates new mutation for the RoutineAct entity.
func newRoutineActMutation(c config, op Op, opts ...routineactOption) *RoutineActMutation {
	m := &RoutineActMutation{
		config:        c,
		op:            op,
		typ:           TypeRoutineAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoutineActID sets the ID field of the mutation.
func withRoutineActID(id uint64) routineactOption {
	return func(m *RoutineActMutation) {
		var (
			err   error
			once  sync.Once
			value *RoutineAct
		)
		m.oldValue = func(ctx context.Context) (*RoutineAct, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoutineAct.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoutineAct sets the old RoutineAct of the mutation.
func withRoutineAct(node *RoutineAct) routineactOption {
	return func(m *RoutineActMutation) {
		m.oldValue = func(context.Context) (*RoutineAct, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoutineActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoutineActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoutineAct entities.
func (m *RoutineActMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoutineActMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoutineActMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoutineAct.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDailyRoutineCode sets the "daily_routine_code" field.
func (m *RoutineActMutation) SetDailyRoutineCode(s string) {
	m.daily_routine_code = &s
}

// DailyRoutineCode returns the value of the "daily_routine_code" field in the mutation.
func (m *RoutineActMutation) DailyRoutineCode() (r string, exists bool) {
	v := m.daily_routine_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyRoutineCode returns the old "daily_routine_code" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldDailyRoutineCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyRoutineCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyRoutineCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyRoutineCode: %w", err)
	}
	return oldValue.DailyRoutineCode, nil
}

// ResetDailyRoutineCode resets all changes to the "daily_routine_code" field.
func (m *RoutineActMutation) ResetDailyRoutineCode() {
	m.daily_routine_code = nil
}

// SetOrder sets the "order" field.
func (m *RoutineActMutation) SetOrder(u uint) {
	m._order = &u
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RoutineActMutation) Order() (r uint, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldOrder(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds u to the "order" field.
func (m *RoutineActMutation) AddOrder(u int) {
	if m.add_order != nil {
		*m.add_order += u
	} else {
		m.add_order = &u
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RoutineActMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RoutineActMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetActVersion sets the "act_version" field.
func (m *RoutineActMutation) SetActVersion(s string) {
	m.act_version = &s
}

// ActVersion returns the value of the "act_version" field in the mutation.
func (m *RoutineActMutation) ActVersion() (r string, exists bool) {
	v := m.act_version
	if v == nil {
		return
	}
	return *v, true
}

// OldActVersion returns the old "act_version" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldActVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActVersion: %w", err)
	}
	return oldValue.ActVersion, nil
}

// ResetActVersion resets all changes to the "act_version" field.
func (m *RoutineActMutation) ResetActVersion() {
	m.act_version = nil
}

// SetStage sets the "stage" field.
func (m *RoutineActMutation) SetStage(r routineact.Stage) {
	m.stage = &r
}

// Stage returns the value of the "stage" field in the mutation.
func (m *RoutineActMutation) Stage() (r routineact.Stage, exists bool) {
	v := m.stage
	if v == nil {
		return
	}
	return *v, true
}

// OldStage returns the old "stage" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldStage(ctx context.Context) (v routineact.Stage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStage: %w", err)
	}
	return oldValue.Stage, nil
}

// ResetStage resets all changes to the "stage" field.
func (m *RoutineActMutation) ResetStage() {
	m.stage = nil
}

// SetRepsOrMeters sets the "reps_or_meters" field.
func (m *RoutineActMutation) SetRepsOrMeters(u uint) {
	m.reps_or_meters = &u
	m.addreps_or_meters = nil
}

// RepsOrMeters returns the value of the "reps_or_meters" field in the mutation.
func (m *RoutineActMutation) RepsOrMeters() (r uint, exists bool) {
	v := m.reps_or_meters
	if v == nil {
		return
	}
	return *v, true
}

// OldRepsOrMeters returns the old "reps_or_meters" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldRepsOrMeters(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepsOrMeters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepsOrMeters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepsOrMeters: %w", err)
	}
	return oldValue.RepsOrMeters, nil
}

// AddRepsOrMeters adds u to the "reps_or_meters" field.
func (m *RoutineActMutation) AddRepsOrMeters(u int) {
	if m.addreps_or_meters != nil {
		*m.addreps_or_meters += u
	} else {
		m.addreps_or_meters = &u
	}
}

// AddedRepsOrMeters returns the value that was added to the "reps_or_meters" field in this mutation.
func (m *RoutineActMutation) AddedRepsOrMeters() (r int, exists bool) {
	v := m.addreps_or_meters
	if v == nil {
		return
	}
	return *v, true
}

// ResetRepsOrMeters resets all changes to the "reps_or_meters" field.
func (m *RoutineActMutation) ResetRepsOrMeters() {
	m.reps_or_meters = nil
	m.addreps_or_meters = nil
}

// SetRatioOrSecs sets the "ratio_or_secs" field.
func (m *RoutineActMutation) SetRatioOrSecs(f float64) {
	m.ratio_or_secs = &f
	m.addratio_or_secs = nil
}

// RatioOrSecs returns the value of the "ratio_or_secs" field in the mutation.
func (m *RoutineActMutation) RatioOrSecs() (r float64, exists bool) {
	v := m.ratio_or_secs
	if v == nil {
		return
	}
	return *v, true
}

// OldRatioOrSecs returns the old "ratio_or_secs" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldRatioOrSecs(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRatioOrSecs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRatioOrSecs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRatioOrSecs: %w", err)
	}
	return oldValue.RatioOrSecs, nil
}

// AddRatioOrSecs adds f to the "ratio_or_secs" field.
func (m *RoutineActMutation) AddRatioOrSecs(f float64) {
	if m.addratio_or_secs != nil {
		*m.addratio_or_secs += f
	} else {
		m.addratio_or_secs = &f
	}
}

// AddedRatioOrSecs returns the value that was added to the "ratio_or_secs" field in this mutation.
func (m *RoutineActMutation) AddedRatioOrSecs() (r float64, exists bool) {
	v := m.addratio_or_secs
	if v == nil {
		return
	}
	return *v, true
}

// ResetRatioOrSecs resets all changes to the "ratio_or_secs" field.
func (m *RoutineActMutation) ResetRatioOrSecs() {
	m.ratio_or_secs = nil
	m.addratio_or_secs = nil
}

// SetDailyRoutineID sets the "daily_routine" edge to the DailyRoutine entity by id.
func (m *RoutineActMutation) SetDailyRoutineID(id uint64) {
	m.daily_routine = &id
}

// ClearDailyRoutine clears the "daily_routine" edge to the DailyRoutine entity.
func (m *RoutineActMutation) ClearDailyRoutine() {
	m.cleareddaily_routine = true
}

// DailyRoutineCleared reports if the "daily_routine" edge to the DailyRoutine entity was cleared.
func (m *RoutineActMutation) DailyRoutineCleared() bool {
	return m.cleareddaily_routine
}

// DailyRoutineID returns the "daily_routine" edge ID in the mutation.
func (m *RoutineActMutation) DailyRoutineID() (id uint64, exists bool) {
	if m.daily_routine != nil {
		return *m.daily_routine, true
	}
	return
}

// DailyRoutineIDs returns the "daily_routine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DailyRoutineID instead. It exists only for internal usage by the builders.
func (m *RoutineActMutation) DailyRoutineIDs() (ids []uint64) {
	if id := m.daily_routine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDailyRoutine resets all changes to the "daily_routine" edge.
func (m *RoutineActMutation) ResetDailyRoutine() {
	m.daily_routine = nil
	m.cleareddaily_routine = false
}

// Where appends a list predicates to the RoutineActMutation builder.
func (m *RoutineActMutation) Where(ps ...predicate.RoutineAct) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoutineActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoutineActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoutineAct, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoutineActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoutineActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoutineAct).
func (m *RoutineActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoutineActMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.daily_routine_code != nil {
		fields = append(fields, routineact.FieldDailyRoutineCode)
	}
	if m._order != nil {
		fields = append(fields, routineact.FieldOrder)
	}
	if m.act_version != nil {
		fields = append(fields, routineact.FieldActVersion)
	}
	if m.stage != nil {
		fields = append(fields, routineact.FieldStage)
	}
	if m.reps_or_meters != nil {
		fields = append(fields, routineact.FieldRepsOrMeters)
	}
	if m.ratio_or_secs != nil {
		fields = append(fields, routineact.FieldRatioOrSecs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoutineActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case routineact.FieldDailyRoutineCode:
		return m.DailyRoutineCode()
	case routineact.FieldOrder:
		return m.Order()
	case routineact.FieldActVersion:
		return m.ActVersion()
	case routineact.FieldStage:
		return m.Stage()
	case routineact.FieldRepsOrMeters:
		return m.RepsOrMeters()
	case routineact.FieldRatioOrSecs:
		return m.RatioOrSecs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoutineActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case routineact.FieldDailyRoutineCode:
		return m.OldDailyRoutineCode(ctx)
	case routineact.FieldOrder:
		return m.OldOrder(ctx)
	case routineact.FieldActVersion:
		return m.OldActVersion(ctx)
	case routineact.FieldStage:
		return m.OldStage(ctx)
	case routineact.FieldRepsOrMeters:
		return m.OldRepsOrMeters(ctx)
	case routineact.FieldRatioOrSecs:
		return m.OldRatioOrSecs(ctx)
	}
	return nil, fmt.Errorf("unknown RoutineAct field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case routineact.FieldDailyRoutineCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyRoutineCode(v)
		return nil
	case routineact.FieldOrder:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case routineact.FieldActVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActVersion(v)
		return nil
	case routineact.FieldStage:
		v, ok := value.(routineact.Stage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStage(v)
		return nil
	case routineact.FieldRepsOrMeters:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepsOrMeters(v)
		return nil
	case routineact.FieldRatioOrSecs:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRatioOrSecs(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineAct field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoutineActMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, routineact.FieldOrder)
	}
	if m.addreps_or_meters != nil {
		fields = append(fields, routineact.FieldRepsOrMeters)
	}
	if m.addratio_or_secs != nil {
		fields = append(fields, routineact.FieldRatioOrSecs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoutineActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case routineact.FieldOrder:
		return m.AddedOrder()
	case routineact.FieldRepsOrMeters:
		return m.AddedRepsOrMeters()
	case routineact.FieldRatioOrSecs:
		return m.AddedRatioOrSecs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case routineact.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case routineact.FieldRepsOrMeters:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRepsOrMeters(v)
		return nil
	case routineact.FieldRatioOrSecs:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRatioOrSecs(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineAct numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoutineActMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoutineActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoutineActMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoutineAct nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoutineActMutation) ResetField(name string) error {
	switch name {
	case routineact.FieldDailyRoutineCode:
		m.ResetDailyRoutineCode()
		return nil
	case routineact.FieldOrder:
		m.ResetOrder()
		return nil
	case routineact.FieldActVersion:
		m.ResetActVersion()
		return nil
	case routineact.FieldStage:
		m.ResetStage()
		return nil
	case routineact.FieldRepsOrMeters:
		m.ResetRepsOrMeters()
		return nil
	case routineact.FieldRatioOrSecs:
		m.ResetRatioOrSecs()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoutineActMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.daily_routine != nil {
		edges = append(edges, routineact.EdgeDailyRoutine)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoutineActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case routineact.EdgeDailyRoutine:
		if id := m.daily_routine; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoutineActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoutineActMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoutineActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddaily_routine {
		edges = append(edges, routineact.EdgeDailyRoutine)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoutineActMutation) EdgeCleared(name string) bool {
	switch name {
	case routineact.EdgeDailyRoutine:
		return m.cleareddaily_routine
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoutineActMutation) ClearEdge(name string) error {
	switch name {
	case routineact.EdgeDailyRoutine:
		m.ClearDailyRoutine()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoutineActMutation) ResetEdge(name string) error {
	switch name {
	case routineact.EdgeDailyRoutine:
		m.ResetDailyRoutine()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct edge %s", name)
}

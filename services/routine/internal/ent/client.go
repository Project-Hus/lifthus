// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"routine/internal/ent/migrate"

	"routine/internal/ent/act"
	"routine/internal/ent/actimage"
	"routine/internal/ent/actversion"
	"routine/internal/ent/dailyroutine"
	"routine/internal/ent/image"
	"routine/internal/ent/program"
	"routine/internal/ent/programimage"
	"routine/internal/ent/programversion"
	"routine/internal/ent/routineact"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Act is the client for interacting with the Act builders.
	Act *ActClient
	// ActImage is the client for interacting with the ActImage builders.
	ActImage *ActImageClient
	// ActVersion is the client for interacting with the ActVersion builders.
	ActVersion *ActVersionClient
	// DailyRoutine is the client for interacting with the DailyRoutine builders.
	DailyRoutine *DailyRoutineClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// Program is the client for interacting with the Program builders.
	Program *ProgramClient
	// ProgramImage is the client for interacting with the ProgramImage builders.
	ProgramImage *ProgramImageClient
	// ProgramVersion is the client for interacting with the ProgramVersion builders.
	ProgramVersion *ProgramVersionClient
	// RoutineAct is the client for interacting with the RoutineAct builders.
	RoutineAct *RoutineActClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Act = NewActClient(c.config)
	c.ActImage = NewActImageClient(c.config)
	c.ActVersion = NewActVersionClient(c.config)
	c.DailyRoutine = NewDailyRoutineClient(c.config)
	c.Image = NewImageClient(c.config)
	c.Program = NewProgramClient(c.config)
	c.ProgramImage = NewProgramImageClient(c.config)
	c.ProgramVersion = NewProgramVersionClient(c.config)
	c.RoutineAct = NewRoutineActClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Act:            NewActClient(cfg),
		ActImage:       NewActImageClient(cfg),
		ActVersion:     NewActVersionClient(cfg),
		DailyRoutine:   NewDailyRoutineClient(cfg),
		Image:          NewImageClient(cfg),
		Program:        NewProgramClient(cfg),
		ProgramImage:   NewProgramImageClient(cfg),
		ProgramVersion: NewProgramVersionClient(cfg),
		RoutineAct:     NewRoutineActClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Act:            NewActClient(cfg),
		ActImage:       NewActImageClient(cfg),
		ActVersion:     NewActVersionClient(cfg),
		DailyRoutine:   NewDailyRoutineClient(cfg),
		Image:          NewImageClient(cfg),
		Program:        NewProgramClient(cfg),
		ProgramImage:   NewProgramImageClient(cfg),
		ProgramVersion: NewProgramVersionClient(cfg),
		RoutineAct:     NewRoutineActClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Act.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Act, c.ActImage, c.ActVersion, c.DailyRoutine, c.Image, c.Program,
		c.ProgramImage, c.ProgramVersion, c.RoutineAct,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Act, c.ActImage, c.ActVersion, c.DailyRoutine, c.Image, c.Program,
		c.ProgramImage, c.ProgramVersion, c.RoutineAct,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActMutation:
		return c.Act.mutate(ctx, m)
	case *ActImageMutation:
		return c.ActImage.mutate(ctx, m)
	case *ActVersionMutation:
		return c.ActVersion.mutate(ctx, m)
	case *DailyRoutineMutation:
		return c.DailyRoutine.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *ProgramMutation:
		return c.Program.mutate(ctx, m)
	case *ProgramImageMutation:
		return c.ProgramImage.mutate(ctx, m)
	case *ProgramVersionMutation:
		return c.ProgramVersion.mutate(ctx, m)
	case *RoutineActMutation:
		return c.RoutineAct.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActClient is a client for the Act schema.
type ActClient struct {
	config
}

// NewActClient returns a client for the Act from the given config.
func NewActClient(c config) *ActClient {
	return &ActClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `act.Hooks(f(g(h())))`.
func (c *ActClient) Use(hooks ...Hook) {
	c.hooks.Act = append(c.hooks.Act, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `act.Intercept(f(g(h())))`.
func (c *ActClient) Intercept(interceptors ...Interceptor) {
	c.inters.Act = append(c.inters.Act, interceptors...)
}

// Create returns a builder for creating a Act entity.
func (c *ActClient) Create() *ActCreate {
	mutation := newActMutation(c.config, OpCreate)
	return &ActCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Act entities.
func (c *ActClient) CreateBulk(builders ...*ActCreate) *ActCreateBulk {
	return &ActCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Act.
func (c *ActClient) Update() *ActUpdate {
	mutation := newActMutation(c.config, OpUpdate)
	return &ActUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActClient) UpdateOne(a *Act) *ActUpdateOne {
	mutation := newActMutation(c.config, OpUpdateOne, withAct(a))
	return &ActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActClient) UpdateOneID(id uint64) *ActUpdateOne {
	mutation := newActMutation(c.config, OpUpdateOne, withActID(id))
	return &ActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Act.
func (c *ActClient) Delete() *ActDelete {
	mutation := newActMutation(c.config, OpDelete)
	return &ActDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActClient) DeleteOne(a *Act) *ActDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActClient) DeleteOneID(id uint64) *ActDeleteOne {
	builder := c.Delete().Where(act.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActDeleteOne{builder}
}

// Query returns a query builder for Act.
func (c *ActClient) Query() *ActQuery {
	return &ActQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAct},
		inters: c.Interceptors(),
	}
}

// Get returns a Act entity by its id.
func (c *ActClient) Get(ctx context.Context, id uint64) (*Act, error) {
	return c.Query().Where(act.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActClient) GetX(ctx context.Context, id uint64) *Act {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActVersions queries the act_versions edge of a Act.
func (c *ActClient) QueryActVersions(a *Act) *ActVersionQuery {
	query := (&ActVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(act.Table, act.FieldID, id),
			sqlgraph.To(actversion.Table, actversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, act.ActVersionsTable, act.ActVersionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActClient) Hooks() []Hook {
	return c.hooks.Act
}

// Interceptors returns the client interceptors.
func (c *ActClient) Interceptors() []Interceptor {
	return c.inters.Act
}

func (c *ActClient) mutate(ctx context.Context, m *ActMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Act mutation op: %q", m.Op())
	}
}

// ActImageClient is a client for the ActImage schema.
type ActImageClient struct {
	config
}

// NewActImageClient returns a client for the ActImage from the given config.
func NewActImageClient(c config) *ActImageClient {
	return &ActImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `actimage.Hooks(f(g(h())))`.
func (c *ActImageClient) Use(hooks ...Hook) {
	c.hooks.ActImage = append(c.hooks.ActImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `actimage.Intercept(f(g(h())))`.
func (c *ActImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActImage = append(c.inters.ActImage, interceptors...)
}

// Create returns a builder for creating a ActImage entity.
func (c *ActImageClient) Create() *ActImageCreate {
	mutation := newActImageMutation(c.config, OpCreate)
	return &ActImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActImage entities.
func (c *ActImageClient) CreateBulk(builders ...*ActImageCreate) *ActImageCreateBulk {
	return &ActImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActImage.
func (c *ActImageClient) Update() *ActImageUpdate {
	mutation := newActImageMutation(c.config, OpUpdate)
	return &ActImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActImageClient) UpdateOne(ai *ActImage) *ActImageUpdateOne {
	mutation := newActImageMutation(c.config, OpUpdateOne, withActImage(ai))
	return &ActImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActImageClient) UpdateOneID(id uint64) *ActImageUpdateOne {
	mutation := newActImageMutation(c.config, OpUpdateOne, withActImageID(id))
	return &ActImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActImage.
func (c *ActImageClient) Delete() *ActImageDelete {
	mutation := newActImageMutation(c.config, OpDelete)
	return &ActImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActImageClient) DeleteOne(ai *ActImage) *ActImageDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActImageClient) DeleteOneID(id uint64) *ActImageDeleteOne {
	builder := c.Delete().Where(actimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActImageDeleteOne{builder}
}

// Query returns a query builder for ActImage.
func (c *ActImageClient) Query() *ActImageQuery {
	return &ActImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ActImage entity by its id.
func (c *ActImageClient) Get(ctx context.Context, id uint64) (*ActImage, error) {
	return c.Query().Where(actimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActImageClient) GetX(ctx context.Context, id uint64) *ActImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActVersion queries the act_version edge of a ActImage.
func (c *ActImageClient) QueryActVersion(ai *ActImage) *ActVersionQuery {
	query := (&ActVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(actimage.Table, actimage.FieldID, id),
			sqlgraph.To(actversion.Table, actversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, actimage.ActVersionTable, actimage.ActVersionColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a ActImage.
func (c *ActImageClient) QueryImage(ai *ActImage) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(actimage.Table, actimage.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, actimage.ImageTable, actimage.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActImageClient) Hooks() []Hook {
	return c.hooks.ActImage
}

// Interceptors returns the client interceptors.
func (c *ActImageClient) Interceptors() []Interceptor {
	return c.inters.ActImage
}

func (c *ActImageClient) mutate(ctx context.Context, m *ActImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActImage mutation op: %q", m.Op())
	}
}

// ActVersionClient is a client for the ActVersion schema.
type ActVersionClient struct {
	config
}

// NewActVersionClient returns a client for the ActVersion from the given config.
func NewActVersionClient(c config) *ActVersionClient {
	return &ActVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `actversion.Hooks(f(g(h())))`.
func (c *ActVersionClient) Use(hooks ...Hook) {
	c.hooks.ActVersion = append(c.hooks.ActVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `actversion.Intercept(f(g(h())))`.
func (c *ActVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActVersion = append(c.inters.ActVersion, interceptors...)
}

// Create returns a builder for creating a ActVersion entity.
func (c *ActVersionClient) Create() *ActVersionCreate {
	mutation := newActVersionMutation(c.config, OpCreate)
	return &ActVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActVersion entities.
func (c *ActVersionClient) CreateBulk(builders ...*ActVersionCreate) *ActVersionCreateBulk {
	return &ActVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActVersion.
func (c *ActVersionClient) Update() *ActVersionUpdate {
	mutation := newActVersionMutation(c.config, OpUpdate)
	return &ActVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActVersionClient) UpdateOne(av *ActVersion) *ActVersionUpdateOne {
	mutation := newActVersionMutation(c.config, OpUpdateOne, withActVersion(av))
	return &ActVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActVersionClient) UpdateOneID(id uint64) *ActVersionUpdateOne {
	mutation := newActVersionMutation(c.config, OpUpdateOne, withActVersionID(id))
	return &ActVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActVersion.
func (c *ActVersionClient) Delete() *ActVersionDelete {
	mutation := newActVersionMutation(c.config, OpDelete)
	return &ActVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActVersionClient) DeleteOne(av *ActVersion) *ActVersionDeleteOne {
	return c.DeleteOneID(av.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActVersionClient) DeleteOneID(id uint64) *ActVersionDeleteOne {
	builder := c.Delete().Where(actversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActVersionDeleteOne{builder}
}

// Query returns a query builder for ActVersion.
func (c *ActVersionClient) Query() *ActVersionQuery {
	return &ActVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a ActVersion entity by its id.
func (c *ActVersionClient) Get(ctx context.Context, id uint64) (*ActVersion, error) {
	return c.Query().Where(actversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActVersionClient) GetX(ctx context.Context, id uint64) *ActVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAct queries the act edge of a ActVersion.
func (c *ActVersionClient) QueryAct(av *ActVersion) *ActQuery {
	query := (&ActClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := av.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(actversion.Table, actversion.FieldID, id),
			sqlgraph.To(act.Table, act.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, actversion.ActTable, actversion.ActColumn),
		)
		fromV = sqlgraph.Neighbors(av.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a ActVersion.
func (c *ActVersionClient) QueryImages(av *ActVersion) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := av.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(actversion.Table, actversion.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, actversion.ImagesTable, actversion.ImagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(av.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActImages queries the act_images edge of a ActVersion.
func (c *ActVersionClient) QueryActImages(av *ActVersion) *ActImageQuery {
	query := (&ActImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := av.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(actversion.Table, actversion.FieldID, id),
			sqlgraph.To(actimage.Table, actimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, actversion.ActImagesTable, actversion.ActImagesColumn),
		)
		fromV = sqlgraph.Neighbors(av.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActVersionClient) Hooks() []Hook {
	return c.hooks.ActVersion
}

// Interceptors returns the client interceptors.
func (c *ActVersionClient) Interceptors() []Interceptor {
	return c.inters.ActVersion
}

func (c *ActVersionClient) mutate(ctx context.Context, m *ActVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActVersion mutation op: %q", m.Op())
	}
}

// DailyRoutineClient is a client for the DailyRoutine schema.
type DailyRoutineClient struct {
	config
}

// NewDailyRoutineClient returns a client for the DailyRoutine from the given config.
func NewDailyRoutineClient(c config) *DailyRoutineClient {
	return &DailyRoutineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dailyroutine.Hooks(f(g(h())))`.
func (c *DailyRoutineClient) Use(hooks ...Hook) {
	c.hooks.DailyRoutine = append(c.hooks.DailyRoutine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dailyroutine.Intercept(f(g(h())))`.
func (c *DailyRoutineClient) Intercept(interceptors ...Interceptor) {
	c.inters.DailyRoutine = append(c.inters.DailyRoutine, interceptors...)
}

// Create returns a builder for creating a DailyRoutine entity.
func (c *DailyRoutineClient) Create() *DailyRoutineCreate {
	mutation := newDailyRoutineMutation(c.config, OpCreate)
	return &DailyRoutineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DailyRoutine entities.
func (c *DailyRoutineClient) CreateBulk(builders ...*DailyRoutineCreate) *DailyRoutineCreateBulk {
	return &DailyRoutineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DailyRoutine.
func (c *DailyRoutineClient) Update() *DailyRoutineUpdate {
	mutation := newDailyRoutineMutation(c.config, OpUpdate)
	return &DailyRoutineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DailyRoutineClient) UpdateOne(dr *DailyRoutine) *DailyRoutineUpdateOne {
	mutation := newDailyRoutineMutation(c.config, OpUpdateOne, withDailyRoutine(dr))
	return &DailyRoutineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DailyRoutineClient) UpdateOneID(id uint64) *DailyRoutineUpdateOne {
	mutation := newDailyRoutineMutation(c.config, OpUpdateOne, withDailyRoutineID(id))
	return &DailyRoutineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DailyRoutine.
func (c *DailyRoutineClient) Delete() *DailyRoutineDelete {
	mutation := newDailyRoutineMutation(c.config, OpDelete)
	return &DailyRoutineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DailyRoutineClient) DeleteOne(dr *DailyRoutine) *DailyRoutineDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DailyRoutineClient) DeleteOneID(id uint64) *DailyRoutineDeleteOne {
	builder := c.Delete().Where(dailyroutine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DailyRoutineDeleteOne{builder}
}

// Query returns a query builder for DailyRoutine.
func (c *DailyRoutineClient) Query() *DailyRoutineQuery {
	return &DailyRoutineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDailyRoutine},
		inters: c.Interceptors(),
	}
}

// Get returns a DailyRoutine entity by its id.
func (c *DailyRoutineClient) Get(ctx context.Context, id uint64) (*DailyRoutine, error) {
	return c.Query().Where(dailyroutine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DailyRoutineClient) GetX(ctx context.Context, id uint64) *DailyRoutine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgramVersion queries the program_version edge of a DailyRoutine.
func (c *DailyRoutineClient) QueryProgramVersion(dr *DailyRoutine) *ProgramVersionQuery {
	query := (&ProgramVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyroutine.Table, dailyroutine.FieldID, id),
			sqlgraph.To(programversion.Table, programversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailyroutine.ProgramVersionTable, dailyroutine.ProgramVersionColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoutineActs queries the routine_acts edge of a DailyRoutine.
func (c *DailyRoutineClient) QueryRoutineActs(dr *DailyRoutine) *RoutineActQuery {
	query := (&RoutineActClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyroutine.Table, dailyroutine.FieldID, id),
			sqlgraph.To(routineact.Table, routineact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dailyroutine.RoutineActsTable, dailyroutine.RoutineActsColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DailyRoutineClient) Hooks() []Hook {
	return c.hooks.DailyRoutine
}

// Interceptors returns the client interceptors.
func (c *DailyRoutineClient) Interceptors() []Interceptor {
	return c.inters.DailyRoutine
}

func (c *DailyRoutineClient) mutate(ctx context.Context, m *DailyRoutineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DailyRoutineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DailyRoutineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DailyRoutineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DailyRoutineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DailyRoutine mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id uint64) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id uint64) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id uint64) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id uint64) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActVersions queries the act_versions edge of a Image.
func (c *ImageClient) QueryActVersions(i *Image) *ActVersionQuery {
	query := (&ActVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(actversion.Table, actversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, image.ActVersionsTable, image.ActVersionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgramVersions queries the program_versions edge of a Image.
func (c *ImageClient) QueryProgramVersions(i *Image) *ProgramVersionQuery {
	query := (&ProgramVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(programversion.Table, programversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, image.ProgramVersionsTable, image.ProgramVersionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActImages queries the act_images edge of a Image.
func (c *ImageClient) QueryActImages(i *Image) *ActImageQuery {
	query := (&ActImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(actimage.Table, actimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, image.ActImagesTable, image.ActImagesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgramImages queries the program_images edge of a Image.
func (c *ImageClient) QueryProgramImages(i *Image) *ProgramImageQuery {
	query := (&ProgramImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(programimage.Table, programimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, image.ProgramImagesTable, image.ProgramImagesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// ProgramClient is a client for the Program schema.
type ProgramClient struct {
	config
}

// NewProgramClient returns a client for the Program from the given config.
func NewProgramClient(c config) *ProgramClient {
	return &ProgramClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `program.Hooks(f(g(h())))`.
func (c *ProgramClient) Use(hooks ...Hook) {
	c.hooks.Program = append(c.hooks.Program, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `program.Intercept(f(g(h())))`.
func (c *ProgramClient) Intercept(interceptors ...Interceptor) {
	c.inters.Program = append(c.inters.Program, interceptors...)
}

// Create returns a builder for creating a Program entity.
func (c *ProgramClient) Create() *ProgramCreate {
	mutation := newProgramMutation(c.config, OpCreate)
	return &ProgramCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Program entities.
func (c *ProgramClient) CreateBulk(builders ...*ProgramCreate) *ProgramCreateBulk {
	return &ProgramCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Program.
func (c *ProgramClient) Update() *ProgramUpdate {
	mutation := newProgramMutation(c.config, OpUpdate)
	return &ProgramUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProgramClient) UpdateOne(pr *Program) *ProgramUpdateOne {
	mutation := newProgramMutation(c.config, OpUpdateOne, withProgram(pr))
	return &ProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProgramClient) UpdateOneID(id uint64) *ProgramUpdateOne {
	mutation := newProgramMutation(c.config, OpUpdateOne, withProgramID(id))
	return &ProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Program.
func (c *ProgramClient) Delete() *ProgramDelete {
	mutation := newProgramMutation(c.config, OpDelete)
	return &ProgramDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProgramClient) DeleteOne(pr *Program) *ProgramDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProgramClient) DeleteOneID(id uint64) *ProgramDeleteOne {
	builder := c.Delete().Where(program.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProgramDeleteOne{builder}
}

// Query returns a query builder for Program.
func (c *ProgramClient) Query() *ProgramQuery {
	return &ProgramQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProgram},
		inters: c.Interceptors(),
	}
}

// Get returns a Program entity by its id.
func (c *ProgramClient) Get(ctx context.Context, id uint64) (*Program, error) {
	return c.Query().Where(program.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProgramClient) GetX(ctx context.Context, id uint64) *Program {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgramVersions queries the program_versions edge of a Program.
func (c *ProgramClient) QueryProgramVersions(pr *Program) *ProgramVersionQuery {
	query := (&ProgramVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, id),
			sqlgraph.To(programversion.Table, programversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.ProgramVersionsTable, program.ProgramVersionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProgramClient) Hooks() []Hook {
	return c.hooks.Program
}

// Interceptors returns the client interceptors.
func (c *ProgramClient) Interceptors() []Interceptor {
	return c.inters.Program
}

func (c *ProgramClient) mutate(ctx context.Context, m *ProgramMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProgramCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProgramUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProgramDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Program mutation op: %q", m.Op())
	}
}

// ProgramImageClient is a client for the ProgramImage schema.
type ProgramImageClient struct {
	config
}

// NewProgramImageClient returns a client for the ProgramImage from the given config.
func NewProgramImageClient(c config) *ProgramImageClient {
	return &ProgramImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `programimage.Hooks(f(g(h())))`.
func (c *ProgramImageClient) Use(hooks ...Hook) {
	c.hooks.ProgramImage = append(c.hooks.ProgramImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `programimage.Intercept(f(g(h())))`.
func (c *ProgramImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProgramImage = append(c.inters.ProgramImage, interceptors...)
}

// Create returns a builder for creating a ProgramImage entity.
func (c *ProgramImageClient) Create() *ProgramImageCreate {
	mutation := newProgramImageMutation(c.config, OpCreate)
	return &ProgramImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProgramImage entities.
func (c *ProgramImageClient) CreateBulk(builders ...*ProgramImageCreate) *ProgramImageCreateBulk {
	return &ProgramImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProgramImage.
func (c *ProgramImageClient) Update() *ProgramImageUpdate {
	mutation := newProgramImageMutation(c.config, OpUpdate)
	return &ProgramImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProgramImageClient) UpdateOne(pi *ProgramImage) *ProgramImageUpdateOne {
	mutation := newProgramImageMutation(c.config, OpUpdateOne, withProgramImage(pi))
	return &ProgramImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProgramImageClient) UpdateOneID(id uint64) *ProgramImageUpdateOne {
	mutation := newProgramImageMutation(c.config, OpUpdateOne, withProgramImageID(id))
	return &ProgramImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProgramImage.
func (c *ProgramImageClient) Delete() *ProgramImageDelete {
	mutation := newProgramImageMutation(c.config, OpDelete)
	return &ProgramImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProgramImageClient) DeleteOne(pi *ProgramImage) *ProgramImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProgramImageClient) DeleteOneID(id uint64) *ProgramImageDeleteOne {
	builder := c.Delete().Where(programimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProgramImageDeleteOne{builder}
}

// Query returns a query builder for ProgramImage.
func (c *ProgramImageClient) Query() *ProgramImageQuery {
	return &ProgramImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProgramImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProgramImage entity by its id.
func (c *ProgramImageClient) Get(ctx context.Context, id uint64) (*ProgramImage, error) {
	return c.Query().Where(programimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProgramImageClient) GetX(ctx context.Context, id uint64) *ProgramImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgramVersion queries the program_version edge of a ProgramImage.
func (c *ProgramImageClient) QueryProgramVersion(pi *ProgramImage) *ProgramVersionQuery {
	query := (&ProgramVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programimage.Table, programimage.FieldID, id),
			sqlgraph.To(programversion.Table, programversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, programimage.ProgramVersionTable, programimage.ProgramVersionColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a ProgramImage.
func (c *ProgramImageClient) QueryImage(pi *ProgramImage) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programimage.Table, programimage.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, programimage.ImageTable, programimage.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProgramImageClient) Hooks() []Hook {
	return c.hooks.ProgramImage
}

// Interceptors returns the client interceptors.
func (c *ProgramImageClient) Interceptors() []Interceptor {
	return c.inters.ProgramImage
}

func (c *ProgramImageClient) mutate(ctx context.Context, m *ProgramImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProgramImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProgramImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProgramImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProgramImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProgramImage mutation op: %q", m.Op())
	}
}

// ProgramVersionClient is a client for the ProgramVersion schema.
type ProgramVersionClient struct {
	config
}

// NewProgramVersionClient returns a client for the ProgramVersion from the given config.
func NewProgramVersionClient(c config) *ProgramVersionClient {
	return &ProgramVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `programversion.Hooks(f(g(h())))`.
func (c *ProgramVersionClient) Use(hooks ...Hook) {
	c.hooks.ProgramVersion = append(c.hooks.ProgramVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `programversion.Intercept(f(g(h())))`.
func (c *ProgramVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProgramVersion = append(c.inters.ProgramVersion, interceptors...)
}

// Create returns a builder for creating a ProgramVersion entity.
func (c *ProgramVersionClient) Create() *ProgramVersionCreate {
	mutation := newProgramVersionMutation(c.config, OpCreate)
	return &ProgramVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProgramVersion entities.
func (c *ProgramVersionClient) CreateBulk(builders ...*ProgramVersionCreate) *ProgramVersionCreateBulk {
	return &ProgramVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProgramVersion.
func (c *ProgramVersionClient) Update() *ProgramVersionUpdate {
	mutation := newProgramVersionMutation(c.config, OpUpdate)
	return &ProgramVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProgramVersionClient) UpdateOne(pv *ProgramVersion) *ProgramVersionUpdateOne {
	mutation := newProgramVersionMutation(c.config, OpUpdateOne, withProgramVersion(pv))
	return &ProgramVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProgramVersionClient) UpdateOneID(id uint64) *ProgramVersionUpdateOne {
	mutation := newProgramVersionMutation(c.config, OpUpdateOne, withProgramVersionID(id))
	return &ProgramVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProgramVersion.
func (c *ProgramVersionClient) Delete() *ProgramVersionDelete {
	mutation := newProgramVersionMutation(c.config, OpDelete)
	return &ProgramVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProgramVersionClient) DeleteOne(pv *ProgramVersion) *ProgramVersionDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProgramVersionClient) DeleteOneID(id uint64) *ProgramVersionDeleteOne {
	builder := c.Delete().Where(programversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProgramVersionDeleteOne{builder}
}

// Query returns a query builder for ProgramVersion.
func (c *ProgramVersionClient) Query() *ProgramVersionQuery {
	return &ProgramVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProgramVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a ProgramVersion entity by its id.
func (c *ProgramVersionClient) Get(ctx context.Context, id uint64) (*ProgramVersion, error) {
	return c.Query().Where(programversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProgramVersionClient) GetX(ctx context.Context, id uint64) *ProgramVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgram queries the program edge of a ProgramVersion.
func (c *ProgramVersionClient) QueryProgram(pv *ProgramVersion) *ProgramQuery {
	query := (&ProgramClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programversion.Table, programversion.FieldID, id),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, programversion.ProgramTable, programversion.ProgramColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a ProgramVersion.
func (c *ProgramVersionClient) QueryImages(pv *ProgramVersion) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programversion.Table, programversion.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, programversion.ImagesTable, programversion.ImagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDailyRoutines queries the daily_routines edge of a ProgramVersion.
func (c *ProgramVersionClient) QueryDailyRoutines(pv *ProgramVersion) *DailyRoutineQuery {
	query := (&DailyRoutineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programversion.Table, programversion.FieldID, id),
			sqlgraph.To(dailyroutine.Table, dailyroutine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, programversion.DailyRoutinesTable, programversion.DailyRoutinesColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgramImages queries the program_images edge of a ProgramVersion.
func (c *ProgramVersionClient) QueryProgramImages(pv *ProgramVersion) *ProgramImageQuery {
	query := (&ProgramImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programversion.Table, programversion.FieldID, id),
			sqlgraph.To(programimage.Table, programimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, programversion.ProgramImagesTable, programversion.ProgramImagesColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProgramVersionClient) Hooks() []Hook {
	return c.hooks.ProgramVersion
}

// Interceptors returns the client interceptors.
func (c *ProgramVersionClient) Interceptors() []Interceptor {
	return c.inters.ProgramVersion
}

func (c *ProgramVersionClient) mutate(ctx context.Context, m *ProgramVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProgramVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProgramVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProgramVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProgramVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProgramVersion mutation op: %q", m.Op())
	}
}

// RoutineActClient is a client for the RoutineAct schema.
type RoutineActClient struct {
	config
}

// NewRoutineActClient returns a client for the RoutineAct from the given config.
func NewRoutineActClient(c config) *RoutineActClient {
	return &RoutineActClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `routineact.Hooks(f(g(h())))`.
func (c *RoutineActClient) Use(hooks ...Hook) {
	c.hooks.RoutineAct = append(c.hooks.RoutineAct, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `routineact.Intercept(f(g(h())))`.
func (c *RoutineActClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoutineAct = append(c.inters.RoutineAct, interceptors...)
}

// Create returns a builder for creating a RoutineAct entity.
func (c *RoutineActClient) Create() *RoutineActCreate {
	mutation := newRoutineActMutation(c.config, OpCreate)
	return &RoutineActCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoutineAct entities.
func (c *RoutineActClient) CreateBulk(builders ...*RoutineActCreate) *RoutineActCreateBulk {
	return &RoutineActCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoutineAct.
func (c *RoutineActClient) Update() *RoutineActUpdate {
	mutation := newRoutineActMutation(c.config, OpUpdate)
	return &RoutineActUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoutineActClient) UpdateOne(ra *RoutineAct) *RoutineActUpdateOne {
	mutation := newRoutineActMutation(c.config, OpUpdateOne, withRoutineAct(ra))
	return &RoutineActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoutineActClient) UpdateOneID(id uint64) *RoutineActUpdateOne {
	mutation := newRoutineActMutation(c.config, OpUpdateOne, withRoutineActID(id))
	return &RoutineActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoutineAct.
func (c *RoutineActClient) Delete() *RoutineActDelete {
	mutation := newRoutineActMutation(c.config, OpDelete)
	return &RoutineActDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoutineActClient) DeleteOne(ra *RoutineAct) *RoutineActDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoutineActClient) DeleteOneID(id uint64) *RoutineActDeleteOne {
	builder := c.Delete().Where(routineact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoutineActDeleteOne{builder}
}

// Query returns a query builder for RoutineAct.
func (c *RoutineActClient) Query() *RoutineActQuery {
	return &RoutineActQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoutineAct},
		inters: c.Interceptors(),
	}
}

// Get returns a RoutineAct entity by its id.
func (c *RoutineActClient) Get(ctx context.Context, id uint64) (*RoutineAct, error) {
	return c.Query().Where(routineact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoutineActClient) GetX(ctx context.Context, id uint64) *RoutineAct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDailyRoutine queries the daily_routine edge of a RoutineAct.
func (c *RoutineActClient) QueryDailyRoutine(ra *RoutineAct) *DailyRoutineQuery {
	query := (&DailyRoutineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(routineact.Table, routineact.FieldID, id),
			sqlgraph.To(dailyroutine.Table, dailyroutine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, routineact.DailyRoutineTable, routineact.DailyRoutineColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoutineActClient) Hooks() []Hook {
	return c.hooks.RoutineAct
}

// Interceptors returns the client interceptors.
func (c *RoutineActClient) Interceptors() []Interceptor {
	return c.inters.RoutineAct
}

func (c *RoutineActClient) mutate(ctx context.Context, m *RoutineActMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoutineActCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoutineActUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoutineActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoutineActDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoutineAct mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Act, ActImage, ActVersion, DailyRoutine, Image, Program, ProgramImage,
		ProgramVersion, RoutineAct []ent.Hook
	}
	inters struct {
		Act, ActImage, ActVersion, DailyRoutine, Image, Program, ProgramImage,
		ProgramVersion, RoutineAct []ent.Interceptor
	}
)

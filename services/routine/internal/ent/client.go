// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"routine/internal/ent/migrate"

	"routine/internal/ent/act"
	"routine/internal/ent/dayroutine"
	"routine/internal/ent/program"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/routineact"
	"routine/internal/ent/s3actimage"
	"routine/internal/ent/s3image"
	"routine/internal/ent/s3programimage"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Act is the client for interacting with the Act builders.
	Act *ActClient
	// DayRoutine is the client for interacting with the DayRoutine builders.
	DayRoutine *DayRoutineClient
	// Program is the client for interacting with the Program builders.
	Program *ProgramClient
	// ProgramRelease is the client for interacting with the ProgramRelease builders.
	ProgramRelease *ProgramReleaseClient
	// RoutineAct is the client for interacting with the RoutineAct builders.
	RoutineAct *RoutineActClient
	// S3ActImage is the client for interacting with the S3ActImage builders.
	S3ActImage *S3ActImageClient
	// S3Image is the client for interacting with the S3Image builders.
	S3Image *S3ImageClient
	// S3ProgramImage is the client for interacting with the S3ProgramImage builders.
	S3ProgramImage *S3ProgramImageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Act = NewActClient(c.config)
	c.DayRoutine = NewDayRoutineClient(c.config)
	c.Program = NewProgramClient(c.config)
	c.ProgramRelease = NewProgramReleaseClient(c.config)
	c.RoutineAct = NewRoutineActClient(c.config)
	c.S3ActImage = NewS3ActImageClient(c.config)
	c.S3Image = NewS3ImageClient(c.config)
	c.S3ProgramImage = NewS3ProgramImageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Act:            NewActClient(cfg),
		DayRoutine:     NewDayRoutineClient(cfg),
		Program:        NewProgramClient(cfg),
		ProgramRelease: NewProgramReleaseClient(cfg),
		RoutineAct:     NewRoutineActClient(cfg),
		S3ActImage:     NewS3ActImageClient(cfg),
		S3Image:        NewS3ImageClient(cfg),
		S3ProgramImage: NewS3ProgramImageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Act:            NewActClient(cfg),
		DayRoutine:     NewDayRoutineClient(cfg),
		Program:        NewProgramClient(cfg),
		ProgramRelease: NewProgramReleaseClient(cfg),
		RoutineAct:     NewRoutineActClient(cfg),
		S3ActImage:     NewS3ActImageClient(cfg),
		S3Image:        NewS3ImageClient(cfg),
		S3ProgramImage: NewS3ProgramImageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Act.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Act, c.DayRoutine, c.Program, c.ProgramRelease, c.RoutineAct, c.S3ActImage,
		c.S3Image, c.S3ProgramImage,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Act, c.DayRoutine, c.Program, c.ProgramRelease, c.RoutineAct, c.S3ActImage,
		c.S3Image, c.S3ProgramImage,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActMutation:
		return c.Act.mutate(ctx, m)
	case *DayRoutineMutation:
		return c.DayRoutine.mutate(ctx, m)
	case *ProgramMutation:
		return c.Program.mutate(ctx, m)
	case *ProgramReleaseMutation:
		return c.ProgramRelease.mutate(ctx, m)
	case *RoutineActMutation:
		return c.RoutineAct.mutate(ctx, m)
	case *S3ActImageMutation:
		return c.S3ActImage.mutate(ctx, m)
	case *S3ImageMutation:
		return c.S3Image.mutate(ctx, m)
	case *S3ProgramImageMutation:
		return c.S3ProgramImage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActClient is a client for the Act schema.
type ActClient struct {
	config
}

// NewActClient returns a client for the Act from the given config.
func NewActClient(c config) *ActClient {
	return &ActClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `act.Hooks(f(g(h())))`.
func (c *ActClient) Use(hooks ...Hook) {
	c.hooks.Act = append(c.hooks.Act, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `act.Intercept(f(g(h())))`.
func (c *ActClient) Intercept(interceptors ...Interceptor) {
	c.inters.Act = append(c.inters.Act, interceptors...)
}

// Create returns a builder for creating a Act entity.
func (c *ActClient) Create() *ActCreate {
	mutation := newActMutation(c.config, OpCreate)
	return &ActCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Act entities.
func (c *ActClient) CreateBulk(builders ...*ActCreate) *ActCreateBulk {
	return &ActCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Act.
func (c *ActClient) Update() *ActUpdate {
	mutation := newActMutation(c.config, OpUpdate)
	return &ActUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActClient) UpdateOne(a *Act) *ActUpdateOne {
	mutation := newActMutation(c.config, OpUpdateOne, withAct(a))
	return &ActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActClient) UpdateOneID(id int64) *ActUpdateOne {
	mutation := newActMutation(c.config, OpUpdateOne, withActID(id))
	return &ActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Act.
func (c *ActClient) Delete() *ActDelete {
	mutation := newActMutation(c.config, OpDelete)
	return &ActDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActClient) DeleteOne(a *Act) *ActDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActClient) DeleteOneID(id int64) *ActDeleteOne {
	builder := c.Delete().Where(act.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActDeleteOne{builder}
}

// Query returns a query builder for Act.
func (c *ActClient) Query() *ActQuery {
	return &ActQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAct},
		inters: c.Interceptors(),
	}
}

// Get returns a Act entity by its id.
func (c *ActClient) Get(ctx context.Context, id int64) (*Act, error) {
	return c.Query().Where(act.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActClient) GetX(ctx context.Context, id int64) *Act {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryS3ActImages queries the s3_act_images edge of a Act.
func (c *ActClient) QueryS3ActImages(a *Act) *S3ActImageQuery {
	query := (&S3ActImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(act.Table, act.FieldID, id),
			sqlgraph.To(s3actimage.Table, s3actimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, act.S3ActImagesTable, act.S3ActImagesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoutineActs queries the routine_acts edge of a Act.
func (c *ActClient) QueryRoutineActs(a *Act) *RoutineActQuery {
	query := (&RoutineActClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(act.Table, act.FieldID, id),
			sqlgraph.To(routineact.Table, routineact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, act.RoutineActsTable, act.RoutineActsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActClient) Hooks() []Hook {
	return c.hooks.Act
}

// Interceptors returns the client interceptors.
func (c *ActClient) Interceptors() []Interceptor {
	return c.inters.Act
}

func (c *ActClient) mutate(ctx context.Context, m *ActMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Act mutation op: %q", m.Op())
	}
}

// DayRoutineClient is a client for the DayRoutine schema.
type DayRoutineClient struct {
	config
}

// NewDayRoutineClient returns a client for the DayRoutine from the given config.
func NewDayRoutineClient(c config) *DayRoutineClient {
	return &DayRoutineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dayroutine.Hooks(f(g(h())))`.
func (c *DayRoutineClient) Use(hooks ...Hook) {
	c.hooks.DayRoutine = append(c.hooks.DayRoutine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dayroutine.Intercept(f(g(h())))`.
func (c *DayRoutineClient) Intercept(interceptors ...Interceptor) {
	c.inters.DayRoutine = append(c.inters.DayRoutine, interceptors...)
}

// Create returns a builder for creating a DayRoutine entity.
func (c *DayRoutineClient) Create() *DayRoutineCreate {
	mutation := newDayRoutineMutation(c.config, OpCreate)
	return &DayRoutineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DayRoutine entities.
func (c *DayRoutineClient) CreateBulk(builders ...*DayRoutineCreate) *DayRoutineCreateBulk {
	return &DayRoutineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DayRoutine.
func (c *DayRoutineClient) Update() *DayRoutineUpdate {
	mutation := newDayRoutineMutation(c.config, OpUpdate)
	return &DayRoutineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DayRoutineClient) UpdateOne(dr *DayRoutine) *DayRoutineUpdateOne {
	mutation := newDayRoutineMutation(c.config, OpUpdateOne, withDayRoutine(dr))
	return &DayRoutineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DayRoutineClient) UpdateOneID(id int64) *DayRoutineUpdateOne {
	mutation := newDayRoutineMutation(c.config, OpUpdateOne, withDayRoutineID(id))
	return &DayRoutineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DayRoutine.
func (c *DayRoutineClient) Delete() *DayRoutineDelete {
	mutation := newDayRoutineMutation(c.config, OpDelete)
	return &DayRoutineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DayRoutineClient) DeleteOne(dr *DayRoutine) *DayRoutineDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DayRoutineClient) DeleteOneID(id int64) *DayRoutineDeleteOne {
	builder := c.Delete().Where(dayroutine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DayRoutineDeleteOne{builder}
}

// Query returns a query builder for DayRoutine.
func (c *DayRoutineClient) Query() *DayRoutineQuery {
	return &DayRoutineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDayRoutine},
		inters: c.Interceptors(),
	}
}

// Get returns a DayRoutine entity by its id.
func (c *DayRoutineClient) Get(ctx context.Context, id int64) (*DayRoutine, error) {
	return c.Query().Where(dayroutine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DayRoutineClient) GetX(ctx context.Context, id int64) *DayRoutine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoutineActs queries the routine_acts edge of a DayRoutine.
func (c *DayRoutineClient) QueryRoutineActs(dr *DayRoutine) *RoutineActQuery {
	query := (&RoutineActClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dayroutine.Table, dayroutine.FieldID, id),
			sqlgraph.To(routineact.Table, routineact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dayroutine.RoutineActsTable, dayroutine.RoutineActsColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DayRoutineClient) Hooks() []Hook {
	return c.hooks.DayRoutine
}

// Interceptors returns the client interceptors.
func (c *DayRoutineClient) Interceptors() []Interceptor {
	return c.inters.DayRoutine
}

func (c *DayRoutineClient) mutate(ctx context.Context, m *DayRoutineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DayRoutineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DayRoutineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DayRoutineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DayRoutineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DayRoutine mutation op: %q", m.Op())
	}
}

// ProgramClient is a client for the Program schema.
type ProgramClient struct {
	config
}

// NewProgramClient returns a client for the Program from the given config.
func NewProgramClient(c config) *ProgramClient {
	return &ProgramClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `program.Hooks(f(g(h())))`.
func (c *ProgramClient) Use(hooks ...Hook) {
	c.hooks.Program = append(c.hooks.Program, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `program.Intercept(f(g(h())))`.
func (c *ProgramClient) Intercept(interceptors ...Interceptor) {
	c.inters.Program = append(c.inters.Program, interceptors...)
}

// Create returns a builder for creating a Program entity.
func (c *ProgramClient) Create() *ProgramCreate {
	mutation := newProgramMutation(c.config, OpCreate)
	return &ProgramCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Program entities.
func (c *ProgramClient) CreateBulk(builders ...*ProgramCreate) *ProgramCreateBulk {
	return &ProgramCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Program.
func (c *ProgramClient) Update() *ProgramUpdate {
	mutation := newProgramMutation(c.config, OpUpdate)
	return &ProgramUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProgramClient) UpdateOne(pr *Program) *ProgramUpdateOne {
	mutation := newProgramMutation(c.config, OpUpdateOne, withProgram(pr))
	return &ProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProgramClient) UpdateOneID(id int64) *ProgramUpdateOne {
	mutation := newProgramMutation(c.config, OpUpdateOne, withProgramID(id))
	return &ProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Program.
func (c *ProgramClient) Delete() *ProgramDelete {
	mutation := newProgramMutation(c.config, OpDelete)
	return &ProgramDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProgramClient) DeleteOne(pr *Program) *ProgramDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProgramClient) DeleteOneID(id int64) *ProgramDeleteOne {
	builder := c.Delete().Where(program.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProgramDeleteOne{builder}
}

// Query returns a query builder for Program.
func (c *ProgramClient) Query() *ProgramQuery {
	return &ProgramQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProgram},
		inters: c.Interceptors(),
	}
}

// Get returns a Program entity by its id.
func (c *ProgramClient) Get(ctx context.Context, id int64) (*Program, error) {
	return c.Query().Where(program.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProgramClient) GetX(ctx context.Context, id int64) *Program {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgramReleases queries the program_releases edge of a Program.
func (c *ProgramClient) QueryProgramReleases(pr *Program) *ProgramReleaseQuery {
	query := (&ProgramReleaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, id),
			sqlgraph.To(programrelease.Table, programrelease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.ProgramReleasesTable, program.ProgramReleasesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProgramClient) Hooks() []Hook {
	return c.hooks.Program
}

// Interceptors returns the client interceptors.
func (c *ProgramClient) Interceptors() []Interceptor {
	return c.inters.Program
}

func (c *ProgramClient) mutate(ctx context.Context, m *ProgramMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProgramCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProgramUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProgramDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Program mutation op: %q", m.Op())
	}
}

// ProgramReleaseClient is a client for the ProgramRelease schema.
type ProgramReleaseClient struct {
	config
}

// NewProgramReleaseClient returns a client for the ProgramRelease from the given config.
func NewProgramReleaseClient(c config) *ProgramReleaseClient {
	return &ProgramReleaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `programrelease.Hooks(f(g(h())))`.
func (c *ProgramReleaseClient) Use(hooks ...Hook) {
	c.hooks.ProgramRelease = append(c.hooks.ProgramRelease, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `programrelease.Intercept(f(g(h())))`.
func (c *ProgramReleaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProgramRelease = append(c.inters.ProgramRelease, interceptors...)
}

// Create returns a builder for creating a ProgramRelease entity.
func (c *ProgramReleaseClient) Create() *ProgramReleaseCreate {
	mutation := newProgramReleaseMutation(c.config, OpCreate)
	return &ProgramReleaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProgramRelease entities.
func (c *ProgramReleaseClient) CreateBulk(builders ...*ProgramReleaseCreate) *ProgramReleaseCreateBulk {
	return &ProgramReleaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProgramRelease.
func (c *ProgramReleaseClient) Update() *ProgramReleaseUpdate {
	mutation := newProgramReleaseMutation(c.config, OpUpdate)
	return &ProgramReleaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProgramReleaseClient) UpdateOne(pr *ProgramRelease) *ProgramReleaseUpdateOne {
	mutation := newProgramReleaseMutation(c.config, OpUpdateOne, withProgramRelease(pr))
	return &ProgramReleaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProgramReleaseClient) UpdateOneID(id int64) *ProgramReleaseUpdateOne {
	mutation := newProgramReleaseMutation(c.config, OpUpdateOne, withProgramReleaseID(id))
	return &ProgramReleaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProgramRelease.
func (c *ProgramReleaseClient) Delete() *ProgramReleaseDelete {
	mutation := newProgramReleaseMutation(c.config, OpDelete)
	return &ProgramReleaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProgramReleaseClient) DeleteOne(pr *ProgramRelease) *ProgramReleaseDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProgramReleaseClient) DeleteOneID(id int64) *ProgramReleaseDeleteOne {
	builder := c.Delete().Where(programrelease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProgramReleaseDeleteOne{builder}
}

// Query returns a query builder for ProgramRelease.
func (c *ProgramReleaseClient) Query() *ProgramReleaseQuery {
	return &ProgramReleaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProgramRelease},
		inters: c.Interceptors(),
	}
}

// Get returns a ProgramRelease entity by its id.
func (c *ProgramReleaseClient) Get(ctx context.Context, id int64) (*ProgramRelease, error) {
	return c.Query().Where(programrelease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProgramReleaseClient) GetX(ctx context.Context, id int64) *ProgramRelease {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgram queries the program edge of a ProgramRelease.
func (c *ProgramReleaseClient) QueryProgram(pr *ProgramRelease) *ProgramQuery {
	query := (&ProgramClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programrelease.Table, programrelease.FieldID, id),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, programrelease.ProgramTable, programrelease.ProgramColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryS3ProgramImages queries the s3_program_images edge of a ProgramRelease.
func (c *ProgramReleaseClient) QueryS3ProgramImages(pr *ProgramRelease) *S3ProgramImageQuery {
	query := (&S3ProgramImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programrelease.Table, programrelease.FieldID, id),
			sqlgraph.To(s3programimage.Table, s3programimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, programrelease.S3ProgramImagesTable, programrelease.S3ProgramImagesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDayRoutines queries the day_routines edge of a ProgramRelease.
func (c *ProgramReleaseClient) QueryDayRoutines(pr *ProgramRelease) *DayRoutineQuery {
	query := (&DayRoutineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(programrelease.Table, programrelease.FieldID, id),
			sqlgraph.To(dayroutine.Table, dayroutine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, programrelease.DayRoutinesTable, programrelease.DayRoutinesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProgramReleaseClient) Hooks() []Hook {
	return c.hooks.ProgramRelease
}

// Interceptors returns the client interceptors.
func (c *ProgramReleaseClient) Interceptors() []Interceptor {
	return c.inters.ProgramRelease
}

func (c *ProgramReleaseClient) mutate(ctx context.Context, m *ProgramReleaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProgramReleaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProgramReleaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProgramReleaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProgramReleaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProgramRelease mutation op: %q", m.Op())
	}
}

// RoutineActClient is a client for the RoutineAct schema.
type RoutineActClient struct {
	config
}

// NewRoutineActClient returns a client for the RoutineAct from the given config.
func NewRoutineActClient(c config) *RoutineActClient {
	return &RoutineActClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `routineact.Hooks(f(g(h())))`.
func (c *RoutineActClient) Use(hooks ...Hook) {
	c.hooks.RoutineAct = append(c.hooks.RoutineAct, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `routineact.Intercept(f(g(h())))`.
func (c *RoutineActClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoutineAct = append(c.inters.RoutineAct, interceptors...)
}

// Create returns a builder for creating a RoutineAct entity.
func (c *RoutineActClient) Create() *RoutineActCreate {
	mutation := newRoutineActMutation(c.config, OpCreate)
	return &RoutineActCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoutineAct entities.
func (c *RoutineActClient) CreateBulk(builders ...*RoutineActCreate) *RoutineActCreateBulk {
	return &RoutineActCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoutineAct.
func (c *RoutineActClient) Update() *RoutineActUpdate {
	mutation := newRoutineActMutation(c.config, OpUpdate)
	return &RoutineActUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoutineActClient) UpdateOne(ra *RoutineAct) *RoutineActUpdateOne {
	mutation := newRoutineActMutation(c.config, OpUpdateOne, withRoutineAct(ra))
	return &RoutineActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoutineActClient) UpdateOneID(id int64) *RoutineActUpdateOne {
	mutation := newRoutineActMutation(c.config, OpUpdateOne, withRoutineActID(id))
	return &RoutineActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoutineAct.
func (c *RoutineActClient) Delete() *RoutineActDelete {
	mutation := newRoutineActMutation(c.config, OpDelete)
	return &RoutineActDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoutineActClient) DeleteOne(ra *RoutineAct) *RoutineActDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoutineActClient) DeleteOneID(id int64) *RoutineActDeleteOne {
	builder := c.Delete().Where(routineact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoutineActDeleteOne{builder}
}

// Query returns a query builder for RoutineAct.
func (c *RoutineActClient) Query() *RoutineActQuery {
	return &RoutineActQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoutineAct},
		inters: c.Interceptors(),
	}
}

// Get returns a RoutineAct entity by its id.
func (c *RoutineActClient) Get(ctx context.Context, id int64) (*RoutineAct, error) {
	return c.Query().Where(routineact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoutineActClient) GetX(ctx context.Context, id int64) *RoutineAct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAct queries the act edge of a RoutineAct.
func (c *RoutineActClient) QueryAct(ra *RoutineAct) *ActQuery {
	query := (&ActClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(routineact.Table, routineact.FieldID, id),
			sqlgraph.To(act.Table, act.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, routineact.ActTable, routineact.ActColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDayRoutine queries the day_routine edge of a RoutineAct.
func (c *RoutineActClient) QueryDayRoutine(ra *RoutineAct) *DayRoutineQuery {
	query := (&DayRoutineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(routineact.Table, routineact.FieldID, id),
			sqlgraph.To(dayroutine.Table, dayroutine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, routineact.DayRoutineTable, routineact.DayRoutineColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoutineActClient) Hooks() []Hook {
	return c.hooks.RoutineAct
}

// Interceptors returns the client interceptors.
func (c *RoutineActClient) Interceptors() []Interceptor {
	return c.inters.RoutineAct
}

func (c *RoutineActClient) mutate(ctx context.Context, m *RoutineActMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoutineActCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoutineActUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoutineActUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoutineActDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoutineAct mutation op: %q", m.Op())
	}
}

// S3ActImageClient is a client for the S3ActImage schema.
type S3ActImageClient struct {
	config
}

// NewS3ActImageClient returns a client for the S3ActImage from the given config.
func NewS3ActImageClient(c config) *S3ActImageClient {
	return &S3ActImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `s3actimage.Hooks(f(g(h())))`.
func (c *S3ActImageClient) Use(hooks ...Hook) {
	c.hooks.S3ActImage = append(c.hooks.S3ActImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `s3actimage.Intercept(f(g(h())))`.
func (c *S3ActImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.S3ActImage = append(c.inters.S3ActImage, interceptors...)
}

// Create returns a builder for creating a S3ActImage entity.
func (c *S3ActImageClient) Create() *S3ActImageCreate {
	mutation := newS3ActImageMutation(c.config, OpCreate)
	return &S3ActImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of S3ActImage entities.
func (c *S3ActImageClient) CreateBulk(builders ...*S3ActImageCreate) *S3ActImageCreateBulk {
	return &S3ActImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for S3ActImage.
func (c *S3ActImageClient) Update() *S3ActImageUpdate {
	mutation := newS3ActImageMutation(c.config, OpUpdate)
	return &S3ActImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *S3ActImageClient) UpdateOne(si *S3ActImage) *S3ActImageUpdateOne {
	mutation := newS3ActImageMutation(c.config, OpUpdateOne, withS3ActImage(si))
	return &S3ActImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *S3ActImageClient) UpdateOneID(id int64) *S3ActImageUpdateOne {
	mutation := newS3ActImageMutation(c.config, OpUpdateOne, withS3ActImageID(id))
	return &S3ActImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for S3ActImage.
func (c *S3ActImageClient) Delete() *S3ActImageDelete {
	mutation := newS3ActImageMutation(c.config, OpDelete)
	return &S3ActImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *S3ActImageClient) DeleteOne(si *S3ActImage) *S3ActImageDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *S3ActImageClient) DeleteOneID(id int64) *S3ActImageDeleteOne {
	builder := c.Delete().Where(s3actimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &S3ActImageDeleteOne{builder}
}

// Query returns a query builder for S3ActImage.
func (c *S3ActImageClient) Query() *S3ActImageQuery {
	return &S3ActImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeS3ActImage},
		inters: c.Interceptors(),
	}
}

// Get returns a S3ActImage entity by its id.
func (c *S3ActImageClient) Get(ctx context.Context, id int64) (*S3ActImage, error) {
	return c.Query().Where(s3actimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *S3ActImageClient) GetX(ctx context.Context, id int64) *S3ActImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAct queries the act edge of a S3ActImage.
func (c *S3ActImageClient) QueryAct(si *S3ActImage) *ActQuery {
	query := (&ActClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(s3actimage.Table, s3actimage.FieldID, id),
			sqlgraph.To(act.Table, act.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, s3actimage.ActTable, s3actimage.ActColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryS3Image queries the s3_image edge of a S3ActImage.
func (c *S3ActImageClient) QueryS3Image(si *S3ActImage) *S3ImageQuery {
	query := (&S3ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(s3actimage.Table, s3actimage.FieldID, id),
			sqlgraph.To(s3image.Table, s3image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, s3actimage.S3ImageTable, s3actimage.S3ImageColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *S3ActImageClient) Hooks() []Hook {
	return c.hooks.S3ActImage
}

// Interceptors returns the client interceptors.
func (c *S3ActImageClient) Interceptors() []Interceptor {
	return c.inters.S3ActImage
}

func (c *S3ActImageClient) mutate(ctx context.Context, m *S3ActImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&S3ActImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&S3ActImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&S3ActImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&S3ActImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown S3ActImage mutation op: %q", m.Op())
	}
}

// S3ImageClient is a client for the S3Image schema.
type S3ImageClient struct {
	config
}

// NewS3ImageClient returns a client for the S3Image from the given config.
func NewS3ImageClient(c config) *S3ImageClient {
	return &S3ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `s3image.Hooks(f(g(h())))`.
func (c *S3ImageClient) Use(hooks ...Hook) {
	c.hooks.S3Image = append(c.hooks.S3Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `s3image.Intercept(f(g(h())))`.
func (c *S3ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.S3Image = append(c.inters.S3Image, interceptors...)
}

// Create returns a builder for creating a S3Image entity.
func (c *S3ImageClient) Create() *S3ImageCreate {
	mutation := newS3ImageMutation(c.config, OpCreate)
	return &S3ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of S3Image entities.
func (c *S3ImageClient) CreateBulk(builders ...*S3ImageCreate) *S3ImageCreateBulk {
	return &S3ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for S3Image.
func (c *S3ImageClient) Update() *S3ImageUpdate {
	mutation := newS3ImageMutation(c.config, OpUpdate)
	return &S3ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *S3ImageClient) UpdateOne(s *S3Image) *S3ImageUpdateOne {
	mutation := newS3ImageMutation(c.config, OpUpdateOne, withS3Image(s))
	return &S3ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *S3ImageClient) UpdateOneID(id int64) *S3ImageUpdateOne {
	mutation := newS3ImageMutation(c.config, OpUpdateOne, withS3ImageID(id))
	return &S3ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for S3Image.
func (c *S3ImageClient) Delete() *S3ImageDelete {
	mutation := newS3ImageMutation(c.config, OpDelete)
	return &S3ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *S3ImageClient) DeleteOne(s *S3Image) *S3ImageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *S3ImageClient) DeleteOneID(id int64) *S3ImageDeleteOne {
	builder := c.Delete().Where(s3image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &S3ImageDeleteOne{builder}
}

// Query returns a query builder for S3Image.
func (c *S3ImageClient) Query() *S3ImageQuery {
	return &S3ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeS3Image},
		inters: c.Interceptors(),
	}
}

// Get returns a S3Image entity by its id.
func (c *S3ImageClient) Get(ctx context.Context, id int64) (*S3Image, error) {
	return c.Query().Where(s3image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *S3ImageClient) GetX(ctx context.Context, id int64) *S3Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryS3ActImages queries the s3_act_images edge of a S3Image.
func (c *S3ImageClient) QueryS3ActImages(s *S3Image) *S3ActImageQuery {
	query := (&S3ActImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(s3image.Table, s3image.FieldID, id),
			sqlgraph.To(s3actimage.Table, s3actimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, s3image.S3ActImagesTable, s3image.S3ActImagesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *S3ImageClient) Hooks() []Hook {
	return c.hooks.S3Image
}

// Interceptors returns the client interceptors.
func (c *S3ImageClient) Interceptors() []Interceptor {
	return c.inters.S3Image
}

func (c *S3ImageClient) mutate(ctx context.Context, m *S3ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&S3ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&S3ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&S3ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&S3ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown S3Image mutation op: %q", m.Op())
	}
}

// S3ProgramImageClient is a client for the S3ProgramImage schema.
type S3ProgramImageClient struct {
	config
}

// NewS3ProgramImageClient returns a client for the S3ProgramImage from the given config.
func NewS3ProgramImageClient(c config) *S3ProgramImageClient {
	return &S3ProgramImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `s3programimage.Hooks(f(g(h())))`.
func (c *S3ProgramImageClient) Use(hooks ...Hook) {
	c.hooks.S3ProgramImage = append(c.hooks.S3ProgramImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `s3programimage.Intercept(f(g(h())))`.
func (c *S3ProgramImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.S3ProgramImage = append(c.inters.S3ProgramImage, interceptors...)
}

// Create returns a builder for creating a S3ProgramImage entity.
func (c *S3ProgramImageClient) Create() *S3ProgramImageCreate {
	mutation := newS3ProgramImageMutation(c.config, OpCreate)
	return &S3ProgramImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of S3ProgramImage entities.
func (c *S3ProgramImageClient) CreateBulk(builders ...*S3ProgramImageCreate) *S3ProgramImageCreateBulk {
	return &S3ProgramImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for S3ProgramImage.
func (c *S3ProgramImageClient) Update() *S3ProgramImageUpdate {
	mutation := newS3ProgramImageMutation(c.config, OpUpdate)
	return &S3ProgramImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *S3ProgramImageClient) UpdateOne(si *S3ProgramImage) *S3ProgramImageUpdateOne {
	mutation := newS3ProgramImageMutation(c.config, OpUpdateOne, withS3ProgramImage(si))
	return &S3ProgramImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *S3ProgramImageClient) UpdateOneID(id int64) *S3ProgramImageUpdateOne {
	mutation := newS3ProgramImageMutation(c.config, OpUpdateOne, withS3ProgramImageID(id))
	return &S3ProgramImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for S3ProgramImage.
func (c *S3ProgramImageClient) Delete() *S3ProgramImageDelete {
	mutation := newS3ProgramImageMutation(c.config, OpDelete)
	return &S3ProgramImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *S3ProgramImageClient) DeleteOne(si *S3ProgramImage) *S3ProgramImageDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *S3ProgramImageClient) DeleteOneID(id int64) *S3ProgramImageDeleteOne {
	builder := c.Delete().Where(s3programimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &S3ProgramImageDeleteOne{builder}
}

// Query returns a query builder for S3ProgramImage.
func (c *S3ProgramImageClient) Query() *S3ProgramImageQuery {
	return &S3ProgramImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeS3ProgramImage},
		inters: c.Interceptors(),
	}
}

// Get returns a S3ProgramImage entity by its id.
func (c *S3ProgramImageClient) Get(ctx context.Context, id int64) (*S3ProgramImage, error) {
	return c.Query().Where(s3programimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *S3ProgramImageClient) GetX(ctx context.Context, id int64) *S3ProgramImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgramRelease queries the program_release edge of a S3ProgramImage.
func (c *S3ProgramImageClient) QueryProgramRelease(si *S3ProgramImage) *ProgramReleaseQuery {
	query := (&ProgramReleaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(s3programimage.Table, s3programimage.FieldID, id),
			sqlgraph.To(programrelease.Table, programrelease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, s3programimage.ProgramReleaseTable, s3programimage.ProgramReleaseColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryS3Image queries the s3_image edge of a S3ProgramImage.
func (c *S3ProgramImageClient) QueryS3Image(si *S3ProgramImage) *S3ImageQuery {
	query := (&S3ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(s3programimage.Table, s3programimage.FieldID, id),
			sqlgraph.To(s3image.Table, s3image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, s3programimage.S3ImageTable, s3programimage.S3ImageColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *S3ProgramImageClient) Hooks() []Hook {
	return c.hooks.S3ProgramImage
}

// Interceptors returns the client interceptors.
func (c *S3ProgramImageClient) Interceptors() []Interceptor {
	return c.inters.S3ProgramImage
}

func (c *S3ProgramImageClient) mutate(ctx context.Context, m *S3ProgramImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&S3ProgramImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&S3ProgramImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&S3ProgramImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&S3ProgramImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown S3ProgramImage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Act, DayRoutine, Program, ProgramRelease, RoutineAct, S3ActImage, S3Image,
		S3ProgramImage []ent.Hook
	}
	inters struct {
		Act, DayRoutine, Program, ProgramRelease, RoutineAct, S3ActImage, S3Image,
		S3ProgramImage []ent.Interceptor
	}
)

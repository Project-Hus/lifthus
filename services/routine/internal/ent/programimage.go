// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/image"
	"routine/internal/ent/programimage"
	"routine/internal/ent/programversion"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProgramImage is the model entity for the ProgramImage schema.
type ProgramImage struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order uint `json:"order,omitempty"`
	// ProgramVersionID holds the value of the "program_version_id" field.
	ProgramVersionID uint64 `json:"program_version_id,omitempty"`
	// ImageID holds the value of the "image_id" field.
	ImageID uint64 `json:"image_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramImageQuery when eager-loading is set.
	Edges        ProgramImageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProgramImageEdges holds the relations/edges for other nodes in the graph.
type ProgramImageEdges struct {
	// ProgramVersion holds the value of the program_version edge.
	ProgramVersion *ProgramVersion `json:"program_version,omitempty"`
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProgramVersionOrErr returns the ProgramVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramImageEdges) ProgramVersionOrErr() (*ProgramVersion, error) {
	if e.loadedTypes[0] {
		if e.ProgramVersion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: programversion.Label}
		}
		return e.ProgramVersion, nil
	}
	return nil, &NotLoadedError{edge: "program_version"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramImageEdges) ImageOrErr() (*Image, error) {
	if e.loadedTypes[1] {
		if e.Image == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programimage.FieldID, programimage.FieldOrder, programimage.FieldProgramVersionID, programimage.FieldImageID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramImage fields.
func (pi *ProgramImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = uint64(value.Int64)
		case programimage.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				pi.Order = uint(value.Int64)
			}
		case programimage.FieldProgramVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_version_id", values[i])
			} else if value.Valid {
				pi.ProgramVersionID = uint64(value.Int64)
			}
		case programimage.FieldImageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field image_id", values[i])
			} else if value.Valid {
				pi.ImageID = uint64(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramImage.
// This includes values selected through modifiers, order, etc.
func (pi *ProgramImage) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryProgramVersion queries the "program_version" edge of the ProgramImage entity.
func (pi *ProgramImage) QueryProgramVersion() *ProgramVersionQuery {
	return NewProgramImageClient(pi.config).QueryProgramVersion(pi)
}

// QueryImage queries the "image" edge of the ProgramImage entity.
func (pi *ProgramImage) QueryImage() *ImageQuery {
	return NewProgramImageClient(pi.config).QueryImage(pi)
}

// Update returns a builder for updating this ProgramImage.
// Note that you need to call ProgramImage.Unwrap() before calling this method if this ProgramImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProgramImage) Update() *ProgramImageUpdateOne {
	return NewProgramImageClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProgramImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProgramImage) Unwrap() *ProgramImage {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProgramImage is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProgramImage) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", pi.Order))
	builder.WriteString(", ")
	builder.WriteString("program_version_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.ProgramVersionID))
	builder.WriteString(", ")
	builder.WriteString("image_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.ImageID))
	builder.WriteByte(')')
	return builder.String()
}

// ProgramImages is a parsable slice of ProgramImage.
type ProgramImages []*ProgramImage

// Code generated by ent, DO NOT EDIT.

package s3image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the s3image type in the database.
	Label = "s3image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldSrc holds the string denoting the src field in the database.
	FieldSrc = "src"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeS3ActImages holds the string denoting the s3_act_images edge name in mutations.
	EdgeS3ActImages = "s3_act_images"
	// Table holds the table name of the s3image in the database.
	Table = "s3images"
	// S3ActImagesTable is the table that holds the s3_act_images relation/edge.
	S3ActImagesTable = "s3act_images"
	// S3ActImagesInverseTable is the table name for the S3ActImage entity.
	// It exists in this package in order to avoid circular dependency with the "s3actimage" package.
	S3ActImagesInverseTable = "s3act_images"
	// S3ActImagesColumn is the table column denoting the s3_act_images relation/edge.
	S3ActImagesColumn = "image_id"
)

// Columns holds all SQL columns for s3image fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldSrc,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the S3Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// BySrc orders the results by the src field.
func BySrc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSrc, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByS3ActImagesCount orders the results by s3_act_images count.
func ByS3ActImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newS3ActImagesStep(), opts...)
	}
}

// ByS3ActImages orders the results by s3_act_images terms.
func ByS3ActImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newS3ActImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newS3ActImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(S3ActImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, S3ActImagesTable, S3ActImagesColumn),
	)
}

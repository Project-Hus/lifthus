// Code generated by ent, DO NOT EDIT.

package s3image

import (
	"routine/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.S3Image {
	return predicate.S3Image(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldKey, v))
}

// Src applies equality check predicate on the "src" field. It's identical to SrcEQ.
func Src(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldSrc, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldCreatedAt, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.S3Image {
	return predicate.S3Image(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.S3Image {
	return predicate.S3Image(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldContainsFold(FieldKey, v))
}

// SrcEQ applies the EQ predicate on the "src" field.
func SrcEQ(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldSrc, v))
}

// SrcNEQ applies the NEQ predicate on the "src" field.
func SrcNEQ(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldNEQ(FieldSrc, v))
}

// SrcIn applies the In predicate on the "src" field.
func SrcIn(vs ...string) predicate.S3Image {
	return predicate.S3Image(sql.FieldIn(FieldSrc, vs...))
}

// SrcNotIn applies the NotIn predicate on the "src" field.
func SrcNotIn(vs ...string) predicate.S3Image {
	return predicate.S3Image(sql.FieldNotIn(FieldSrc, vs...))
}

// SrcGT applies the GT predicate on the "src" field.
func SrcGT(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldGT(FieldSrc, v))
}

// SrcGTE applies the GTE predicate on the "src" field.
func SrcGTE(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldGTE(FieldSrc, v))
}

// SrcLT applies the LT predicate on the "src" field.
func SrcLT(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldLT(FieldSrc, v))
}

// SrcLTE applies the LTE predicate on the "src" field.
func SrcLTE(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldLTE(FieldSrc, v))
}

// SrcContains applies the Contains predicate on the "src" field.
func SrcContains(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldContains(FieldSrc, v))
}

// SrcHasPrefix applies the HasPrefix predicate on the "src" field.
func SrcHasPrefix(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldHasPrefix(FieldSrc, v))
}

// SrcHasSuffix applies the HasSuffix predicate on the "src" field.
func SrcHasSuffix(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldHasSuffix(FieldSrc, v))
}

// SrcEqualFold applies the EqualFold predicate on the "src" field.
func SrcEqualFold(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldEqualFold(FieldSrc, v))
}

// SrcContainsFold applies the ContainsFold predicate on the "src" field.
func SrcContainsFold(v string) predicate.S3Image {
	return predicate.S3Image(sql.FieldContainsFold(FieldSrc, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.S3Image {
	return predicate.S3Image(sql.FieldLTE(FieldCreatedAt, v))
}

// HasS3ActImages applies the HasEdge predicate on the "s3_act_images" edge.
func HasS3ActImages() predicate.S3Image {
	return predicate.S3Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, S3ActImagesTable, S3ActImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasS3ActImagesWith applies the HasEdge predicate on the "s3_act_images" edge with a given conditions (other predicates).
func HasS3ActImagesWith(preds ...predicate.S3ActImage) predicate.S3Image {
	return predicate.S3Image(func(s *sql.Selector) {
		step := newS3ActImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3Image) predicate.S3Image {
	return predicate.S3Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3Image) predicate.S3Image {
	return predicate.S3Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3Image) predicate.S3Image {
	return predicate.S3Image(func(s *sql.Selector) {
		p(s.Not())
	})
}

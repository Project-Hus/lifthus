// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/routine"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Routine is the model entity for the Routine schema.
type Routine struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Day holds the value of the "day" field.
	Day int `json:"day,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoutineQuery when eager-loading is set.
	Edges                    RoutineEdges `json:"edges"`
	program_release_routines *int64
	selectValues             sql.SelectValues
}

// RoutineEdges holds the relations/edges for other nodes in the graph.
type RoutineEdges struct {
	// ProgramRelease holds the value of the program_release edge.
	ProgramRelease *ProgramRelease `json:"program_release,omitempty"`
	// RoutineActs holds the value of the routine_acts edge.
	RoutineActs []*RoutineAct `json:"routine_acts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProgramReleaseOrErr returns the ProgramRelease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineEdges) ProgramReleaseOrErr() (*ProgramRelease, error) {
	if e.loadedTypes[0] {
		if e.ProgramRelease == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: programrelease.Label}
		}
		return e.ProgramRelease, nil
	}
	return nil, &NotLoadedError{edge: "program_release"}
}

// RoutineActsOrErr returns the RoutineActs value or an error if the edge
// was not loaded in eager-loading.
func (e RoutineEdges) RoutineActsOrErr() ([]*RoutineAct, error) {
	if e.loadedTypes[1] {
		return e.RoutineActs, nil
	}
	return nil, &NotLoadedError{edge: "routine_acts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Routine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case routine.FieldID, routine.FieldDay:
			values[i] = new(sql.NullInt64)
		case routine.ForeignKeys[0]: // program_release_routines
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Routine fields.
func (r *Routine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case routine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case routine.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				r.Day = int(value.Int64)
			}
		case routine.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_release_routines", value)
			} else if value.Valid {
				r.program_release_routines = new(int64)
				*r.program_release_routines = int64(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Routine.
// This includes values selected through modifiers, order, etc.
func (r *Routine) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryProgramRelease queries the "program_release" edge of the Routine entity.
func (r *Routine) QueryProgramRelease() *ProgramReleaseQuery {
	return NewRoutineClient(r.config).QueryProgramRelease(r)
}

// QueryRoutineActs queries the "routine_acts" edge of the Routine entity.
func (r *Routine) QueryRoutineActs() *RoutineActQuery {
	return NewRoutineClient(r.config).QueryRoutineActs(r)
}

// Update returns a builder for updating this Routine.
// Note that you need to call Routine.Unwrap() before calling this method if this Routine
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Routine) Update() *RoutineUpdateOne {
	return NewRoutineClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Routine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Routine) Unwrap() *Routine {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Routine is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Routine) String() string {
	var builder strings.Builder
	builder.WriteString("Routine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", r.Day))
	builder.WriteByte(')')
	return builder.String()
}

// Routines is a parsable slice of Routine.
type Routines []*Routine

// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldSrc holds the string denoting the src field in the database.
	FieldSrc = "src"
	// EdgeActVersions holds the string denoting the act_versions edge name in mutations.
	EdgeActVersions = "act_versions"
	// EdgeProgramVersions holds the string denoting the program_versions edge name in mutations.
	EdgeProgramVersions = "program_versions"
	// EdgeActImages holds the string denoting the act_images edge name in mutations.
	EdgeActImages = "act_images"
	// EdgeProgramImages holds the string denoting the program_images edge name in mutations.
	EdgeProgramImages = "program_images"
	// Table holds the table name of the image in the database.
	Table = "images"
	// ActVersionsTable is the table that holds the act_versions relation/edge. The primary key declared below.
	ActVersionsTable = "act_images"
	// ActVersionsInverseTable is the table name for the ActVersion entity.
	// It exists in this package in order to avoid circular dependency with the "actversion" package.
	ActVersionsInverseTable = "act_versions"
	// ProgramVersionsTable is the table that holds the program_versions relation/edge. The primary key declared below.
	ProgramVersionsTable = "program_images"
	// ProgramVersionsInverseTable is the table name for the ProgramVersion entity.
	// It exists in this package in order to avoid circular dependency with the "programversion" package.
	ProgramVersionsInverseTable = "program_versions"
	// ActImagesTable is the table that holds the act_images relation/edge.
	ActImagesTable = "act_images"
	// ActImagesInverseTable is the table name for the ActImage entity.
	// It exists in this package in order to avoid circular dependency with the "actimage" package.
	ActImagesInverseTable = "act_images"
	// ActImagesColumn is the table column denoting the act_images relation/edge.
	ActImagesColumn = "image_id"
	// ProgramImagesTable is the table that holds the program_images relation/edge.
	ProgramImagesTable = "program_images"
	// ProgramImagesInverseTable is the table name for the ProgramImage entity.
	// It exists in this package in order to avoid circular dependency with the "programimage" package.
	ProgramImagesInverseTable = "program_images"
	// ProgramImagesColumn is the table column denoting the program_images relation/edge.
	ProgramImagesColumn = "image_id"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldSrc,
}

var (
	// ActVersionsPrimaryKey and ActVersionsColumn2 are the table columns denoting the
	// primary key for the act_versions relation (M2M).
	ActVersionsPrimaryKey = []string{"act_version_id", "image_id"}
	// ProgramVersionsPrimaryKey and ProgramVersionsColumn2 are the table columns denoting the
	// primary key for the program_versions relation (M2M).
	ProgramVersionsPrimaryKey = []string{"program_version_id", "image_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// SrcValidator is a validator for the "src" field. It is called by the builders before save.
	SrcValidator func(string) error
)

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// BySrc orders the results by the src field.
func BySrc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSrc, opts...).ToFunc()
}

// ByActVersionsCount orders the results by act_versions count.
func ByActVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActVersionsStep(), opts...)
	}
}

// ByActVersions orders the results by act_versions terms.
func ByActVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramVersionsCount orders the results by program_versions count.
func ByProgramVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramVersionsStep(), opts...)
	}
}

// ByProgramVersions orders the results by program_versions terms.
func ByProgramVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActImagesCount orders the results by act_images count.
func ByActImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActImagesStep(), opts...)
	}
}

// ByActImages orders the results by act_images terms.
func ByActImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramImagesCount orders the results by program_images count.
func ByProgramImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramImagesStep(), opts...)
	}
}

// ByProgramImages orders the results by program_images terms.
func ByProgramImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ActVersionsTable, ActVersionsPrimaryKey...),
	)
}
func newProgramVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramVersionsTable, ProgramVersionsPrimaryKey...),
	)
}
func newActImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ActImagesTable, ActImagesColumn),
	)
}
func newProgramImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProgramImagesTable, ProgramImagesColumn),
	)
}

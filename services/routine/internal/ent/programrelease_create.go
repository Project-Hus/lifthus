// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/dayroutine"
	"routine/internal/ent/program"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/s3programimage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramReleaseCreate is the builder for creating a ProgramRelease entity.
type ProgramReleaseCreate struct {
	config
	mutation *ProgramReleaseMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (prc *ProgramReleaseCreate) SetVersion(i int) *ProgramReleaseCreate {
	prc.mutation.SetVersion(i)
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *ProgramReleaseCreate) SetCreatedAt(t time.Time) *ProgramReleaseCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetText sets the "text" field.
func (prc *ProgramReleaseCreate) SetText(s string) *ProgramReleaseCreate {
	prc.mutation.SetText(s)
	return prc
}

// SetID sets the "id" field.
func (prc *ProgramReleaseCreate) SetID(i int64) *ProgramReleaseCreate {
	prc.mutation.SetID(i)
	return prc
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (prc *ProgramReleaseCreate) SetProgramID(id int64) *ProgramReleaseCreate {
	prc.mutation.SetProgramID(id)
	return prc
}

// SetProgram sets the "program" edge to the Program entity.
func (prc *ProgramReleaseCreate) SetProgram(p *Program) *ProgramReleaseCreate {
	return prc.SetProgramID(p.ID)
}

// AddS3ProgramImageIDs adds the "s3_program_images" edge to the S3ProgramImage entity by IDs.
func (prc *ProgramReleaseCreate) AddS3ProgramImageIDs(ids ...int64) *ProgramReleaseCreate {
	prc.mutation.AddS3ProgramImageIDs(ids...)
	return prc
}

// AddS3ProgramImages adds the "s3_program_images" edges to the S3ProgramImage entity.
func (prc *ProgramReleaseCreate) AddS3ProgramImages(s ...*S3ProgramImage) *ProgramReleaseCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return prc.AddS3ProgramImageIDs(ids...)
}

// AddDayRoutineIDs adds the "day_routines" edge to the DayRoutine entity by IDs.
func (prc *ProgramReleaseCreate) AddDayRoutineIDs(ids ...int64) *ProgramReleaseCreate {
	prc.mutation.AddDayRoutineIDs(ids...)
	return prc
}

// AddDayRoutines adds the "day_routines" edges to the DayRoutine entity.
func (prc *ProgramReleaseCreate) AddDayRoutines(d ...*DayRoutine) *ProgramReleaseCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return prc.AddDayRoutineIDs(ids...)
}

// Mutation returns the ProgramReleaseMutation object of the builder.
func (prc *ProgramReleaseCreate) Mutation() *ProgramReleaseMutation {
	return prc.mutation
}

// Save creates the ProgramRelease in the database.
func (prc *ProgramReleaseCreate) Save(ctx context.Context) (*ProgramRelease, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProgramReleaseCreate) SaveX(ctx context.Context) *ProgramRelease {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProgramReleaseCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProgramReleaseCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProgramReleaseCreate) check() error {
	if _, ok := prc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ProgramRelease.version"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProgramRelease.created_at"`)}
	}
	if _, ok := prc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "ProgramRelease.text"`)}
	}
	if _, ok := prc.mutation.ProgramID(); !ok {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "ProgramRelease.program"`)}
	}
	return nil
}

func (prc *ProgramReleaseCreate) sqlSave(ctx context.Context) (*ProgramRelease, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProgramReleaseCreate) createSpec() (*ProgramRelease, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramRelease{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(programrelease.Table, sqlgraph.NewFieldSpec(programrelease.FieldID, field.TypeInt64))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.Version(); ok {
		_spec.SetField(programrelease.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(programrelease.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.Text(); ok {
		_spec.SetField(programrelease.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if nodes := prc.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programrelease.ProgramTable,
			Columns: []string{programrelease.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_program_releases = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.S3ProgramImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programrelease.S3ProgramImagesTable,
			Columns: []string{programrelease.S3ProgramImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3programimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.DayRoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programrelease.DayRoutinesTable,
			Columns: []string{programrelease.DayRoutinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProgramReleaseCreateBulk is the builder for creating many ProgramRelease entities in bulk.
type ProgramReleaseCreateBulk struct {
	config
	builders []*ProgramReleaseCreate
}

// Save creates the ProgramRelease entities in the database.
func (prcb *ProgramReleaseCreateBulk) Save(ctx context.Context) ([]*ProgramRelease, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProgramRelease, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramReleaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProgramReleaseCreateBulk) SaveX(ctx context.Context) []*ProgramRelease {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProgramReleaseCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProgramReleaseCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

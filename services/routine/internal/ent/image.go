// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/image"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Src holds the value of the "src" field.
	Src string `json:"src,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageQuery when eager-loading is set.
	Edges        ImageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ImageEdges holds the relations/edges for other nodes in the graph.
type ImageEdges struct {
	// ActVersions holds the value of the act_versions edge.
	ActVersions []*ActVersion `json:"act_versions,omitempty"`
	// ProgramVersions holds the value of the program_versions edge.
	ProgramVersions []*ProgramVersion `json:"program_versions,omitempty"`
	// ActImages holds the value of the act_images edge.
	ActImages []*ActImage `json:"act_images,omitempty"`
	// ProgramImages holds the value of the program_images edge.
	ProgramImages []*ProgramImage `json:"program_images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ActVersionsOrErr returns the ActVersions value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) ActVersionsOrErr() ([]*ActVersion, error) {
	if e.loadedTypes[0] {
		return e.ActVersions, nil
	}
	return nil, &NotLoadedError{edge: "act_versions"}
}

// ProgramVersionsOrErr returns the ProgramVersions value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) ProgramVersionsOrErr() ([]*ProgramVersion, error) {
	if e.loadedTypes[1] {
		return e.ProgramVersions, nil
	}
	return nil, &NotLoadedError{edge: "program_versions"}
}

// ActImagesOrErr returns the ActImages value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) ActImagesOrErr() ([]*ActImage, error) {
	if e.loadedTypes[2] {
		return e.ActImages, nil
	}
	return nil, &NotLoadedError{edge: "act_images"}
}

// ProgramImagesOrErr returns the ProgramImages value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) ProgramImagesOrErr() ([]*ProgramImage, error) {
	if e.loadedTypes[3] {
		return e.ProgramImages, nil
	}
	return nil, &NotLoadedError{edge: "program_images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldID:
			values[i] = new(sql.NullInt64)
		case image.FieldKey, image.FieldSrc:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (i *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case image.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = uint64(value.Int64)
		case image.FieldKey:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[j])
			} else if value.Valid {
				i.Key = value.String
			}
		case image.FieldSrc:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src", values[j])
			} else if value.Valid {
				i.Src = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Image.
// This includes values selected through modifiers, order, etc.
func (i *Image) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryActVersions queries the "act_versions" edge of the Image entity.
func (i *Image) QueryActVersions() *ActVersionQuery {
	return NewImageClient(i.config).QueryActVersions(i)
}

// QueryProgramVersions queries the "program_versions" edge of the Image entity.
func (i *Image) QueryProgramVersions() *ProgramVersionQuery {
	return NewImageClient(i.config).QueryProgramVersions(i)
}

// QueryActImages queries the "act_images" edge of the Image entity.
func (i *Image) QueryActImages() *ActImageQuery {
	return NewImageClient(i.config).QueryActImages(i)
}

// QueryProgramImages queries the "program_images" edge of the Image entity.
func (i *Image) QueryProgramImages() *ProgramImageQuery {
	return NewImageClient(i.config).QueryProgramImages(i)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Image) Update() *ImageUpdateOne {
	return NewImageClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Image) Unwrap() *Image {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("key=")
	builder.WriteString(i.Key)
	builder.WriteString(", ")
	builder.WriteString("src=")
	builder.WriteString(i.Src)
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/dailyroutine"
	"routine/internal/ent/image"
	"routine/internal/ent/program"
	"routine/internal/ent/programimage"
	"routine/internal/ent/programversion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramVersionCreate is the builder for creating a ProgramVersion entity.
type ProgramVersionCreate struct {
	config
	mutation *ProgramVersionMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (pvc *ProgramVersionCreate) SetCode(s string) *ProgramVersionCreate {
	pvc.mutation.SetCode(s)
	return pvc
}

// SetProgramCode sets the "program_code" field.
func (pvc *ProgramVersionCreate) SetProgramCode(s string) *ProgramVersionCreate {
	pvc.mutation.SetProgramCode(s)
	return pvc
}

// SetVersion sets the "version" field.
func (pvc *ProgramVersionCreate) SetVersion(u uint) *ProgramVersionCreate {
	pvc.mutation.SetVersion(u)
	return pvc
}

// SetCreatedAt sets the "created_at" field.
func (pvc *ProgramVersionCreate) SetCreatedAt(t time.Time) *ProgramVersionCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetText sets the "text" field.
func (pvc *ProgramVersionCreate) SetText(s string) *ProgramVersionCreate {
	pvc.mutation.SetText(s)
	return pvc
}

// SetID sets the "id" field.
func (pvc *ProgramVersionCreate) SetID(u uint64) *ProgramVersionCreate {
	pvc.mutation.SetID(u)
	return pvc
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (pvc *ProgramVersionCreate) SetProgramID(id uint64) *ProgramVersionCreate {
	pvc.mutation.SetProgramID(id)
	return pvc
}

// SetProgram sets the "program" edge to the Program entity.
func (pvc *ProgramVersionCreate) SetProgram(p *Program) *ProgramVersionCreate {
	return pvc.SetProgramID(p.ID)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (pvc *ProgramVersionCreate) AddImageIDs(ids ...uint64) *ProgramVersionCreate {
	pvc.mutation.AddImageIDs(ids...)
	return pvc
}

// AddImages adds the "images" edges to the Image entity.
func (pvc *ProgramVersionCreate) AddImages(i ...*Image) *ProgramVersionCreate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pvc.AddImageIDs(ids...)
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by IDs.
func (pvc *ProgramVersionCreate) AddDailyRoutineIDs(ids ...uint64) *ProgramVersionCreate {
	pvc.mutation.AddDailyRoutineIDs(ids...)
	return pvc
}

// AddDailyRoutines adds the "daily_routines" edges to the DailyRoutine entity.
func (pvc *ProgramVersionCreate) AddDailyRoutines(d ...*DailyRoutine) *ProgramVersionCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pvc.AddDailyRoutineIDs(ids...)
}

// AddProgramImageIDs adds the "program_images" edge to the ProgramImage entity by IDs.
func (pvc *ProgramVersionCreate) AddProgramImageIDs(ids ...uint64) *ProgramVersionCreate {
	pvc.mutation.AddProgramImageIDs(ids...)
	return pvc
}

// AddProgramImages adds the "program_images" edges to the ProgramImage entity.
func (pvc *ProgramVersionCreate) AddProgramImages(p ...*ProgramImage) *ProgramVersionCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvc.AddProgramImageIDs(ids...)
}

// Mutation returns the ProgramVersionMutation object of the builder.
func (pvc *ProgramVersionCreate) Mutation() *ProgramVersionMutation {
	return pvc.mutation
}

// Save creates the ProgramVersion in the database.
func (pvc *ProgramVersionCreate) Save(ctx context.Context) (*ProgramVersion, error) {
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *ProgramVersionCreate) SaveX(ctx context.Context) *ProgramVersion {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *ProgramVersionCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *ProgramVersionCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *ProgramVersionCreate) check() error {
	if _, ok := pvc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "ProgramVersion.code"`)}
	}
	if v, ok := pvc.mutation.Code(); ok {
		if err := programversion.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ProgramVersion.code": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.ProgramCode(); !ok {
		return &ValidationError{Name: "program_code", err: errors.New(`ent: missing required field "ProgramVersion.program_code"`)}
	}
	if v, ok := pvc.mutation.ProgramCode(); ok {
		if err := programversion.ProgramCodeValidator(v); err != nil {
			return &ValidationError{Name: "program_code", err: fmt.Errorf(`ent: validator failed for field "ProgramVersion.program_code": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ProgramVersion.version"`)}
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProgramVersion.created_at"`)}
	}
	if _, ok := pvc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "ProgramVersion.text"`)}
	}
	if v, ok := pvc.mutation.Text(); ok {
		if err := programversion.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "ProgramVersion.text": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.ProgramID(); !ok {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "ProgramVersion.program"`)}
	}
	return nil
}

func (pvc *ProgramVersionCreate) sqlSave(ctx context.Context) (*ProgramVersion, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *ProgramVersionCreate) createSpec() (*ProgramVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramVersion{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(programversion.Table, sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64))
	)
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pvc.mutation.Code(); ok {
		_spec.SetField(programversion.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pvc.mutation.ProgramCode(); ok {
		_spec.SetField(programversion.FieldProgramCode, field.TypeString, value)
		_node.ProgramCode = value
	}
	if value, ok := pvc.mutation.Version(); ok {
		_spec.SetField(programversion.FieldVersion, field.TypeUint, value)
		_node.Version = value
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(programversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.Text(); ok {
		_spec.SetField(programversion.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if nodes := pvc.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programversion.ProgramTable,
			Columns: []string{programversion.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_program_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   programversion.ImagesTable,
			Columns: programversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.DailyRoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programversion.DailyRoutinesTable,
			Columns: []string{programversion.DailyRoutinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.ProgramImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   programversion.ProgramImagesTable,
			Columns: []string{programversion.ProgramImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProgramVersionCreateBulk is the builder for creating many ProgramVersion entities in bulk.
type ProgramVersionCreateBulk struct {
	config
	builders []*ProgramVersionCreate
}

// Save creates the ProgramVersion entities in the database.
func (pvcb *ProgramVersionCreateBulk) Save(ctx context.Context) ([]*ProgramVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*ProgramVersion, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *ProgramVersionCreateBulk) SaveX(ctx context.Context) []*ProgramVersion {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *ProgramVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *ProgramVersionCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

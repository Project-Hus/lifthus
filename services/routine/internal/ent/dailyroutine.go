// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/dailyroutine"
	"routine/internal/ent/programversion"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DailyRoutine is the model entity for the DailyRoutine schema.
type DailyRoutine struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ProgramVersionCode holds the value of the "program_version_code" field.
	ProgramVersionCode string `json:"program_version_code,omitempty"`
	// Day holds the value of the "day" field.
	Day uint `json:"day,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DailyRoutineQuery when eager-loading is set.
	Edges                          DailyRoutineEdges `json:"edges"`
	program_version_daily_routines *uint64
	selectValues                   sql.SelectValues
}

// DailyRoutineEdges holds the relations/edges for other nodes in the graph.
type DailyRoutineEdges struct {
	// ProgramVersion holds the value of the program_version edge.
	ProgramVersion *ProgramVersion `json:"program_version,omitempty"`
	// RoutineActs holds the value of the routine_acts edge.
	RoutineActs []*RoutineAct `json:"routine_acts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProgramVersionOrErr returns the ProgramVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyRoutineEdges) ProgramVersionOrErr() (*ProgramVersion, error) {
	if e.loadedTypes[0] {
		if e.ProgramVersion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: programversion.Label}
		}
		return e.ProgramVersion, nil
	}
	return nil, &NotLoadedError{edge: "program_version"}
}

// RoutineActsOrErr returns the RoutineActs value or an error if the edge
// was not loaded in eager-loading.
func (e DailyRoutineEdges) RoutineActsOrErr() ([]*RoutineAct, error) {
	if e.loadedTypes[1] {
		return e.RoutineActs, nil
	}
	return nil, &NotLoadedError{edge: "routine_acts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyRoutine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailyroutine.FieldID, dailyroutine.FieldDay:
			values[i] = new(sql.NullInt64)
		case dailyroutine.FieldCode, dailyroutine.FieldProgramVersionCode:
			values[i] = new(sql.NullString)
		case dailyroutine.ForeignKeys[0]: // program_version_daily_routines
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyRoutine fields.
func (dr *DailyRoutine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailyroutine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = uint64(value.Int64)
		case dailyroutine.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				dr.Code = value.String
			}
		case dailyroutine.FieldProgramVersionCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_version_code", values[i])
			} else if value.Valid {
				dr.ProgramVersionCode = value.String
			}
		case dailyroutine.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				dr.Day = uint(value.Int64)
			}
		case dailyroutine.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_version_daily_routines", value)
			} else if value.Valid {
				dr.program_version_daily_routines = new(uint64)
				*dr.program_version_daily_routines = uint64(value.Int64)
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DailyRoutine.
// This includes values selected through modifiers, order, etc.
func (dr *DailyRoutine) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QueryProgramVersion queries the "program_version" edge of the DailyRoutine entity.
func (dr *DailyRoutine) QueryProgramVersion() *ProgramVersionQuery {
	return NewDailyRoutineClient(dr.config).QueryProgramVersion(dr)
}

// QueryRoutineActs queries the "routine_acts" edge of the DailyRoutine entity.
func (dr *DailyRoutine) QueryRoutineActs() *RoutineActQuery {
	return NewDailyRoutineClient(dr.config).QueryRoutineActs(dr)
}

// Update returns a builder for updating this DailyRoutine.
// Note that you need to call DailyRoutine.Unwrap() before calling this method if this DailyRoutine
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DailyRoutine) Update() *DailyRoutineUpdateOne {
	return NewDailyRoutineClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DailyRoutine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DailyRoutine) Unwrap() *DailyRoutine {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyRoutine is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DailyRoutine) String() string {
	var builder strings.Builder
	builder.WriteString("DailyRoutine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("code=")
	builder.WriteString(dr.Code)
	builder.WriteString(", ")
	builder.WriteString("program_version_code=")
	builder.WriteString(dr.ProgramVersionCode)
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", dr.Day))
	builder.WriteByte(')')
	return builder.String()
}

// DailyRoutines is a parsable slice of DailyRoutine.
type DailyRoutines []*DailyRoutine

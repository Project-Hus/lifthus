// Code generated by ent, DO NOT EDIT.

package actversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the actversion type in the database.
	Label = "act_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldActCode holds the string denoting the act_code field in the database.
	FieldActCode = "act_code"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// EdgeActImages holds the string denoting the act_images edge name in mutations.
	EdgeActImages = "act_images"
	// EdgeAct holds the string denoting the act edge name in mutations.
	EdgeAct = "act"
	// Table holds the table name of the actversion in the database.
	Table = "act_versions"
	// ActImagesTable is the table that holds the act_images relation/edge.
	ActImagesTable = "act_images"
	// ActImagesInverseTable is the table name for the ActImage entity.
	// It exists in this package in order to avoid circular dependency with the "actimage" package.
	ActImagesInverseTable = "act_images"
	// ActImagesColumn is the table column denoting the act_images relation/edge.
	ActImagesColumn = "act_version_act_images"
	// ActTable is the table that holds the act relation/edge.
	ActTable = "act_versions"
	// ActInverseTable is the table name for the Act entity.
	// It exists in this package in order to avoid circular dependency with the "act" package.
	ActInverseTable = "acts"
	// ActColumn is the table column denoting the act relation/edge.
	ActColumn = "act_act_versions"
)

// Columns holds all SQL columns for actversion fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldActCode,
	FieldVersion,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "act_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"act_act_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// ActCodeValidator is a validator for the "act_code" field. It is called by the builders before save.
	ActCodeValidator func(string) error
)

// OrderOption defines the ordering options for the ActVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByActCode orders the results by the act_code field.
func ByActCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActCode, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByActImagesCount orders the results by act_images count.
func ByActImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActImagesStep(), opts...)
	}
}

// ByActImages orders the results by act_images terms.
func ByActImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActField orders the results by act field.
func ByActField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActStep(), sql.OrderByField(field, opts...))
	}
}
func newActImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActImagesTable, ActImagesColumn),
	)
}
func newActStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/predicate"
	"routine/internal/ent/programrelease"
	"routine/internal/ent/s3image"
	"routine/internal/ent/s3programimage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// S3ProgramImageUpdate is the builder for updating S3ProgramImage entities.
type S3ProgramImageUpdate struct {
	config
	hooks    []Hook
	mutation *S3ProgramImageMutation
}

// Where appends a list predicates to the S3ProgramImageUpdate builder.
func (siu *S3ProgramImageUpdate) Where(ps ...predicate.S3ProgramImage) *S3ProgramImageUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetOrder sets the "order" field.
func (siu *S3ProgramImageUpdate) SetOrder(i int) *S3ProgramImageUpdate {
	siu.mutation.ResetOrder()
	siu.mutation.SetOrder(i)
	return siu
}

// AddOrder adds i to the "order" field.
func (siu *S3ProgramImageUpdate) AddOrder(i int) *S3ProgramImageUpdate {
	siu.mutation.AddOrder(i)
	return siu
}

// SetProgramReleaseID sets the "program_release_id" field.
func (siu *S3ProgramImageUpdate) SetProgramReleaseID(i int64) *S3ProgramImageUpdate {
	siu.mutation.SetProgramReleaseID(i)
	return siu
}

// SetImageID sets the "image_id" field.
func (siu *S3ProgramImageUpdate) SetImageID(i int64) *S3ProgramImageUpdate {
	siu.mutation.SetImageID(i)
	return siu
}

// SetProgramRelease sets the "program_release" edge to the ProgramRelease entity.
func (siu *S3ProgramImageUpdate) SetProgramRelease(p *ProgramRelease) *S3ProgramImageUpdate {
	return siu.SetProgramReleaseID(p.ID)
}

// SetS3ImageID sets the "s3_image" edge to the S3Image entity by ID.
func (siu *S3ProgramImageUpdate) SetS3ImageID(id int64) *S3ProgramImageUpdate {
	siu.mutation.SetS3ImageID(id)
	return siu
}

// SetS3Image sets the "s3_image" edge to the S3Image entity.
func (siu *S3ProgramImageUpdate) SetS3Image(s *S3Image) *S3ProgramImageUpdate {
	return siu.SetS3ImageID(s.ID)
}

// Mutation returns the S3ProgramImageMutation object of the builder.
func (siu *S3ProgramImageUpdate) Mutation() *S3ProgramImageMutation {
	return siu.mutation
}

// ClearProgramRelease clears the "program_release" edge to the ProgramRelease entity.
func (siu *S3ProgramImageUpdate) ClearProgramRelease() *S3ProgramImageUpdate {
	siu.mutation.ClearProgramRelease()
	return siu
}

// ClearS3Image clears the "s3_image" edge to the S3Image entity.
func (siu *S3ProgramImageUpdate) ClearS3Image() *S3ProgramImageUpdate {
	siu.mutation.ClearS3Image()
	return siu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *S3ProgramImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *S3ProgramImageUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *S3ProgramImageUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *S3ProgramImageUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *S3ProgramImageUpdate) check() error {
	if _, ok := siu.mutation.ProgramReleaseID(); siu.mutation.ProgramReleaseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "S3ProgramImage.program_release"`)
	}
	if _, ok := siu.mutation.S3ImageID(); siu.mutation.S3ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "S3ProgramImage.s3_image"`)
	}
	return nil
}

func (siu *S3ProgramImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := siu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(s3programimage.Table, s3programimage.Columns, sqlgraph.NewFieldSpec(s3programimage.FieldID, field.TypeInt64))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.Order(); ok {
		_spec.SetField(s3programimage.FieldOrder, field.TypeInt, value)
	}
	if value, ok := siu.mutation.AddedOrder(); ok {
		_spec.AddField(s3programimage.FieldOrder, field.TypeInt, value)
	}
	if siu.mutation.ProgramReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3programimage.ProgramReleaseTable,
			Columns: []string{s3programimage.ProgramReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrelease.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ProgramReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3programimage.ProgramReleaseTable,
			Columns: []string{s3programimage.ProgramReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrelease.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.S3ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   s3programimage.S3ImageTable,
			Columns: []string{s3programimage.S3ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.S3ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   s3programimage.S3ImageTable,
			Columns: []string{s3programimage.S3ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3programimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// S3ProgramImageUpdateOne is the builder for updating a single S3ProgramImage entity.
type S3ProgramImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *S3ProgramImageMutation
}

// SetOrder sets the "order" field.
func (siuo *S3ProgramImageUpdateOne) SetOrder(i int) *S3ProgramImageUpdateOne {
	siuo.mutation.ResetOrder()
	siuo.mutation.SetOrder(i)
	return siuo
}

// AddOrder adds i to the "order" field.
func (siuo *S3ProgramImageUpdateOne) AddOrder(i int) *S3ProgramImageUpdateOne {
	siuo.mutation.AddOrder(i)
	return siuo
}

// SetProgramReleaseID sets the "program_release_id" field.
func (siuo *S3ProgramImageUpdateOne) SetProgramReleaseID(i int64) *S3ProgramImageUpdateOne {
	siuo.mutation.SetProgramReleaseID(i)
	return siuo
}

// SetImageID sets the "image_id" field.
func (siuo *S3ProgramImageUpdateOne) SetImageID(i int64) *S3ProgramImageUpdateOne {
	siuo.mutation.SetImageID(i)
	return siuo
}

// SetProgramRelease sets the "program_release" edge to the ProgramRelease entity.
func (siuo *S3ProgramImageUpdateOne) SetProgramRelease(p *ProgramRelease) *S3ProgramImageUpdateOne {
	return siuo.SetProgramReleaseID(p.ID)
}

// SetS3ImageID sets the "s3_image" edge to the S3Image entity by ID.
func (siuo *S3ProgramImageUpdateOne) SetS3ImageID(id int64) *S3ProgramImageUpdateOne {
	siuo.mutation.SetS3ImageID(id)
	return siuo
}

// SetS3Image sets the "s3_image" edge to the S3Image entity.
func (siuo *S3ProgramImageUpdateOne) SetS3Image(s *S3Image) *S3ProgramImageUpdateOne {
	return siuo.SetS3ImageID(s.ID)
}

// Mutation returns the S3ProgramImageMutation object of the builder.
func (siuo *S3ProgramImageUpdateOne) Mutation() *S3ProgramImageMutation {
	return siuo.mutation
}

// ClearProgramRelease clears the "program_release" edge to the ProgramRelease entity.
func (siuo *S3ProgramImageUpdateOne) ClearProgramRelease() *S3ProgramImageUpdateOne {
	siuo.mutation.ClearProgramRelease()
	return siuo
}

// ClearS3Image clears the "s3_image" edge to the S3Image entity.
func (siuo *S3ProgramImageUpdateOne) ClearS3Image() *S3ProgramImageUpdateOne {
	siuo.mutation.ClearS3Image()
	return siuo
}

// Where appends a list predicates to the S3ProgramImageUpdate builder.
func (siuo *S3ProgramImageUpdateOne) Where(ps ...predicate.S3ProgramImage) *S3ProgramImageUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *S3ProgramImageUpdateOne) Select(field string, fields ...string) *S3ProgramImageUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated S3ProgramImage entity.
func (siuo *S3ProgramImageUpdateOne) Save(ctx context.Context) (*S3ProgramImage, error) {
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *S3ProgramImageUpdateOne) SaveX(ctx context.Context) *S3ProgramImage {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *S3ProgramImageUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *S3ProgramImageUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *S3ProgramImageUpdateOne) check() error {
	if _, ok := siuo.mutation.ProgramReleaseID(); siuo.mutation.ProgramReleaseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "S3ProgramImage.program_release"`)
	}
	if _, ok := siuo.mutation.S3ImageID(); siuo.mutation.S3ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "S3ProgramImage.s3_image"`)
	}
	return nil
}

func (siuo *S3ProgramImageUpdateOne) sqlSave(ctx context.Context) (_node *S3ProgramImage, err error) {
	if err := siuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(s3programimage.Table, s3programimage.Columns, sqlgraph.NewFieldSpec(s3programimage.FieldID, field.TypeInt64))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "S3ProgramImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, s3programimage.FieldID)
		for _, f := range fields {
			if !s3programimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != s3programimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.Order(); ok {
		_spec.SetField(s3programimage.FieldOrder, field.TypeInt, value)
	}
	if value, ok := siuo.mutation.AddedOrder(); ok {
		_spec.AddField(s3programimage.FieldOrder, field.TypeInt, value)
	}
	if siuo.mutation.ProgramReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3programimage.ProgramReleaseTable,
			Columns: []string{s3programimage.ProgramReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrelease.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ProgramReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3programimage.ProgramReleaseTable,
			Columns: []string{s3programimage.ProgramReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrelease.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.S3ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   s3programimage.S3ImageTable,
			Columns: []string{s3programimage.S3ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.S3ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   s3programimage.S3ImageTable,
			Columns: []string{s3programimage.S3ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &S3ProgramImage{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3programimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}

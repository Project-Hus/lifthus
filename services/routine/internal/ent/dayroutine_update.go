// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/dayroutine"
	"routine/internal/ent/predicate"
	"routine/internal/ent/routineact"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DayRoutineUpdate is the builder for updating DayRoutine entities.
type DayRoutineUpdate struct {
	config
	hooks    []Hook
	mutation *DayRoutineMutation
}

// Where appends a list predicates to the DayRoutineUpdate builder.
func (dru *DayRoutineUpdate) Where(ps ...predicate.DayRoutine) *DayRoutineUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (dru *DayRoutineUpdate) AddRoutineActIDs(ids ...int64) *DayRoutineUpdate {
	dru.mutation.AddRoutineActIDs(ids...)
	return dru
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (dru *DayRoutineUpdate) AddRoutineActs(r ...*RoutineAct) *DayRoutineUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dru.AddRoutineActIDs(ids...)
}

// Mutation returns the DayRoutineMutation object of the builder.
func (dru *DayRoutineUpdate) Mutation() *DayRoutineMutation {
	return dru.mutation
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (dru *DayRoutineUpdate) ClearRoutineActs() *DayRoutineUpdate {
	dru.mutation.ClearRoutineActs()
	return dru
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (dru *DayRoutineUpdate) RemoveRoutineActIDs(ids ...int64) *DayRoutineUpdate {
	dru.mutation.RemoveRoutineActIDs(ids...)
	return dru
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (dru *DayRoutineUpdate) RemoveRoutineActs(r ...*RoutineAct) *DayRoutineUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dru.RemoveRoutineActIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DayRoutineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DayRoutineUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DayRoutineUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DayRoutineUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DayRoutineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dayroutine.Table, dayroutine.Columns, sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dru.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dayroutine.RoutineActsTable,
			Columns: []string{dayroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !dru.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dayroutine.RoutineActsTable,
			Columns: []string{dayroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dayroutine.RoutineActsTable,
			Columns: []string{dayroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dayroutine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DayRoutineUpdateOne is the builder for updating a single DayRoutine entity.
type DayRoutineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DayRoutineMutation
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (druo *DayRoutineUpdateOne) AddRoutineActIDs(ids ...int64) *DayRoutineUpdateOne {
	druo.mutation.AddRoutineActIDs(ids...)
	return druo
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (druo *DayRoutineUpdateOne) AddRoutineActs(r ...*RoutineAct) *DayRoutineUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return druo.AddRoutineActIDs(ids...)
}

// Mutation returns the DayRoutineMutation object of the builder.
func (druo *DayRoutineUpdateOne) Mutation() *DayRoutineMutation {
	return druo.mutation
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (druo *DayRoutineUpdateOne) ClearRoutineActs() *DayRoutineUpdateOne {
	druo.mutation.ClearRoutineActs()
	return druo
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (druo *DayRoutineUpdateOne) RemoveRoutineActIDs(ids ...int64) *DayRoutineUpdateOne {
	druo.mutation.RemoveRoutineActIDs(ids...)
	return druo
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (druo *DayRoutineUpdateOne) RemoveRoutineActs(r ...*RoutineAct) *DayRoutineUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return druo.RemoveRoutineActIDs(ids...)
}

// Where appends a list predicates to the DayRoutineUpdate builder.
func (druo *DayRoutineUpdateOne) Where(ps ...predicate.DayRoutine) *DayRoutineUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DayRoutineUpdateOne) Select(field string, fields ...string) *DayRoutineUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DayRoutine entity.
func (druo *DayRoutineUpdateOne) Save(ctx context.Context) (*DayRoutine, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DayRoutineUpdateOne) SaveX(ctx context.Context) *DayRoutine {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DayRoutineUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DayRoutineUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DayRoutineUpdateOne) sqlSave(ctx context.Context) (_node *DayRoutine, err error) {
	_spec := sqlgraph.NewUpdateSpec(dayroutine.Table, dayroutine.Columns, sqlgraph.NewFieldSpec(dayroutine.FieldID, field.TypeInt64))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DayRoutine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dayroutine.FieldID)
		for _, f := range fields {
			if !dayroutine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dayroutine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if druo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dayroutine.RoutineActsTable,
			Columns: []string{dayroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !druo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dayroutine.RoutineActsTable,
			Columns: []string{dayroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dayroutine.RoutineActsTable,
			Columns: []string{dayroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DayRoutine{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dayroutine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}

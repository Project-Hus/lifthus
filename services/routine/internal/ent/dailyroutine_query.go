// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"routine/internal/ent/dailyroutine"
	"routine/internal/ent/predicate"
	"routine/internal/ent/programversion"
	"routine/internal/ent/routineact"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DailyRoutineQuery is the builder for querying DailyRoutine entities.
type DailyRoutineQuery struct {
	config
	ctx                *QueryContext
	order              []dailyroutine.OrderOption
	inters             []Interceptor
	predicates         []predicate.DailyRoutine
	withProgramVersion *ProgramVersionQuery
	withRoutineActs    *RoutineActQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DailyRoutineQuery builder.
func (drq *DailyRoutineQuery) Where(ps ...predicate.DailyRoutine) *DailyRoutineQuery {
	drq.predicates = append(drq.predicates, ps...)
	return drq
}

// Limit the number of records to be returned by this query.
func (drq *DailyRoutineQuery) Limit(limit int) *DailyRoutineQuery {
	drq.ctx.Limit = &limit
	return drq
}

// Offset to start from.
func (drq *DailyRoutineQuery) Offset(offset int) *DailyRoutineQuery {
	drq.ctx.Offset = &offset
	return drq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drq *DailyRoutineQuery) Unique(unique bool) *DailyRoutineQuery {
	drq.ctx.Unique = &unique
	return drq
}

// Order specifies how the records should be ordered.
func (drq *DailyRoutineQuery) Order(o ...dailyroutine.OrderOption) *DailyRoutineQuery {
	drq.order = append(drq.order, o...)
	return drq
}

// QueryProgramVersion chains the current query on the "program_version" edge.
func (drq *DailyRoutineQuery) QueryProgramVersion() *ProgramVersionQuery {
	query := (&ProgramVersionClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyroutine.Table, dailyroutine.FieldID, selector),
			sqlgraph.To(programversion.Table, programversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailyroutine.ProgramVersionTable, dailyroutine.ProgramVersionColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoutineActs chains the current query on the "routine_acts" edge.
func (drq *DailyRoutineQuery) QueryRoutineActs() *RoutineActQuery {
	query := (&RoutineActClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyroutine.Table, dailyroutine.FieldID, selector),
			sqlgraph.To(routineact.Table, routineact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dailyroutine.RoutineActsTable, dailyroutine.RoutineActsColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DailyRoutine entity from the query.
// Returns a *NotFoundError when no DailyRoutine was found.
func (drq *DailyRoutineQuery) First(ctx context.Context) (*DailyRoutine, error) {
	nodes, err := drq.Limit(1).All(setContextOp(ctx, drq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dailyroutine.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drq *DailyRoutineQuery) FirstX(ctx context.Context) *DailyRoutine {
	node, err := drq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DailyRoutine ID from the query.
// Returns a *NotFoundError when no DailyRoutine ID was found.
func (drq *DailyRoutineQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = drq.Limit(1).IDs(setContextOp(ctx, drq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dailyroutine.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drq *DailyRoutineQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := drq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DailyRoutine entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DailyRoutine entity is found.
// Returns a *NotFoundError when no DailyRoutine entities are found.
func (drq *DailyRoutineQuery) Only(ctx context.Context) (*DailyRoutine, error) {
	nodes, err := drq.Limit(2).All(setContextOp(ctx, drq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dailyroutine.Label}
	default:
		return nil, &NotSingularError{dailyroutine.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drq *DailyRoutineQuery) OnlyX(ctx context.Context) *DailyRoutine {
	node, err := drq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DailyRoutine ID in the query.
// Returns a *NotSingularError when more than one DailyRoutine ID is found.
// Returns a *NotFoundError when no entities are found.
func (drq *DailyRoutineQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = drq.Limit(2).IDs(setContextOp(ctx, drq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dailyroutine.Label}
	default:
		err = &NotSingularError{dailyroutine.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drq *DailyRoutineQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := drq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DailyRoutines.
func (drq *DailyRoutineQuery) All(ctx context.Context) ([]*DailyRoutine, error) {
	ctx = setContextOp(ctx, drq.ctx, "All")
	if err := drq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DailyRoutine, *DailyRoutineQuery]()
	return withInterceptors[[]*DailyRoutine](ctx, drq, qr, drq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drq *DailyRoutineQuery) AllX(ctx context.Context) []*DailyRoutine {
	nodes, err := drq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DailyRoutine IDs.
func (drq *DailyRoutineQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if drq.ctx.Unique == nil && drq.path != nil {
		drq.Unique(true)
	}
	ctx = setContextOp(ctx, drq.ctx, "IDs")
	if err = drq.Select(dailyroutine.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drq *DailyRoutineQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := drq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drq *DailyRoutineQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drq.ctx, "Count")
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drq, querierCount[*DailyRoutineQuery](), drq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drq *DailyRoutineQuery) CountX(ctx context.Context) int {
	count, err := drq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drq *DailyRoutineQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drq.ctx, "Exist")
	switch _, err := drq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drq *DailyRoutineQuery) ExistX(ctx context.Context) bool {
	exist, err := drq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DailyRoutineQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drq *DailyRoutineQuery) Clone() *DailyRoutineQuery {
	if drq == nil {
		return nil
	}
	return &DailyRoutineQuery{
		config:             drq.config,
		ctx:                drq.ctx.Clone(),
		order:              append([]dailyroutine.OrderOption{}, drq.order...),
		inters:             append([]Interceptor{}, drq.inters...),
		predicates:         append([]predicate.DailyRoutine{}, drq.predicates...),
		withProgramVersion: drq.withProgramVersion.Clone(),
		withRoutineActs:    drq.withRoutineActs.Clone(),
		// clone intermediate query.
		sql:  drq.sql.Clone(),
		path: drq.path,
	}
}

// WithProgramVersion tells the query-builder to eager-load the nodes that are connected to
// the "program_version" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DailyRoutineQuery) WithProgramVersion(opts ...func(*ProgramVersionQuery)) *DailyRoutineQuery {
	query := (&ProgramVersionClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withProgramVersion = query
	return drq
}

// WithRoutineActs tells the query-builder to eager-load the nodes that are connected to
// the "routine_acts" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DailyRoutineQuery) WithRoutineActs(opts ...func(*RoutineActQuery)) *DailyRoutineQuery {
	query := (&RoutineActClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withRoutineActs = query
	return drq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DailyRoutine.Query().
//		GroupBy(dailyroutine.FieldCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (drq *DailyRoutineQuery) GroupBy(field string, fields ...string) *DailyRoutineGroupBy {
	drq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DailyRoutineGroupBy{build: drq}
	grbuild.flds = &drq.ctx.Fields
	grbuild.label = dailyroutine.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//	}
//
//	client.DailyRoutine.Query().
//		Select(dailyroutine.FieldCode).
//		Scan(ctx, &v)
func (drq *DailyRoutineQuery) Select(fields ...string) *DailyRoutineSelect {
	drq.ctx.Fields = append(drq.ctx.Fields, fields...)
	sbuild := &DailyRoutineSelect{DailyRoutineQuery: drq}
	sbuild.label = dailyroutine.Label
	sbuild.flds, sbuild.scan = &drq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DailyRoutineSelect configured with the given aggregations.
func (drq *DailyRoutineQuery) Aggregate(fns ...AggregateFunc) *DailyRoutineSelect {
	return drq.Select().Aggregate(fns...)
}

func (drq *DailyRoutineQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drq); err != nil {
				return err
			}
		}
	}
	for _, f := range drq.ctx.Fields {
		if !dailyroutine.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if drq.path != nil {
		prev, err := drq.path(ctx)
		if err != nil {
			return err
		}
		drq.sql = prev
	}
	return nil
}

func (drq *DailyRoutineQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DailyRoutine, error) {
	var (
		nodes       = []*DailyRoutine{}
		withFKs     = drq.withFKs
		_spec       = drq.querySpec()
		loadedTypes = [2]bool{
			drq.withProgramVersion != nil,
			drq.withRoutineActs != nil,
		}
	)
	if drq.withProgramVersion != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, dailyroutine.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DailyRoutine).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DailyRoutine{config: drq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drq.withProgramVersion; query != nil {
		if err := drq.loadProgramVersion(ctx, query, nodes, nil,
			func(n *DailyRoutine, e *ProgramVersion) { n.Edges.ProgramVersion = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withRoutineActs; query != nil {
		if err := drq.loadRoutineActs(ctx, query, nodes,
			func(n *DailyRoutine) { n.Edges.RoutineActs = []*RoutineAct{} },
			func(n *DailyRoutine, e *RoutineAct) { n.Edges.RoutineActs = append(n.Edges.RoutineActs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drq *DailyRoutineQuery) loadProgramVersion(ctx context.Context, query *ProgramVersionQuery, nodes []*DailyRoutine, init func(*DailyRoutine), assign func(*DailyRoutine, *ProgramVersion)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*DailyRoutine)
	for i := range nodes {
		if nodes[i].program_version_daily_routines == nil {
			continue
		}
		fk := *nodes[i].program_version_daily_routines
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(programversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "program_version_daily_routines" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DailyRoutineQuery) loadRoutineActs(ctx context.Context, query *RoutineActQuery, nodes []*DailyRoutine, init func(*DailyRoutine), assign func(*DailyRoutine, *RoutineAct)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DailyRoutine)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RoutineAct(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dailyroutine.RoutineActsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.daily_routine_routine_acts
		if fk == nil {
			return fmt.Errorf(`foreign-key "daily_routine_routine_acts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "daily_routine_routine_acts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (drq *DailyRoutineQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drq.querySpec()
	_spec.Node.Columns = drq.ctx.Fields
	if len(drq.ctx.Fields) > 0 {
		_spec.Unique = drq.ctx.Unique != nil && *drq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drq.driver, _spec)
}

func (drq *DailyRoutineQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(dailyroutine.Table, dailyroutine.Columns, sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64))
	_spec.From = drq.sql
	if unique := drq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drq.path != nil {
		_spec.Unique = true
	}
	if fields := drq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailyroutine.FieldID)
		for i := range fields {
			if fields[i] != dailyroutine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := drq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drq *DailyRoutineQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drq.driver.Dialect())
	t1 := builder.Table(dailyroutine.Table)
	columns := drq.ctx.Fields
	if len(columns) == 0 {
		columns = dailyroutine.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drq.sql != nil {
		selector = drq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drq.ctx.Unique != nil && *drq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range drq.predicates {
		p(selector)
	}
	for _, p := range drq.order {
		p(selector)
	}
	if offset := drq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DailyRoutineGroupBy is the group-by builder for DailyRoutine entities.
type DailyRoutineGroupBy struct {
	selector
	build *DailyRoutineQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drgb *DailyRoutineGroupBy) Aggregate(fns ...AggregateFunc) *DailyRoutineGroupBy {
	drgb.fns = append(drgb.fns, fns...)
	return drgb
}

// Scan applies the selector query and scans the result into the given value.
func (drgb *DailyRoutineGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drgb.build.ctx, "GroupBy")
	if err := drgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DailyRoutineQuery, *DailyRoutineGroupBy](ctx, drgb.build, drgb, drgb.build.inters, v)
}

func (drgb *DailyRoutineGroupBy) sqlScan(ctx context.Context, root *DailyRoutineQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drgb.fns))
	for _, fn := range drgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drgb.flds)+len(drgb.fns))
		for _, f := range *drgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DailyRoutineSelect is the builder for selecting fields of DailyRoutine entities.
type DailyRoutineSelect struct {
	*DailyRoutineQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drs *DailyRoutineSelect) Aggregate(fns ...AggregateFunc) *DailyRoutineSelect {
	drs.fns = append(drs.fns, fns...)
	return drs
}

// Scan applies the selector query and scans the result into the given value.
func (drs *DailyRoutineSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drs.ctx, "Select")
	if err := drs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DailyRoutineQuery, *DailyRoutineSelect](ctx, drs.DailyRoutineQuery, drs, drs.inters, v)
}

func (drs *DailyRoutineSelect) sqlScan(ctx context.Context, root *DailyRoutineQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drs.fns))
	for _, fn := range drs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

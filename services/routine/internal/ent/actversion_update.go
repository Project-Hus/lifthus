// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/act"
	"routine/internal/ent/actimage"
	"routine/internal/ent/actversion"
	"routine/internal/ent/image"
	"routine/internal/ent/predicate"
	"routine/internal/ent/routineact"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActVersionUpdate is the builder for updating ActVersion entities.
type ActVersionUpdate struct {
	config
	hooks    []Hook
	mutation *ActVersionMutation
}

// Where appends a list predicates to the ActVersionUpdate builder.
func (avu *ActVersionUpdate) Where(ps ...predicate.ActVersion) *ActVersionUpdate {
	avu.mutation.Where(ps...)
	return avu
}

// SetText sets the "text" field.
func (avu *ActVersionUpdate) SetText(s string) *ActVersionUpdate {
	avu.mutation.SetText(s)
	return avu
}

// SetActID sets the "act" edge to the Act entity by ID.
func (avu *ActVersionUpdate) SetActID(id uint64) *ActVersionUpdate {
	avu.mutation.SetActID(id)
	return avu
}

// SetAct sets the "act" edge to the Act entity.
func (avu *ActVersionUpdate) SetAct(a *Act) *ActVersionUpdate {
	return avu.SetActID(a.ID)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (avu *ActVersionUpdate) AddImageIDs(ids ...uint64) *ActVersionUpdate {
	avu.mutation.AddImageIDs(ids...)
	return avu
}

// AddImages adds the "images" edges to the Image entity.
func (avu *ActVersionUpdate) AddImages(i ...*Image) *ActVersionUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return avu.AddImageIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (avu *ActVersionUpdate) AddRoutineActIDs(ids ...uint64) *ActVersionUpdate {
	avu.mutation.AddRoutineActIDs(ids...)
	return avu
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (avu *ActVersionUpdate) AddRoutineActs(r ...*RoutineAct) *ActVersionUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return avu.AddRoutineActIDs(ids...)
}

// AddActImageIDs adds the "act_images" edge to the ActImage entity by IDs.
func (avu *ActVersionUpdate) AddActImageIDs(ids ...uint64) *ActVersionUpdate {
	avu.mutation.AddActImageIDs(ids...)
	return avu
}

// AddActImages adds the "act_images" edges to the ActImage entity.
func (avu *ActVersionUpdate) AddActImages(a ...*ActImage) *ActVersionUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return avu.AddActImageIDs(ids...)
}

// Mutation returns the ActVersionMutation object of the builder.
func (avu *ActVersionUpdate) Mutation() *ActVersionMutation {
	return avu.mutation
}

// ClearAct clears the "act" edge to the Act entity.
func (avu *ActVersionUpdate) ClearAct() *ActVersionUpdate {
	avu.mutation.ClearAct()
	return avu
}

// ClearImages clears all "images" edges to the Image entity.
func (avu *ActVersionUpdate) ClearImages() *ActVersionUpdate {
	avu.mutation.ClearImages()
	return avu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (avu *ActVersionUpdate) RemoveImageIDs(ids ...uint64) *ActVersionUpdate {
	avu.mutation.RemoveImageIDs(ids...)
	return avu
}

// RemoveImages removes "images" edges to Image entities.
func (avu *ActVersionUpdate) RemoveImages(i ...*Image) *ActVersionUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return avu.RemoveImageIDs(ids...)
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (avu *ActVersionUpdate) ClearRoutineActs() *ActVersionUpdate {
	avu.mutation.ClearRoutineActs()
	return avu
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (avu *ActVersionUpdate) RemoveRoutineActIDs(ids ...uint64) *ActVersionUpdate {
	avu.mutation.RemoveRoutineActIDs(ids...)
	return avu
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (avu *ActVersionUpdate) RemoveRoutineActs(r ...*RoutineAct) *ActVersionUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return avu.RemoveRoutineActIDs(ids...)
}

// ClearActImages clears all "act_images" edges to the ActImage entity.
func (avu *ActVersionUpdate) ClearActImages() *ActVersionUpdate {
	avu.mutation.ClearActImages()
	return avu
}

// RemoveActImageIDs removes the "act_images" edge to ActImage entities by IDs.
func (avu *ActVersionUpdate) RemoveActImageIDs(ids ...uint64) *ActVersionUpdate {
	avu.mutation.RemoveActImageIDs(ids...)
	return avu
}

// RemoveActImages removes "act_images" edges to ActImage entities.
func (avu *ActVersionUpdate) RemoveActImages(a ...*ActImage) *ActVersionUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return avu.RemoveActImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avu *ActVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, avu.sqlSave, avu.mutation, avu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avu *ActVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := avu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avu *ActVersionUpdate) Exec(ctx context.Context) error {
	_, err := avu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avu *ActVersionUpdate) ExecX(ctx context.Context) {
	if err := avu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avu *ActVersionUpdate) check() error {
	if v, ok := avu.mutation.Text(); ok {
		if err := actversion.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "ActVersion.text": %w`, err)}
		}
	}
	if _, ok := avu.mutation.ActID(); avu.mutation.ActCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ActVersion.act"`)
	}
	return nil
}

func (avu *ActVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := avu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(actversion.Table, actversion.Columns, sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64))
	if ps := avu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avu.mutation.Text(); ok {
		_spec.SetField(actversion.FieldText, field.TypeString, value)
	}
	if avu.mutation.ActCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actversion.ActTable,
			Columns: []string{actversion.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.ActIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actversion.ActTable,
			Columns: []string{actversion.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actversion.ImagesTable,
			Columns: actversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !avu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actversion.ImagesTable,
			Columns: actversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actversion.ImagesTable,
			Columns: actversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avu.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actversion.RoutineActsTable,
			Columns: []string{actversion.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !avu.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actversion.RoutineActsTable,
			Columns: []string{actversion.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actversion.RoutineActsTable,
			Columns: []string{actversion.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avu.mutation.ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   actversion.ActImagesTable,
			Columns: []string{actversion.ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.RemovedActImagesIDs(); len(nodes) > 0 && !avu.mutation.ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   actversion.ActImagesTable,
			Columns: []string{actversion.ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avu.mutation.ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   actversion.ActImagesTable,
			Columns: []string{actversion.ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avu.mutation.done = true
	return n, nil
}

// ActVersionUpdateOne is the builder for updating a single ActVersion entity.
type ActVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActVersionMutation
}

// SetText sets the "text" field.
func (avuo *ActVersionUpdateOne) SetText(s string) *ActVersionUpdateOne {
	avuo.mutation.SetText(s)
	return avuo
}

// SetActID sets the "act" edge to the Act entity by ID.
func (avuo *ActVersionUpdateOne) SetActID(id uint64) *ActVersionUpdateOne {
	avuo.mutation.SetActID(id)
	return avuo
}

// SetAct sets the "act" edge to the Act entity.
func (avuo *ActVersionUpdateOne) SetAct(a *Act) *ActVersionUpdateOne {
	return avuo.SetActID(a.ID)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (avuo *ActVersionUpdateOne) AddImageIDs(ids ...uint64) *ActVersionUpdateOne {
	avuo.mutation.AddImageIDs(ids...)
	return avuo
}

// AddImages adds the "images" edges to the Image entity.
func (avuo *ActVersionUpdateOne) AddImages(i ...*Image) *ActVersionUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return avuo.AddImageIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (avuo *ActVersionUpdateOne) AddRoutineActIDs(ids ...uint64) *ActVersionUpdateOne {
	avuo.mutation.AddRoutineActIDs(ids...)
	return avuo
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (avuo *ActVersionUpdateOne) AddRoutineActs(r ...*RoutineAct) *ActVersionUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return avuo.AddRoutineActIDs(ids...)
}

// AddActImageIDs adds the "act_images" edge to the ActImage entity by IDs.
func (avuo *ActVersionUpdateOne) AddActImageIDs(ids ...uint64) *ActVersionUpdateOne {
	avuo.mutation.AddActImageIDs(ids...)
	return avuo
}

// AddActImages adds the "act_images" edges to the ActImage entity.
func (avuo *ActVersionUpdateOne) AddActImages(a ...*ActImage) *ActVersionUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return avuo.AddActImageIDs(ids...)
}

// Mutation returns the ActVersionMutation object of the builder.
func (avuo *ActVersionUpdateOne) Mutation() *ActVersionMutation {
	return avuo.mutation
}

// ClearAct clears the "act" edge to the Act entity.
func (avuo *ActVersionUpdateOne) ClearAct() *ActVersionUpdateOne {
	avuo.mutation.ClearAct()
	return avuo
}

// ClearImages clears all "images" edges to the Image entity.
func (avuo *ActVersionUpdateOne) ClearImages() *ActVersionUpdateOne {
	avuo.mutation.ClearImages()
	return avuo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (avuo *ActVersionUpdateOne) RemoveImageIDs(ids ...uint64) *ActVersionUpdateOne {
	avuo.mutation.RemoveImageIDs(ids...)
	return avuo
}

// RemoveImages removes "images" edges to Image entities.
func (avuo *ActVersionUpdateOne) RemoveImages(i ...*Image) *ActVersionUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return avuo.RemoveImageIDs(ids...)
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (avuo *ActVersionUpdateOne) ClearRoutineActs() *ActVersionUpdateOne {
	avuo.mutation.ClearRoutineActs()
	return avuo
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (avuo *ActVersionUpdateOne) RemoveRoutineActIDs(ids ...uint64) *ActVersionUpdateOne {
	avuo.mutation.RemoveRoutineActIDs(ids...)
	return avuo
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (avuo *ActVersionUpdateOne) RemoveRoutineActs(r ...*RoutineAct) *ActVersionUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return avuo.RemoveRoutineActIDs(ids...)
}

// ClearActImages clears all "act_images" edges to the ActImage entity.
func (avuo *ActVersionUpdateOne) ClearActImages() *ActVersionUpdateOne {
	avuo.mutation.ClearActImages()
	return avuo
}

// RemoveActImageIDs removes the "act_images" edge to ActImage entities by IDs.
func (avuo *ActVersionUpdateOne) RemoveActImageIDs(ids ...uint64) *ActVersionUpdateOne {
	avuo.mutation.RemoveActImageIDs(ids...)
	return avuo
}

// RemoveActImages removes "act_images" edges to ActImage entities.
func (avuo *ActVersionUpdateOne) RemoveActImages(a ...*ActImage) *ActVersionUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return avuo.RemoveActImageIDs(ids...)
}

// Where appends a list predicates to the ActVersionUpdate builder.
func (avuo *ActVersionUpdateOne) Where(ps ...predicate.ActVersion) *ActVersionUpdateOne {
	avuo.mutation.Where(ps...)
	return avuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avuo *ActVersionUpdateOne) Select(field string, fields ...string) *ActVersionUpdateOne {
	avuo.fields = append([]string{field}, fields...)
	return avuo
}

// Save executes the query and returns the updated ActVersion entity.
func (avuo *ActVersionUpdateOne) Save(ctx context.Context) (*ActVersion, error) {
	return withHooks(ctx, avuo.sqlSave, avuo.mutation, avuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avuo *ActVersionUpdateOne) SaveX(ctx context.Context) *ActVersion {
	node, err := avuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avuo *ActVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := avuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avuo *ActVersionUpdateOne) ExecX(ctx context.Context) {
	if err := avuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avuo *ActVersionUpdateOne) check() error {
	if v, ok := avuo.mutation.Text(); ok {
		if err := actversion.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "ActVersion.text": %w`, err)}
		}
	}
	if _, ok := avuo.mutation.ActID(); avuo.mutation.ActCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ActVersion.act"`)
	}
	return nil
}

func (avuo *ActVersionUpdateOne) sqlSave(ctx context.Context) (_node *ActVersion, err error) {
	if err := avuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actversion.Table, actversion.Columns, sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64))
	id, ok := avuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actversion.FieldID)
		for _, f := range fields {
			if !actversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != actversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avuo.mutation.Text(); ok {
		_spec.SetField(actversion.FieldText, field.TypeString, value)
	}
	if avuo.mutation.ActCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actversion.ActTable,
			Columns: []string{actversion.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.ActIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actversion.ActTable,
			Columns: []string{actversion.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actversion.ImagesTable,
			Columns: actversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !avuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actversion.ImagesTable,
			Columns: actversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actversion.ImagesTable,
			Columns: actversion.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avuo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actversion.RoutineActsTable,
			Columns: []string{actversion.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !avuo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actversion.RoutineActsTable,
			Columns: []string{actversion.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actversion.RoutineActsTable,
			Columns: []string{actversion.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avuo.mutation.ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   actversion.ActImagesTable,
			Columns: []string{actversion.ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.RemovedActImagesIDs(); len(nodes) > 0 && !avuo.mutation.ActImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   actversion.ActImagesTable,
			Columns: []string{actversion.ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avuo.mutation.ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   actversion.ActImagesTable,
			Columns: []string{actversion.ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActVersion{config: avuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActsColumns holds the columns for the "acts" table.
	ActsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "code", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "author", Type: field.TypeInt64},
		{Name: "act_type", Type: field.TypeEnum, Enums: []string{"weight", "time", "simple"}},
		{Name: "name", Type: field.TypeString, Size: 50},
		{Name: "text", Type: field.TypeString, Size: 2147483647},
		{Name: "standard", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
	}
	// ActsTable holds the schema information for the "acts" table.
	ActsTable = &schema.Table{
		Name:       "acts",
		Columns:    ActsColumns,
		PrimaryKey: []*schema.Column{ActsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "act_code",
				Unique:  true,
				Columns: []*schema.Column{ActsColumns[1]},
			},
			{
				Name:    "act_name",
				Unique:  false,
				Columns: []*schema.Column{ActsColumns[4]},
			},
		},
	}
	// ProgramsColumns holds the columns for the "programs" table.
	ProgramsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "code", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "program_type", Type: field.TypeEnum, Enums: []string{"weekly", "daily"}},
		{Name: "title", Type: field.TypeString, Size: 100},
		{Name: "author", Type: field.TypeInt64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "parent_program", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "parent_version", Type: field.TypeInt, Nullable: true},
	}
	// ProgramsTable holds the schema information for the "programs" table.
	ProgramsTable = &schema.Table{
		Name:       "programs",
		Columns:    ProgramsColumns,
		PrimaryKey: []*schema.Column{ProgramsColumns[0]},
	}
	// ProgramReleasesColumns holds the columns for the "program_releases" table.
	ProgramReleasesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "version", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "text", Type: field.TypeString, Size: 2147483647},
		{Name: "program_program_releases", Type: field.TypeInt64},
	}
	// ProgramReleasesTable holds the schema information for the "program_releases" table.
	ProgramReleasesTable = &schema.Table{
		Name:       "program_releases",
		Columns:    ProgramReleasesColumns,
		PrimaryKey: []*schema.Column{ProgramReleasesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_releases_programs_program_releases",
				Columns:    []*schema.Column{ProgramReleasesColumns[4]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RoutinesColumns holds the columns for the "routines" table.
	RoutinesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "day", Type: field.TypeInt},
		{Name: "program_release_routines", Type: field.TypeInt64},
	}
	// RoutinesTable holds the schema information for the "routines" table.
	RoutinesTable = &schema.Table{
		Name:       "routines",
		Columns:    RoutinesColumns,
		PrimaryKey: []*schema.Column{RoutinesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "routines_program_releases_routines",
				Columns:    []*schema.Column{RoutinesColumns[2]},
				RefColumns: []*schema.Column{ProgramReleasesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RoutineActsColumns holds the columns for the "routine_acts" table.
	RoutineActsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "act_code", Type: field.TypeString, Size: 20},
		{Name: "stage", Type: field.TypeEnum, Enums: []string{"warmup", "main", "cooldown"}},
		{Name: "reps_or_meters", Type: field.TypeUint},
		{Name: "ratio_or_secs", Type: field.TypeFloat64},
		{Name: "act_routine_acts", Type: field.TypeInt64},
		{Name: "routine_routine_acts", Type: field.TypeInt64},
	}
	// RoutineActsTable holds the schema information for the "routine_acts" table.
	RoutineActsTable = &schema.Table{
		Name:       "routine_acts",
		Columns:    RoutineActsColumns,
		PrimaryKey: []*schema.Column{RoutineActsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "routine_acts_acts_routine_acts",
				Columns:    []*schema.Column{RoutineActsColumns[6]},
				RefColumns: []*schema.Column{ActsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "routine_acts_routines_routine_acts",
				Columns:    []*schema.Column{RoutineActsColumns[7]},
				RefColumns: []*schema.Column{RoutinesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// S3actImagesColumns holds the columns for the "s3act_images" table.
	S3actImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "act_id", Type: field.TypeInt64},
		{Name: "image_id", Type: field.TypeInt64},
	}
	// S3actImagesTable holds the schema information for the "s3act_images" table.
	S3actImagesTable = &schema.Table{
		Name:       "s3act_images",
		Columns:    S3actImagesColumns,
		PrimaryKey: []*schema.Column{S3actImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "s3act_images_acts_s3_act_images",
				Columns:    []*schema.Column{S3actImagesColumns[2]},
				RefColumns: []*schema.Column{ActsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "s3act_images_s3images_s3_image",
				Columns:    []*schema.Column{S3actImagesColumns[3]},
				RefColumns: []*schema.Column{S3imagesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// S3imagesColumns holds the columns for the "s3images" table.
	S3imagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "src", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// S3imagesTable holds the schema information for the "s3images" table.
	S3imagesTable = &schema.Table{
		Name:       "s3images",
		Columns:    S3imagesColumns,
		PrimaryKey: []*schema.Column{S3imagesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "s3image_key",
				Unique:  true,
				Columns: []*schema.Column{S3imagesColumns[1]},
			},
			{
				Name:    "s3image_src",
				Unique:  true,
				Columns: []*schema.Column{S3imagesColumns[2]},
			},
		},
	}
	// S3programImagesColumns holds the columns for the "s3program_images" table.
	S3programImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "program_release_id", Type: field.TypeInt64},
		{Name: "image_id", Type: field.TypeInt64},
	}
	// S3programImagesTable holds the schema information for the "s3program_images" table.
	S3programImagesTable = &schema.Table{
		Name:       "s3program_images",
		Columns:    S3programImagesColumns,
		PrimaryKey: []*schema.Column{S3programImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "s3program_images_program_releases_s3_program_images",
				Columns:    []*schema.Column{S3programImagesColumns[2]},
				RefColumns: []*schema.Column{ProgramReleasesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "s3program_images_s3images_s3_image",
				Columns:    []*schema.Column{S3programImagesColumns[3]},
				RefColumns: []*schema.Column{S3imagesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActsTable,
		ProgramsTable,
		ProgramReleasesTable,
		RoutinesTable,
		RoutineActsTable,
		S3actImagesTable,
		S3imagesTable,
		S3programImagesTable,
	}
)

func init() {
	ProgramReleasesTable.ForeignKeys[0].RefTable = ProgramsTable
	RoutinesTable.ForeignKeys[0].RefTable = ProgramReleasesTable
	RoutineActsTable.ForeignKeys[0].RefTable = ActsTable
	RoutineActsTable.ForeignKeys[1].RefTable = RoutinesTable
	S3actImagesTable.ForeignKeys[0].RefTable = ActsTable
	S3actImagesTable.ForeignKeys[1].RefTable = S3imagesTable
	S3programImagesTable.ForeignKeys[0].RefTable = ProgramReleasesTable
	S3programImagesTable.ForeignKeys[1].RefTable = S3imagesTable
}

// Code generated by ent, DO NOT EDIT.

package act

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the act type in the database.
	Label = "act"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldActType holds the string denoting the act_type field in the database.
	FieldActType = "act_type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeActVersions holds the string denoting the act_versions edge name in mutations.
	EdgeActVersions = "act_versions"
	// Table holds the table name of the act in the database.
	Table = "acts"
	// ActVersionsTable is the table that holds the act_versions relation/edge.
	ActVersionsTable = "act_versions"
	// ActVersionsInverseTable is the table name for the ActVersion entity.
	// It exists in this package in order to avoid circular dependency with the "actversion" package.
	ActVersionsInverseTable = "act_versions"
	// ActVersionsColumn is the table column denoting the act_versions relation/edge.
	ActVersionsColumn = "act_act_versions"
)

// Columns holds all SQL columns for act fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldActType,
	FieldName,
	FieldAuthor,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// ActType defines the type for the "act_type" enum field.
type ActType string

// ActType values.
const (
	ActTypeWeight ActType = "weight"
	ActTypeTime   ActType = "time"
	ActTypeSimple ActType = "simple"
)

func (at ActType) String() string {
	return string(at)
}

// ActTypeValidator is a validator for the "act_type" field enum values. It is called by the builders before save.
func ActTypeValidator(at ActType) error {
	switch at {
	case ActTypeWeight, ActTypeTime, ActTypeSimple:
		return nil
	default:
		return fmt.Errorf("act: invalid enum value for act_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the Act queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByActType orders the results by the act_type field.
func ByActType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByActVersionsCount orders the results by act_versions count.
func ByActVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActVersionsStep(), opts...)
	}
}

// ByActVersions orders the results by act_versions terms.
func ByActVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActVersionsTable, ActVersionsColumn),
	)
}

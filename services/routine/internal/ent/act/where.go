// Code generated by ent, DO NOT EDIT.

package act

import (
	"routine/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Act {
	return predicate.Act(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Act {
	return predicate.Act(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Act {
	return predicate.Act(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Act {
	return predicate.Act(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldCode, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v int64) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldAuthor, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldName, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldText, v))
}

// Standard applies equality check predicate on the "standard" field. It's identical to StandardEQ.
func Standard(v bool) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldStandard, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldCreatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Act {
	return predicate.Act(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Act {
	return predicate.Act(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Act {
	return predicate.Act(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Act {
	return predicate.Act(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Act {
	return predicate.Act(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Act {
	return predicate.Act(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Act {
	return predicate.Act(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Act {
	return predicate.Act(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Act {
	return predicate.Act(sql.FieldContainsFold(FieldCode, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v int64) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v int64) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...int64) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...int64) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v int64) predicate.Act {
	return predicate.Act(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v int64) predicate.Act {
	return predicate.Act(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v int64) predicate.Act {
	return predicate.Act(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v int64) predicate.Act {
	return predicate.Act(sql.FieldLTE(FieldAuthor, v))
}

// ActTypeEQ applies the EQ predicate on the "act_type" field.
func ActTypeEQ(v ActType) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldActType, v))
}

// ActTypeNEQ applies the NEQ predicate on the "act_type" field.
func ActTypeNEQ(v ActType) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldActType, v))
}

// ActTypeIn applies the In predicate on the "act_type" field.
func ActTypeIn(vs ...ActType) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldActType, vs...))
}

// ActTypeNotIn applies the NotIn predicate on the "act_type" field.
func ActTypeNotIn(vs ...ActType) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldActType, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Act {
	return predicate.Act(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Act {
	return predicate.Act(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Act {
	return predicate.Act(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Act {
	return predicate.Act(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Act {
	return predicate.Act(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Act {
	return predicate.Act(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Act {
	return predicate.Act(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Act {
	return predicate.Act(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Act {
	return predicate.Act(sql.FieldContainsFold(FieldName, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Act {
	return predicate.Act(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Act {
	return predicate.Act(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Act {
	return predicate.Act(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Act {
	return predicate.Act(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Act {
	return predicate.Act(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Act {
	return predicate.Act(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Act {
	return predicate.Act(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Act {
	return predicate.Act(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Act {
	return predicate.Act(sql.FieldContainsFold(FieldText, v))
}

// StandardEQ applies the EQ predicate on the "standard" field.
func StandardEQ(v bool) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldStandard, v))
}

// StandardNEQ applies the NEQ predicate on the "standard" field.
func StandardNEQ(v bool) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldStandard, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Act {
	return predicate.Act(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Act {
	return predicate.Act(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Act {
	return predicate.Act(sql.FieldLTE(FieldCreatedAt, v))
}

// HasS3ActImages applies the HasEdge predicate on the "s3_act_images" edge.
func HasS3ActImages() predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, S3ActImagesTable, S3ActImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasS3ActImagesWith applies the HasEdge predicate on the "s3_act_images" edge with a given conditions (other predicates).
func HasS3ActImagesWith(preds ...predicate.S3ActImage) predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		step := newS3ActImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoutineActs applies the HasEdge predicate on the "routine_acts" edge.
func HasRoutineActs() predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoutineActsTable, RoutineActsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoutineActsWith applies the HasEdge predicate on the "routine_acts" edge with a given conditions (other predicates).
func HasRoutineActsWith(preds ...predicate.RoutineAct) predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		step := newRoutineActsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Act) predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Act) predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Act) predicate.Act {
	return predicate.Act(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/internal/ent/actimage"
	"routine/internal/ent/actversion"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ActImage is the model entity for the ActImage schema.
type ActImage struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order uint `json:"order,omitempty"`
	// Src holds the value of the "src" field.
	Src string `json:"src,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActImageQuery when eager-loading is set.
	Edges                  ActImageEdges `json:"edges"`
	act_version_act_images *uint64
	selectValues           sql.SelectValues
}

// ActImageEdges holds the relations/edges for other nodes in the graph.
type ActImageEdges struct {
	// ActVersion holds the value of the act_version edge.
	ActVersion *ActVersion `json:"act_version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActVersionOrErr returns the ActVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActImageEdges) ActVersionOrErr() (*ActVersion, error) {
	if e.loadedTypes[0] {
		if e.ActVersion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: actversion.Label}
		}
		return e.ActVersion, nil
	}
	return nil, &NotLoadedError{edge: "act_version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case actimage.FieldID, actimage.FieldOrder:
			values[i] = new(sql.NullInt64)
		case actimage.FieldSrc:
			values[i] = new(sql.NullString)
		case actimage.ForeignKeys[0]: // act_version_act_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActImage fields.
func (ai *ActImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = uint64(value.Int64)
		case actimage.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ai.Order = uint(value.Int64)
			}
		case actimage.FieldSrc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src", values[i])
			} else if value.Valid {
				ai.Src = value.String
			}
		case actimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field act_version_act_images", value)
			} else if value.Valid {
				ai.act_version_act_images = new(uint64)
				*ai.act_version_act_images = uint64(value.Int64)
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActImage.
// This includes values selected through modifiers, order, etc.
func (ai *ActImage) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryActVersion queries the "act_version" edge of the ActImage entity.
func (ai *ActImage) QueryActVersion() *ActVersionQuery {
	return NewActImageClient(ai.config).QueryActVersion(ai)
}

// Update returns a builder for updating this ActImage.
// Note that you need to call ActImage.Unwrap() before calling this method if this ActImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *ActImage) Update() *ActImageUpdateOne {
	return NewActImageClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the ActImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *ActImage) Unwrap() *ActImage {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActImage is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *ActImage) String() string {
	var builder strings.Builder
	builder.WriteString("ActImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", ai.Order))
	builder.WriteString(", ")
	builder.WriteString("src=")
	builder.WriteString(ai.Src)
	builder.WriteByte(')')
	return builder.String()
}

// ActImages is a parsable slice of ActImage.
type ActImages []*ActImage

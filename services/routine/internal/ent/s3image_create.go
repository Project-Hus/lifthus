// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/s3actimage"
	"routine/internal/ent/s3image"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// S3ImageCreate is the builder for creating a S3Image entity.
type S3ImageCreate struct {
	config
	mutation *S3ImageMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (sc *S3ImageCreate) SetKey(s string) *S3ImageCreate {
	sc.mutation.SetKey(s)
	return sc
}

// SetSrc sets the "src" field.
func (sc *S3ImageCreate) SetSrc(s string) *S3ImageCreate {
	sc.mutation.SetSrc(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *S3ImageCreate) SetCreatedAt(t time.Time) *S3ImageCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetID sets the "id" field.
func (sc *S3ImageCreate) SetID(i int64) *S3ImageCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddS3ActImageIDs adds the "s3_act_images" edge to the S3ActImage entity by IDs.
func (sc *S3ImageCreate) AddS3ActImageIDs(ids ...int64) *S3ImageCreate {
	sc.mutation.AddS3ActImageIDs(ids...)
	return sc
}

// AddS3ActImages adds the "s3_act_images" edges to the S3ActImage entity.
func (sc *S3ImageCreate) AddS3ActImages(s ...*S3ActImage) *S3ImageCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddS3ActImageIDs(ids...)
}

// Mutation returns the S3ImageMutation object of the builder.
func (sc *S3ImageCreate) Mutation() *S3ImageMutation {
	return sc.mutation
}

// Save creates the S3Image in the database.
func (sc *S3ImageCreate) Save(ctx context.Context) (*S3Image, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *S3ImageCreate) SaveX(ctx context.Context) *S3Image {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *S3ImageCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *S3ImageCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *S3ImageCreate) check() error {
	if _, ok := sc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "S3Image.key"`)}
	}
	if _, ok := sc.mutation.Src(); !ok {
		return &ValidationError{Name: "src", err: errors.New(`ent: missing required field "S3Image.src"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "S3Image.created_at"`)}
	}
	return nil
}

func (sc *S3ImageCreate) sqlSave(ctx context.Context) (*S3Image, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *S3ImageCreate) createSpec() (*S3Image, *sqlgraph.CreateSpec) {
	var (
		_node = &S3Image{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(s3image.Table, sqlgraph.NewFieldSpec(s3image.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Key(); ok {
		_spec.SetField(s3image.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := sc.mutation.Src(); ok {
		_spec.SetField(s3image.FieldSrc, field.TypeString, value)
		_node.Src = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(s3image.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.S3ActImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   s3image.S3ActImagesTable,
			Columns: []string{s3image.S3ActImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3actimage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// S3ImageCreateBulk is the builder for creating many S3Image entities in bulk.
type S3ImageCreateBulk struct {
	config
	builders []*S3ImageCreate
}

// Save creates the S3Image entities in the database.
func (scb *S3ImageCreateBulk) Save(ctx context.Context) ([]*S3Image, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*S3Image, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*S3ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *S3ImageCreateBulk) SaveX(ctx context.Context) []*S3Image {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *S3ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *S3ImageCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

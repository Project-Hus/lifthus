// Code generated by ent, DO NOT EDIT.

package actimage

import (
	"routine/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ActImage {
	return predicate.ActImage(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldEQ(FieldOrder, v))
}

// Src applies equality check predicate on the "src" field. It's identical to SrcEQ.
func Src(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldEQ(FieldSrc, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v uint) predicate.ActImage {
	return predicate.ActImage(sql.FieldLTE(FieldOrder, v))
}

// SrcEQ applies the EQ predicate on the "src" field.
func SrcEQ(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldEQ(FieldSrc, v))
}

// SrcNEQ applies the NEQ predicate on the "src" field.
func SrcNEQ(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldNEQ(FieldSrc, v))
}

// SrcIn applies the In predicate on the "src" field.
func SrcIn(vs ...string) predicate.ActImage {
	return predicate.ActImage(sql.FieldIn(FieldSrc, vs...))
}

// SrcNotIn applies the NotIn predicate on the "src" field.
func SrcNotIn(vs ...string) predicate.ActImage {
	return predicate.ActImage(sql.FieldNotIn(FieldSrc, vs...))
}

// SrcGT applies the GT predicate on the "src" field.
func SrcGT(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldGT(FieldSrc, v))
}

// SrcGTE applies the GTE predicate on the "src" field.
func SrcGTE(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldGTE(FieldSrc, v))
}

// SrcLT applies the LT predicate on the "src" field.
func SrcLT(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldLT(FieldSrc, v))
}

// SrcLTE applies the LTE predicate on the "src" field.
func SrcLTE(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldLTE(FieldSrc, v))
}

// SrcContains applies the Contains predicate on the "src" field.
func SrcContains(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldContains(FieldSrc, v))
}

// SrcHasPrefix applies the HasPrefix predicate on the "src" field.
func SrcHasPrefix(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldHasPrefix(FieldSrc, v))
}

// SrcHasSuffix applies the HasSuffix predicate on the "src" field.
func SrcHasSuffix(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldHasSuffix(FieldSrc, v))
}

// SrcEqualFold applies the EqualFold predicate on the "src" field.
func SrcEqualFold(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldEqualFold(FieldSrc, v))
}

// SrcContainsFold applies the ContainsFold predicate on the "src" field.
func SrcContainsFold(v string) predicate.ActImage {
	return predicate.ActImage(sql.FieldContainsFold(FieldSrc, v))
}

// HasActVersion applies the HasEdge predicate on the "act_version" edge.
func HasActVersion() predicate.ActImage {
	return predicate.ActImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActVersionTable, ActVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActVersionWith applies the HasEdge predicate on the "act_version" edge with a given conditions (other predicates).
func HasActVersionWith(preds ...predicate.ActVersion) predicate.ActImage {
	return predicate.ActImage(func(s *sql.Selector) {
		step := newActVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActImage) predicate.ActImage {
	return predicate.ActImage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActImage) predicate.ActImage {
	return predicate.ActImage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActImage) predicate.ActImage {
	return predicate.ActImage(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/internal/ent/actversion"
	"routine/internal/ent/image"
	"routine/internal/ent/predicate"
	"routine/internal/ent/programversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetKey sets the "key" field.
func (iu *ImageUpdate) SetKey(s string) *ImageUpdate {
	iu.mutation.SetKey(s)
	return iu
}

// SetSrc sets the "src" field.
func (iu *ImageUpdate) SetSrc(s string) *ImageUpdate {
	iu.mutation.SetSrc(s)
	return iu
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by IDs.
func (iu *ImageUpdate) AddActVersionIDs(ids ...uint64) *ImageUpdate {
	iu.mutation.AddActVersionIDs(ids...)
	return iu
}

// AddActVersions adds the "act_versions" edges to the ActVersion entity.
func (iu *ImageUpdate) AddActVersions(a ...*ActVersion) *ImageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iu.AddActVersionIDs(ids...)
}

// AddProgramVersionIDs adds the "program_versions" edge to the ProgramVersion entity by IDs.
func (iu *ImageUpdate) AddProgramVersionIDs(ids ...uint64) *ImageUpdate {
	iu.mutation.AddProgramVersionIDs(ids...)
	return iu
}

// AddProgramVersions adds the "program_versions" edges to the ProgramVersion entity.
func (iu *ImageUpdate) AddProgramVersions(p ...*ProgramVersion) *ImageUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddProgramVersionIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearActVersions clears all "act_versions" edges to the ActVersion entity.
func (iu *ImageUpdate) ClearActVersions() *ImageUpdate {
	iu.mutation.ClearActVersions()
	return iu
}

// RemoveActVersionIDs removes the "act_versions" edge to ActVersion entities by IDs.
func (iu *ImageUpdate) RemoveActVersionIDs(ids ...uint64) *ImageUpdate {
	iu.mutation.RemoveActVersionIDs(ids...)
	return iu
}

// RemoveActVersions removes "act_versions" edges to ActVersion entities.
func (iu *ImageUpdate) RemoveActVersions(a ...*ActVersion) *ImageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iu.RemoveActVersionIDs(ids...)
}

// ClearProgramVersions clears all "program_versions" edges to the ProgramVersion entity.
func (iu *ImageUpdate) ClearProgramVersions() *ImageUpdate {
	iu.mutation.ClearProgramVersions()
	return iu
}

// RemoveProgramVersionIDs removes the "program_versions" edge to ProgramVersion entities by IDs.
func (iu *ImageUpdate) RemoveProgramVersionIDs(ids ...uint64) *ImageUpdate {
	iu.mutation.RemoveProgramVersionIDs(ids...)
	return iu
}

// RemoveProgramVersions removes "program_versions" edges to ProgramVersion entities.
func (iu *ImageUpdate) RemoveProgramVersions(p ...*ProgramVersion) *ImageUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemoveProgramVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImageUpdate) check() error {
	if v, ok := iu.mutation.Key(); ok {
		if err := image.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Image.key": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Src(); ok {
		if err := image.SrcValidator(v); err != nil {
			return &ValidationError{Name: "src", err: fmt.Errorf(`ent: validator failed for field "Image.src": %w`, err)}
		}
	}
	return nil
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Key(); ok {
		_spec.SetField(image.FieldKey, field.TypeString, value)
	}
	if value, ok := iu.mutation.Src(); ok {
		_spec.SetField(image.FieldSrc, field.TypeString, value)
	}
	if iu.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ActVersionsTable,
			Columns: image.ActVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedActVersionsIDs(); len(nodes) > 0 && !iu.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ActVersionsTable,
			Columns: image.ActVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ActVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ActVersionsTable,
			Columns: image.ActVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProgramVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProgramVersionsTable,
			Columns: image.ProgramVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedProgramVersionsIDs(); len(nodes) > 0 && !iu.mutation.ProgramVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProgramVersionsTable,
			Columns: image.ProgramVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProgramVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProgramVersionsTable,
			Columns: image.ProgramVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetKey sets the "key" field.
func (iuo *ImageUpdateOne) SetKey(s string) *ImageUpdateOne {
	iuo.mutation.SetKey(s)
	return iuo
}

// SetSrc sets the "src" field.
func (iuo *ImageUpdateOne) SetSrc(s string) *ImageUpdateOne {
	iuo.mutation.SetSrc(s)
	return iuo
}

// AddActVersionIDs adds the "act_versions" edge to the ActVersion entity by IDs.
func (iuo *ImageUpdateOne) AddActVersionIDs(ids ...uint64) *ImageUpdateOne {
	iuo.mutation.AddActVersionIDs(ids...)
	return iuo
}

// AddActVersions adds the "act_versions" edges to the ActVersion entity.
func (iuo *ImageUpdateOne) AddActVersions(a ...*ActVersion) *ImageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuo.AddActVersionIDs(ids...)
}

// AddProgramVersionIDs adds the "program_versions" edge to the ProgramVersion entity by IDs.
func (iuo *ImageUpdateOne) AddProgramVersionIDs(ids ...uint64) *ImageUpdateOne {
	iuo.mutation.AddProgramVersionIDs(ids...)
	return iuo
}

// AddProgramVersions adds the "program_versions" edges to the ProgramVersion entity.
func (iuo *ImageUpdateOne) AddProgramVersions(p ...*ProgramVersion) *ImageUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddProgramVersionIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearActVersions clears all "act_versions" edges to the ActVersion entity.
func (iuo *ImageUpdateOne) ClearActVersions() *ImageUpdateOne {
	iuo.mutation.ClearActVersions()
	return iuo
}

// RemoveActVersionIDs removes the "act_versions" edge to ActVersion entities by IDs.
func (iuo *ImageUpdateOne) RemoveActVersionIDs(ids ...uint64) *ImageUpdateOne {
	iuo.mutation.RemoveActVersionIDs(ids...)
	return iuo
}

// RemoveActVersions removes "act_versions" edges to ActVersion entities.
func (iuo *ImageUpdateOne) RemoveActVersions(a ...*ActVersion) *ImageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuo.RemoveActVersionIDs(ids...)
}

// ClearProgramVersions clears all "program_versions" edges to the ProgramVersion entity.
func (iuo *ImageUpdateOne) ClearProgramVersions() *ImageUpdateOne {
	iuo.mutation.ClearProgramVersions()
	return iuo
}

// RemoveProgramVersionIDs removes the "program_versions" edge to ProgramVersion entities by IDs.
func (iuo *ImageUpdateOne) RemoveProgramVersionIDs(ids ...uint64) *ImageUpdateOne {
	iuo.mutation.RemoveProgramVersionIDs(ids...)
	return iuo
}

// RemoveProgramVersions removes "program_versions" edges to ProgramVersion entities.
func (iuo *ImageUpdateOne) RemoveProgramVersions(p ...*ProgramVersion) *ImageUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemoveProgramVersionIDs(ids...)
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImageUpdateOne) check() error {
	if v, ok := iuo.mutation.Key(); ok {
		if err := image.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Image.key": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Src(); ok {
		if err := image.SrcValidator(v); err != nil {
			return &ValidationError{Name: "src", err: fmt.Errorf(`ent: validator failed for field "Image.src": %w`, err)}
		}
	}
	return nil
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeUint64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Key(); ok {
		_spec.SetField(image.FieldKey, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Src(); ok {
		_spec.SetField(image.FieldSrc, field.TypeString, value)
	}
	if iuo.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ActVersionsTable,
			Columns: image.ActVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedActVersionsIDs(); len(nodes) > 0 && !iuo.mutation.ActVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ActVersionsTable,
			Columns: image.ActVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ActVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ActVersionsTable,
			Columns: image.ActVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProgramVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProgramVersionsTable,
			Columns: image.ProgramVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedProgramVersionsIDs(); len(nodes) > 0 && !iuo.mutation.ProgramVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProgramVersionsTable,
			Columns: image.ProgramVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProgramVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProgramVersionsTable,
			Columns: image.ProgramVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programversion.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}

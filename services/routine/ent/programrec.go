// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/program"
	"routine/ent/programrec"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProgramRec is the model entity for the ProgramRec schema.
type ProgramRec struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Author holds the value of the "author" field.
	Author uint64 `json:"author,omitempty"`
	// ProgramID holds the value of the "program_id" field.
	ProgramID uint64 `json:"program_id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Status holds the value of the "status" field.
	Status programrec.Status `json:"status,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramRecQuery when eager-loading is set.
	Edges        ProgramRecEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProgramRecEdges holds the relations/edges for other nodes in the graph.
type ProgramRecEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// WeeklyRoutineRecs holds the value of the weekly_routine_recs edge.
	WeeklyRoutineRecs []*WeeklyRoutineRec `json:"weekly_routine_recs,omitempty"`
	// DailyRoutineRecs holds the value of the daily_routine_recs edge.
	DailyRoutineRecs []*DailyRoutineRec `json:"daily_routine_recs,omitempty"`
	// BodyInfo holds the value of the body_info edge.
	BodyInfo []*BodyInfo `json:"body_info,omitempty"`
	// OneRepMax holds the value of the one_rep_max edge.
	OneRepMax []*OneRepMax `json:"one_rep_max,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramRecEdges) ProgramOrErr() (*Program, error) {
	if e.loadedTypes[0] {
		if e.Program == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: program.Label}
		}
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// WeeklyRoutineRecsOrErr returns the WeeklyRoutineRecs value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramRecEdges) WeeklyRoutineRecsOrErr() ([]*WeeklyRoutineRec, error) {
	if e.loadedTypes[1] {
		return e.WeeklyRoutineRecs, nil
	}
	return nil, &NotLoadedError{edge: "weekly_routine_recs"}
}

// DailyRoutineRecsOrErr returns the DailyRoutineRecs value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramRecEdges) DailyRoutineRecsOrErr() ([]*DailyRoutineRec, error) {
	if e.loadedTypes[2] {
		return e.DailyRoutineRecs, nil
	}
	return nil, &NotLoadedError{edge: "daily_routine_recs"}
}

// BodyInfoOrErr returns the BodyInfo value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramRecEdges) BodyInfoOrErr() ([]*BodyInfo, error) {
	if e.loadedTypes[3] {
		return e.BodyInfo, nil
	}
	return nil, &NotLoadedError{edge: "body_info"}
}

// OneRepMaxOrErr returns the OneRepMax value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramRecEdges) OneRepMaxOrErr() ([]*OneRepMax, error) {
	if e.loadedTypes[4] {
		return e.OneRepMax, nil
	}
	return nil, &NotLoadedError{edge: "one_rep_max"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramRec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programrec.FieldID, programrec.FieldAuthor, programrec.FieldProgramID:
			values[i] = new(sql.NullInt64)
		case programrec.FieldStatus, programrec.FieldComment:
			values[i] = new(sql.NullString)
		case programrec.FieldStartDate, programrec.FieldEndDate, programrec.FieldCreatedAt, programrec.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramRec fields.
func (pr *ProgramRec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programrec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint64(value.Int64)
		case programrec.FieldAuthor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				pr.Author = uint64(value.Int64)
			}
		case programrec.FieldProgramID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_id", values[i])
			} else if value.Valid {
				pr.ProgramID = uint64(value.Int64)
			}
		case programrec.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				pr.StartDate = value.Time
			}
		case programrec.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				pr.EndDate = value.Time
			}
		case programrec.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = programrec.Status(value.String)
			}
		case programrec.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				pr.Comment = new(string)
				*pr.Comment = value.String
			}
		case programrec.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case programrec.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramRec.
// This includes values selected through modifiers, order, etc.
func (pr *ProgramRec) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the ProgramRec entity.
func (pr *ProgramRec) QueryProgram() *ProgramQuery {
	return NewProgramRecClient(pr.config).QueryProgram(pr)
}

// QueryWeeklyRoutineRecs queries the "weekly_routine_recs" edge of the ProgramRec entity.
func (pr *ProgramRec) QueryWeeklyRoutineRecs() *WeeklyRoutineRecQuery {
	return NewProgramRecClient(pr.config).QueryWeeklyRoutineRecs(pr)
}

// QueryDailyRoutineRecs queries the "daily_routine_recs" edge of the ProgramRec entity.
func (pr *ProgramRec) QueryDailyRoutineRecs() *DailyRoutineRecQuery {
	return NewProgramRecClient(pr.config).QueryDailyRoutineRecs(pr)
}

// QueryBodyInfo queries the "body_info" edge of the ProgramRec entity.
func (pr *ProgramRec) QueryBodyInfo() *BodyInfoQuery {
	return NewProgramRecClient(pr.config).QueryBodyInfo(pr)
}

// QueryOneRepMax queries the "one_rep_max" edge of the ProgramRec entity.
func (pr *ProgramRec) QueryOneRepMax() *OneRepMaxQuery {
	return NewProgramRecClient(pr.config).QueryOneRepMax(pr)
}

// Update returns a builder for updating this ProgramRec.
// Note that you need to call ProgramRec.Unwrap() before calling this method if this ProgramRec
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProgramRec) Update() *ProgramRecUpdateOne {
	return NewProgramRecClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProgramRec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProgramRec) Unwrap() *ProgramRec {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProgramRec is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProgramRec) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramRec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", pr.Author))
	builder.WriteString(", ")
	builder.WriteString("program_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProgramID))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(pr.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(pr.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	if v := pr.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProgramRecs is a parsable slice of ProgramRec.
type ProgramRecs []*ProgramRec

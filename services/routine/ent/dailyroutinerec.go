// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/dailyroutinerec"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DailyRoutineRec is the model entity for the DailyRoutineRec schema.
type DailyRoutineRec struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ProgramRecID holds the value of the "program_rec_id" field.
	ProgramRecID *uint64 `json:"program_rec_id,omitempty"`
	// WeeklyRoutineRecID holds the value of the "weekly_routine_rec_id" field.
	WeeklyRoutineRecID *uint64 `json:"weekly_routine_rec_id,omitempty"`
	// DailyRoutineID holds the value of the "daily_routine_id" field.
	DailyRoutineID *uint64 `json:"daily_routine_id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Status holds the value of the "status" field.
	Status dailyroutinerec.Status `json:"status,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyRoutineRec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailyroutinerec.FieldID, dailyroutinerec.FieldProgramRecID, dailyroutinerec.FieldWeeklyRoutineRecID, dailyroutinerec.FieldDailyRoutineID:
			values[i] = new(sql.NullInt64)
		case dailyroutinerec.FieldStatus, dailyroutinerec.FieldComment:
			values[i] = new(sql.NullString)
		case dailyroutinerec.FieldDate, dailyroutinerec.FieldCreatedAt, dailyroutinerec.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyRoutineRec fields.
func (drr *DailyRoutineRec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailyroutinerec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			drr.ID = uint64(value.Int64)
		case dailyroutinerec.FieldProgramRecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_rec_id", values[i])
			} else if value.Valid {
				drr.ProgramRecID = new(uint64)
				*drr.ProgramRecID = uint64(value.Int64)
			}
		case dailyroutinerec.FieldWeeklyRoutineRecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekly_routine_rec_id", values[i])
			} else if value.Valid {
				drr.WeeklyRoutineRecID = new(uint64)
				*drr.WeeklyRoutineRecID = uint64(value.Int64)
			}
		case dailyroutinerec.FieldDailyRoutineID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_routine_id", values[i])
			} else if value.Valid {
				drr.DailyRoutineID = new(uint64)
				*drr.DailyRoutineID = uint64(value.Int64)
			}
		case dailyroutinerec.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				drr.Date = value.Time
			}
		case dailyroutinerec.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				drr.Status = dailyroutinerec.Status(value.String)
			}
		case dailyroutinerec.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				drr.Comment = new(string)
				*drr.Comment = value.String
			}
		case dailyroutinerec.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				drr.CreatedAt = value.Time
			}
		case dailyroutinerec.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				drr.UpdatedAt = value.Time
			}
		default:
			drr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DailyRoutineRec.
// This includes values selected through modifiers, order, etc.
func (drr *DailyRoutineRec) Value(name string) (ent.Value, error) {
	return drr.selectValues.Get(name)
}

// Update returns a builder for updating this DailyRoutineRec.
// Note that you need to call DailyRoutineRec.Unwrap() before calling this method if this DailyRoutineRec
// was returned from a transaction, and the transaction was committed or rolled back.
func (drr *DailyRoutineRec) Update() *DailyRoutineRecUpdateOne {
	return NewDailyRoutineRecClient(drr.config).UpdateOne(drr)
}

// Unwrap unwraps the DailyRoutineRec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (drr *DailyRoutineRec) Unwrap() *DailyRoutineRec {
	_tx, ok := drr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyRoutineRec is not a transactional entity")
	}
	drr.config.driver = _tx.drv
	return drr
}

// String implements the fmt.Stringer.
func (drr *DailyRoutineRec) String() string {
	var builder strings.Builder
	builder.WriteString("DailyRoutineRec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", drr.ID))
	if v := drr.ProgramRecID; v != nil {
		builder.WriteString("program_rec_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := drr.WeeklyRoutineRecID; v != nil {
		builder.WriteString("weekly_routine_rec_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := drr.DailyRoutineID; v != nil {
		builder.WriteString("daily_routine_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(drr.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", drr.Status))
	builder.WriteString(", ")
	if v := drr.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(drr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(drr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DailyRoutineRecs is a parsable slice of DailyRoutineRec.
type DailyRoutineRecs []*DailyRoutineRec

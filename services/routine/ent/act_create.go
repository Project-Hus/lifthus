// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/act"
	"routine/ent/onerepmax"
	"routine/ent/routineact"
	"routine/ent/routineactrec"
	"routine/ent/tag"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActCreate is the builder for creating a Act entity.
type ActCreate struct {
	config
	mutation *ActMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *ActCreate) SetName(s string) *ActCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetSlug sets the "slug" field.
func (ac *ActCreate) SetSlug(s string) *ActCreate {
	ac.mutation.SetSlug(s)
	return ac
}

// SetType sets the "type" field.
func (ac *ActCreate) SetType(a act.Type) *ActCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetAuthor sets the "author" field.
func (ac *ActCreate) SetAuthor(u uint64) *ActCreate {
	ac.mutation.SetAuthor(u)
	return ac
}

// SetImage sets the "image" field.
func (ac *ActCreate) SetImage(s string) *ActCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ac *ActCreate) SetNillableImage(s *string) *ActCreate {
	if s != nil {
		ac.SetImage(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *ActCreate) SetDescription(s string) *ActCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *ActCreate) SetNillableDescription(s *string) *ActCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActCreate) SetCreatedAt(t time.Time) *ActCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ActCreate) SetNillableCreatedAt(t *time.Time) *ActCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ActCreate) SetUpdatedAt(t time.Time) *ActCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ActCreate) SetNillableUpdatedAt(t *time.Time) *ActCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetWeight sets the "weight" field.
func (ac *ActCreate) SetWeight(b bool) *ActCreate {
	ac.mutation.SetWeight(b)
	return ac
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (ac *ActCreate) SetNillableWeight(b *bool) *ActCreate {
	if b != nil {
		ac.SetWeight(*b)
	}
	return ac
}

// SetBodyweight sets the "bodyweight" field.
func (ac *ActCreate) SetBodyweight(b bool) *ActCreate {
	ac.mutation.SetBodyweight(b)
	return ac
}

// SetNillableBodyweight sets the "bodyweight" field if the given value is not nil.
func (ac *ActCreate) SetNillableBodyweight(b *bool) *ActCreate {
	if b != nil {
		ac.SetBodyweight(*b)
	}
	return ac
}

// SetCardio sets the "cardio" field.
func (ac *ActCreate) SetCardio(b bool) *ActCreate {
	ac.mutation.SetCardio(b)
	return ac
}

// SetNillableCardio sets the "cardio" field if the given value is not nil.
func (ac *ActCreate) SetNillableCardio(b *bool) *ActCreate {
	if b != nil {
		ac.SetCardio(*b)
	}
	return ac
}

// SetUpper sets the "upper" field.
func (ac *ActCreate) SetUpper(b bool) *ActCreate {
	ac.mutation.SetUpper(b)
	return ac
}

// SetNillableUpper sets the "upper" field if the given value is not nil.
func (ac *ActCreate) SetNillableUpper(b *bool) *ActCreate {
	if b != nil {
		ac.SetUpper(*b)
	}
	return ac
}

// SetLower sets the "lower" field.
func (ac *ActCreate) SetLower(b bool) *ActCreate {
	ac.mutation.SetLower(b)
	return ac
}

// SetNillableLower sets the "lower" field if the given value is not nil.
func (ac *ActCreate) SetNillableLower(b *bool) *ActCreate {
	if b != nil {
		ac.SetLower(*b)
	}
	return ac
}

// SetFull sets the "full" field.
func (ac *ActCreate) SetFull(b bool) *ActCreate {
	ac.mutation.SetFull(b)
	return ac
}

// SetNillableFull sets the "full" field if the given value is not nil.
func (ac *ActCreate) SetNillableFull(b *bool) *ActCreate {
	if b != nil {
		ac.SetFull(*b)
	}
	return ac
}

// SetArms sets the "arms" field.
func (ac *ActCreate) SetArms(b bool) *ActCreate {
	ac.mutation.SetArms(b)
	return ac
}

// SetNillableArms sets the "arms" field if the given value is not nil.
func (ac *ActCreate) SetNillableArms(b *bool) *ActCreate {
	if b != nil {
		ac.SetArms(*b)
	}
	return ac
}

// SetShoulders sets the "shoulders" field.
func (ac *ActCreate) SetShoulders(b bool) *ActCreate {
	ac.mutation.SetShoulders(b)
	return ac
}

// SetNillableShoulders sets the "shoulders" field if the given value is not nil.
func (ac *ActCreate) SetNillableShoulders(b *bool) *ActCreate {
	if b != nil {
		ac.SetShoulders(*b)
	}
	return ac
}

// SetChest sets the "chest" field.
func (ac *ActCreate) SetChest(b bool) *ActCreate {
	ac.mutation.SetChest(b)
	return ac
}

// SetNillableChest sets the "chest" field if the given value is not nil.
func (ac *ActCreate) SetNillableChest(b *bool) *ActCreate {
	if b != nil {
		ac.SetChest(*b)
	}
	return ac
}

// SetCore sets the "core" field.
func (ac *ActCreate) SetCore(b bool) *ActCreate {
	ac.mutation.SetCore(b)
	return ac
}

// SetNillableCore sets the "core" field if the given value is not nil.
func (ac *ActCreate) SetNillableCore(b *bool) *ActCreate {
	if b != nil {
		ac.SetCore(*b)
	}
	return ac
}

// SetUpperBack sets the "upper_back" field.
func (ac *ActCreate) SetUpperBack(b bool) *ActCreate {
	ac.mutation.SetUpperBack(b)
	return ac
}

// SetNillableUpperBack sets the "upper_back" field if the given value is not nil.
func (ac *ActCreate) SetNillableUpperBack(b *bool) *ActCreate {
	if b != nil {
		ac.SetUpperBack(*b)
	}
	return ac
}

// SetLowerBack sets the "lower_back" field.
func (ac *ActCreate) SetLowerBack(b bool) *ActCreate {
	ac.mutation.SetLowerBack(b)
	return ac
}

// SetNillableLowerBack sets the "lower_back" field if the given value is not nil.
func (ac *ActCreate) SetNillableLowerBack(b *bool) *ActCreate {
	if b != nil {
		ac.SetLowerBack(*b)
	}
	return ac
}

// SetGlute sets the "glute" field.
func (ac *ActCreate) SetGlute(b bool) *ActCreate {
	ac.mutation.SetGlute(b)
	return ac
}

// SetNillableGlute sets the "glute" field if the given value is not nil.
func (ac *ActCreate) SetNillableGlute(b *bool) *ActCreate {
	if b != nil {
		ac.SetGlute(*b)
	}
	return ac
}

// SetLegsFront sets the "legs_front" field.
func (ac *ActCreate) SetLegsFront(b bool) *ActCreate {
	ac.mutation.SetLegsFront(b)
	return ac
}

// SetNillableLegsFront sets the "legs_front" field if the given value is not nil.
func (ac *ActCreate) SetNillableLegsFront(b *bool) *ActCreate {
	if b != nil {
		ac.SetLegsFront(*b)
	}
	return ac
}

// SetLegsBack sets the "legs_back" field.
func (ac *ActCreate) SetLegsBack(b bool) *ActCreate {
	ac.mutation.SetLegsBack(b)
	return ac
}

// SetNillableLegsBack sets the "legs_back" field if the given value is not nil.
func (ac *ActCreate) SetNillableLegsBack(b *bool) *ActCreate {
	if b != nil {
		ac.SetLegsBack(*b)
	}
	return ac
}

// SetEtc sets the "etc" field.
func (ac *ActCreate) SetEtc(b bool) *ActCreate {
	ac.mutation.SetEtc(b)
	return ac
}

// SetNillableEtc sets the "etc" field if the given value is not nil.
func (ac *ActCreate) SetNillableEtc(b *bool) *ActCreate {
	if b != nil {
		ac.SetEtc(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ActCreate) SetID(u uint64) *ActCreate {
	ac.mutation.SetID(u)
	return ac
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ac *ActCreate) AddTagIDs(ids ...uint64) *ActCreate {
	ac.mutation.AddTagIDs(ids...)
	return ac
}

// AddTags adds the "tags" edges to the Tag entity.
func (ac *ActCreate) AddTags(t ...*Tag) *ActCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTagIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (ac *ActCreate) AddRoutineActIDs(ids ...uint64) *ActCreate {
	ac.mutation.AddRoutineActIDs(ids...)
	return ac
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (ac *ActCreate) AddRoutineActs(r ...*RoutineAct) *ActCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRoutineActIDs(ids...)
}

// AddRoutineActRecIDs adds the "routine_act_recs" edge to the RoutineActRec entity by IDs.
func (ac *ActCreate) AddRoutineActRecIDs(ids ...uint64) *ActCreate {
	ac.mutation.AddRoutineActRecIDs(ids...)
	return ac
}

// AddRoutineActRecs adds the "routine_act_recs" edges to the RoutineActRec entity.
func (ac *ActCreate) AddRoutineActRecs(r ...*RoutineActRec) *ActCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRoutineActRecIDs(ids...)
}

// AddOneRepMaxisIDs adds the "one_rep_maxes" edge to the OneRepMax entity by IDs.
func (ac *ActCreate) AddOneRepMaxisIDs(ids ...uint64) *ActCreate {
	ac.mutation.AddOneRepMaxisIDs(ids...)
	return ac
}

// AddOneRepMaxes adds the "one_rep_maxes" edges to the OneRepMax entity.
func (ac *ActCreate) AddOneRepMaxes(o ...*OneRepMax) *ActCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOneRepMaxisIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (ac *ActCreate) Mutation() *ActMutation {
	return ac.mutation
}

// Save creates the Act in the database.
func (ac *ActCreate) Save(ctx context.Context) (*Act, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActCreate) SaveX(ctx context.Context) *Act {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := act.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := act.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Weight(); !ok {
		v := act.DefaultWeight
		ac.mutation.SetWeight(v)
	}
	if _, ok := ac.mutation.Bodyweight(); !ok {
		v := act.DefaultBodyweight
		ac.mutation.SetBodyweight(v)
	}
	if _, ok := ac.mutation.Cardio(); !ok {
		v := act.DefaultCardio
		ac.mutation.SetCardio(v)
	}
	if _, ok := ac.mutation.Upper(); !ok {
		v := act.DefaultUpper
		ac.mutation.SetUpper(v)
	}
	if _, ok := ac.mutation.Lower(); !ok {
		v := act.DefaultLower
		ac.mutation.SetLower(v)
	}
	if _, ok := ac.mutation.Full(); !ok {
		v := act.DefaultFull
		ac.mutation.SetFull(v)
	}
	if _, ok := ac.mutation.Arms(); !ok {
		v := act.DefaultArms
		ac.mutation.SetArms(v)
	}
	if _, ok := ac.mutation.Shoulders(); !ok {
		v := act.DefaultShoulders
		ac.mutation.SetShoulders(v)
	}
	if _, ok := ac.mutation.Chest(); !ok {
		v := act.DefaultChest
		ac.mutation.SetChest(v)
	}
	if _, ok := ac.mutation.Core(); !ok {
		v := act.DefaultCore
		ac.mutation.SetCore(v)
	}
	if _, ok := ac.mutation.UpperBack(); !ok {
		v := act.DefaultUpperBack
		ac.mutation.SetUpperBack(v)
	}
	if _, ok := ac.mutation.LowerBack(); !ok {
		v := act.DefaultLowerBack
		ac.mutation.SetLowerBack(v)
	}
	if _, ok := ac.mutation.Glute(); !ok {
		v := act.DefaultGlute
		ac.mutation.SetGlute(v)
	}
	if _, ok := ac.mutation.LegsFront(); !ok {
		v := act.DefaultLegsFront
		ac.mutation.SetLegsFront(v)
	}
	if _, ok := ac.mutation.LegsBack(); !ok {
		v := act.DefaultLegsBack
		ac.mutation.SetLegsBack(v)
	}
	if _, ok := ac.mutation.Etc(); !ok {
		v := act.DefaultEtc
		ac.mutation.SetEtc(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Act.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := act.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Act.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Act.slug"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Act.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := act.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Act.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Act.author"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Act.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Act.updated_at"`)}
	}
	if _, ok := ac.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Act.weight"`)}
	}
	if _, ok := ac.mutation.Bodyweight(); !ok {
		return &ValidationError{Name: "bodyweight", err: errors.New(`ent: missing required field "Act.bodyweight"`)}
	}
	if _, ok := ac.mutation.Cardio(); !ok {
		return &ValidationError{Name: "cardio", err: errors.New(`ent: missing required field "Act.cardio"`)}
	}
	if _, ok := ac.mutation.Upper(); !ok {
		return &ValidationError{Name: "upper", err: errors.New(`ent: missing required field "Act.upper"`)}
	}
	if _, ok := ac.mutation.Lower(); !ok {
		return &ValidationError{Name: "lower", err: errors.New(`ent: missing required field "Act.lower"`)}
	}
	if _, ok := ac.mutation.Full(); !ok {
		return &ValidationError{Name: "full", err: errors.New(`ent: missing required field "Act.full"`)}
	}
	if _, ok := ac.mutation.Arms(); !ok {
		return &ValidationError{Name: "arms", err: errors.New(`ent: missing required field "Act.arms"`)}
	}
	if _, ok := ac.mutation.Shoulders(); !ok {
		return &ValidationError{Name: "shoulders", err: errors.New(`ent: missing required field "Act.shoulders"`)}
	}
	if _, ok := ac.mutation.Chest(); !ok {
		return &ValidationError{Name: "chest", err: errors.New(`ent: missing required field "Act.chest"`)}
	}
	if _, ok := ac.mutation.Core(); !ok {
		return &ValidationError{Name: "core", err: errors.New(`ent: missing required field "Act.core"`)}
	}
	if _, ok := ac.mutation.UpperBack(); !ok {
		return &ValidationError{Name: "upper_back", err: errors.New(`ent: missing required field "Act.upper_back"`)}
	}
	if _, ok := ac.mutation.LowerBack(); !ok {
		return &ValidationError{Name: "lower_back", err: errors.New(`ent: missing required field "Act.lower_back"`)}
	}
	if _, ok := ac.mutation.Glute(); !ok {
		return &ValidationError{Name: "glute", err: errors.New(`ent: missing required field "Act.glute"`)}
	}
	if _, ok := ac.mutation.LegsFront(); !ok {
		return &ValidationError{Name: "legs_front", err: errors.New(`ent: missing required field "Act.legs_front"`)}
	}
	if _, ok := ac.mutation.LegsBack(); !ok {
		return &ValidationError{Name: "legs_back", err: errors.New(`ent: missing required field "Act.legs_back"`)}
	}
	if _, ok := ac.mutation.Etc(); !ok {
		return &ValidationError{Name: "etc", err: errors.New(`ent: missing required field "Act.etc"`)}
	}
	return nil
}

func (ac *ActCreate) sqlSave(ctx context.Context) (*Act, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActCreate) createSpec() (*Act, *sqlgraph.CreateSpec) {
	var (
		_node = &Act{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(act.Table, sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(act.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Slug(); ok {
		_spec.SetField(act.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(act.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeUint64, value)
		_node.Author = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.SetField(act.FieldImage, field.TypeString, value)
		_node.Image = &value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(act.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(act.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(act.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Weight(); ok {
		_spec.SetField(act.FieldWeight, field.TypeBool, value)
		_node.Weight = value
	}
	if value, ok := ac.mutation.Bodyweight(); ok {
		_spec.SetField(act.FieldBodyweight, field.TypeBool, value)
		_node.Bodyweight = value
	}
	if value, ok := ac.mutation.Cardio(); ok {
		_spec.SetField(act.FieldCardio, field.TypeBool, value)
		_node.Cardio = value
	}
	if value, ok := ac.mutation.Upper(); ok {
		_spec.SetField(act.FieldUpper, field.TypeBool, value)
		_node.Upper = value
	}
	if value, ok := ac.mutation.Lower(); ok {
		_spec.SetField(act.FieldLower, field.TypeBool, value)
		_node.Lower = value
	}
	if value, ok := ac.mutation.Full(); ok {
		_spec.SetField(act.FieldFull, field.TypeBool, value)
		_node.Full = value
	}
	if value, ok := ac.mutation.Arms(); ok {
		_spec.SetField(act.FieldArms, field.TypeBool, value)
		_node.Arms = value
	}
	if value, ok := ac.mutation.Shoulders(); ok {
		_spec.SetField(act.FieldShoulders, field.TypeBool, value)
		_node.Shoulders = value
	}
	if value, ok := ac.mutation.Chest(); ok {
		_spec.SetField(act.FieldChest, field.TypeBool, value)
		_node.Chest = value
	}
	if value, ok := ac.mutation.Core(); ok {
		_spec.SetField(act.FieldCore, field.TypeBool, value)
		_node.Core = value
	}
	if value, ok := ac.mutation.UpperBack(); ok {
		_spec.SetField(act.FieldUpperBack, field.TypeBool, value)
		_node.UpperBack = value
	}
	if value, ok := ac.mutation.LowerBack(); ok {
		_spec.SetField(act.FieldLowerBack, field.TypeBool, value)
		_node.LowerBack = value
	}
	if value, ok := ac.mutation.Glute(); ok {
		_spec.SetField(act.FieldGlute, field.TypeBool, value)
		_node.Glute = value
	}
	if value, ok := ac.mutation.LegsFront(); ok {
		_spec.SetField(act.FieldLegsFront, field.TypeBool, value)
		_node.LegsFront = value
	}
	if value, ok := ac.mutation.LegsBack(); ok {
		_spec.SetField(act.FieldLegsBack, field.TypeBool, value)
		_node.LegsBack = value
	}
	if value, ok := ac.mutation.Etc(); ok {
		_spec.SetField(act.FieldEtc, field.TypeBool, value)
		_node.Etc = value
	}
	if nodes := ac.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RoutineActRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OneRepMaxesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.OneRepMaxesTable,
			Columns: []string{act.OneRepMaxesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(onerepmax.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActCreateBulk is the builder for creating many Act entities in bulk.
type ActCreateBulk struct {
	config
	builders []*ActCreate
}

// Save creates the Act entities in the database.
func (acb *ActCreateBulk) Save(ctx context.Context) ([]*Act, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Act, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActCreateBulk) SaveX(ctx context.Context) []*Act {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

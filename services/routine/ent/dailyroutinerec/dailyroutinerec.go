// Code generated by ent, DO NOT EDIT.

package dailyroutinerec

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dailyroutinerec type in the database.
	Label = "daily_routine_rec"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldProgramRecID holds the string denoting the program_rec_id field in the database.
	FieldProgramRecID = "program_rec_id"
	// FieldWeeklyRoutineRecID holds the string denoting the weekly_routine_rec_id field in the database.
	FieldWeeklyRoutineRecID = "weekly_routine_rec_id"
	// FieldDailyRoutineID holds the string denoting the daily_routine_id field in the database.
	FieldDailyRoutineID = "daily_routine_id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDailyRoutine holds the string denoting the daily_routine edge name in mutations.
	EdgeDailyRoutine = "daily_routine"
	// EdgeProgramRec holds the string denoting the program_rec edge name in mutations.
	EdgeProgramRec = "program_rec"
	// EdgeWeeklyRoutineRec holds the string denoting the weekly_routine_rec edge name in mutations.
	EdgeWeeklyRoutineRec = "weekly_routine_rec"
	// EdgeRoutineActRecs holds the string denoting the routine_act_recs edge name in mutations.
	EdgeRoutineActRecs = "routine_act_recs"
	// Table holds the table name of the dailyroutinerec in the database.
	Table = "daily_routine_recs"
	// DailyRoutineTable is the table that holds the daily_routine relation/edge.
	DailyRoutineTable = "daily_routine_recs"
	// DailyRoutineInverseTable is the table name for the DailyRoutine entity.
	// It exists in this package in order to avoid circular dependency with the "dailyroutine" package.
	DailyRoutineInverseTable = "daily_routines"
	// DailyRoutineColumn is the table column denoting the daily_routine relation/edge.
	DailyRoutineColumn = "daily_routine_daily_routine_recs"
	// ProgramRecTable is the table that holds the program_rec relation/edge.
	ProgramRecTable = "daily_routine_recs"
	// ProgramRecInverseTable is the table name for the ProgramRec entity.
	// It exists in this package in order to avoid circular dependency with the "programrec" package.
	ProgramRecInverseTable = "program_recs"
	// ProgramRecColumn is the table column denoting the program_rec relation/edge.
	ProgramRecColumn = "program_rec_daily_routine_recs"
	// WeeklyRoutineRecTable is the table that holds the weekly_routine_rec relation/edge.
	WeeklyRoutineRecTable = "daily_routine_recs"
	// WeeklyRoutineRecInverseTable is the table name for the WeeklyRoutineRec entity.
	// It exists in this package in order to avoid circular dependency with the "weeklyroutinerec" package.
	WeeklyRoutineRecInverseTable = "weekly_routine_recs"
	// WeeklyRoutineRecColumn is the table column denoting the weekly_routine_rec relation/edge.
	WeeklyRoutineRecColumn = "weekly_routine_rec_daily_routine_recs"
	// RoutineActRecsTable is the table that holds the routine_act_recs relation/edge.
	RoutineActRecsTable = "routine_act_recs"
	// RoutineActRecsInverseTable is the table name for the RoutineActRec entity.
	// It exists in this package in order to avoid circular dependency with the "routineactrec" package.
	RoutineActRecsInverseTable = "routine_act_recs"
	// RoutineActRecsColumn is the table column denoting the routine_act_recs relation/edge.
	RoutineActRecsColumn = "daily_routine_rec_routine_act_recs"
)

// Columns holds all SQL columns for dailyroutinerec fields.
var Columns = []string{
	FieldID,
	FieldAuthor,
	FieldProgramRecID,
	FieldWeeklyRoutineRecID,
	FieldDailyRoutineID,
	FieldDate,
	FieldStatus,
	FieldComment,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "daily_routine_recs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"daily_routine_daily_routine_recs",
	"program_rec_daily_routine_recs",
	"weekly_routine_rec_daily_routine_recs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusHistory    Status = "history"
	StatusWaiting    Status = "waiting"
	StatusProceeding Status = "proceeding"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
	StatusCanceled   Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusHistory, StatusWaiting, StatusProceeding, StatusCompleted, StatusFailed, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("dailyroutinerec: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the DailyRoutineRec queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByProgramRecID orders the results by the program_rec_id field.
func ByProgramRecID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgramRecID, opts...).ToFunc()
}

// ByWeeklyRoutineRecID orders the results by the weekly_routine_rec_id field.
func ByWeeklyRoutineRecID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeeklyRoutineRecID, opts...).ToFunc()
}

// ByDailyRoutineID orders the results by the daily_routine_id field.
func ByDailyRoutineID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDailyRoutineID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDailyRoutineField orders the results by daily_routine field.
func ByDailyRoutineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDailyRoutineStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramRecField orders the results by program_rec field.
func ByProgramRecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramRecStep(), sql.OrderByField(field, opts...))
	}
}

// ByWeeklyRoutineRecField orders the results by weekly_routine_rec field.
func ByWeeklyRoutineRecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWeeklyRoutineRecStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoutineActRecsCount orders the results by routine_act_recs count.
func ByRoutineActRecsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoutineActRecsStep(), opts...)
	}
}

// ByRoutineActRecs orders the results by routine_act_recs terms.
func ByRoutineActRecs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutineActRecsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDailyRoutineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DailyRoutineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DailyRoutineTable, DailyRoutineColumn),
	)
}
func newProgramRecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramRecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramRecTable, ProgramRecColumn),
	)
}
func newWeeklyRoutineRecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WeeklyRoutineRecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WeeklyRoutineRecTable, WeeklyRoutineRecColumn),
	)
}
func newRoutineActRecsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutineActRecsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoutineActRecsTable, RoutineActRecsColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package dailyroutinerec

import (
	"routine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldID, id))
}

// ProgramRecID applies equality check predicate on the "program_rec_id" field. It's identical to ProgramRecIDEQ.
func ProgramRecID(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldProgramRecID, v))
}

// WeeklyRoutineRecID applies equality check predicate on the "weekly_routine_rec_id" field. It's identical to WeeklyRoutineRecIDEQ.
func WeeklyRoutineRecID(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldWeeklyRoutineRecID, v))
}

// DailyRoutineID applies equality check predicate on the "daily_routine_id" field. It's identical to DailyRoutineIDEQ.
func DailyRoutineID(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldDailyRoutineID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldDate, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProgramRecIDEQ applies the EQ predicate on the "program_rec_id" field.
func ProgramRecIDEQ(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldProgramRecID, v))
}

// ProgramRecIDNEQ applies the NEQ predicate on the "program_rec_id" field.
func ProgramRecIDNEQ(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldProgramRecID, v))
}

// ProgramRecIDIn applies the In predicate on the "program_rec_id" field.
func ProgramRecIDIn(vs ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldProgramRecID, vs...))
}

// ProgramRecIDNotIn applies the NotIn predicate on the "program_rec_id" field.
func ProgramRecIDNotIn(vs ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldProgramRecID, vs...))
}

// ProgramRecIDGT applies the GT predicate on the "program_rec_id" field.
func ProgramRecIDGT(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldProgramRecID, v))
}

// ProgramRecIDGTE applies the GTE predicate on the "program_rec_id" field.
func ProgramRecIDGTE(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldProgramRecID, v))
}

// ProgramRecIDLT applies the LT predicate on the "program_rec_id" field.
func ProgramRecIDLT(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldProgramRecID, v))
}

// ProgramRecIDLTE applies the LTE predicate on the "program_rec_id" field.
func ProgramRecIDLTE(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldProgramRecID, v))
}

// ProgramRecIDIsNil applies the IsNil predicate on the "program_rec_id" field.
func ProgramRecIDIsNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIsNull(FieldProgramRecID))
}

// ProgramRecIDNotNil applies the NotNil predicate on the "program_rec_id" field.
func ProgramRecIDNotNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotNull(FieldProgramRecID))
}

// WeeklyRoutineRecIDEQ applies the EQ predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDEQ(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldWeeklyRoutineRecID, v))
}

// WeeklyRoutineRecIDNEQ applies the NEQ predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDNEQ(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldWeeklyRoutineRecID, v))
}

// WeeklyRoutineRecIDIn applies the In predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDIn(vs ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldWeeklyRoutineRecID, vs...))
}

// WeeklyRoutineRecIDNotIn applies the NotIn predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDNotIn(vs ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldWeeklyRoutineRecID, vs...))
}

// WeeklyRoutineRecIDGT applies the GT predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDGT(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldWeeklyRoutineRecID, v))
}

// WeeklyRoutineRecIDGTE applies the GTE predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDGTE(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldWeeklyRoutineRecID, v))
}

// WeeklyRoutineRecIDLT applies the LT predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDLT(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldWeeklyRoutineRecID, v))
}

// WeeklyRoutineRecIDLTE applies the LTE predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDLTE(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldWeeklyRoutineRecID, v))
}

// WeeklyRoutineRecIDIsNil applies the IsNil predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDIsNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIsNull(FieldWeeklyRoutineRecID))
}

// WeeklyRoutineRecIDNotNil applies the NotNil predicate on the "weekly_routine_rec_id" field.
func WeeklyRoutineRecIDNotNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotNull(FieldWeeklyRoutineRecID))
}

// DailyRoutineIDEQ applies the EQ predicate on the "daily_routine_id" field.
func DailyRoutineIDEQ(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldDailyRoutineID, v))
}

// DailyRoutineIDNEQ applies the NEQ predicate on the "daily_routine_id" field.
func DailyRoutineIDNEQ(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldDailyRoutineID, v))
}

// DailyRoutineIDIn applies the In predicate on the "daily_routine_id" field.
func DailyRoutineIDIn(vs ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldDailyRoutineID, vs...))
}

// DailyRoutineIDNotIn applies the NotIn predicate on the "daily_routine_id" field.
func DailyRoutineIDNotIn(vs ...uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldDailyRoutineID, vs...))
}

// DailyRoutineIDGT applies the GT predicate on the "daily_routine_id" field.
func DailyRoutineIDGT(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldDailyRoutineID, v))
}

// DailyRoutineIDGTE applies the GTE predicate on the "daily_routine_id" field.
func DailyRoutineIDGTE(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldDailyRoutineID, v))
}

// DailyRoutineIDLT applies the LT predicate on the "daily_routine_id" field.
func DailyRoutineIDLT(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldDailyRoutineID, v))
}

// DailyRoutineIDLTE applies the LTE predicate on the "daily_routine_id" field.
func DailyRoutineIDLTE(v uint64) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldDailyRoutineID, v))
}

// DailyRoutineIDIsNil applies the IsNil predicate on the "daily_routine_id" field.
func DailyRoutineIDIsNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIsNull(FieldDailyRoutineID))
}

// DailyRoutineIDNotNil applies the NotNil predicate on the "daily_routine_id" field.
func DailyRoutineIDNotNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotNull(FieldDailyRoutineID))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldStatus, vs...))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldContainsFold(FieldComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DailyRoutineRec) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DailyRoutineRec) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DailyRoutineRec) predicate.DailyRoutineRec {
	return predicate.DailyRoutineRec(func(s *sql.Selector) {
		p(s.Not())
	})
}

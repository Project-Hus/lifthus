// Code generated by ent, DO NOT EDIT.

package bodyinfo

import (
	"routine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldID, id))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldAuthor, v))
}

// ProgramRecID applies equality check predicate on the "program_rec_id" field. It's identical to ProgramRecIDEQ.
func ProgramRecID(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldProgramRecID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldDate, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldHeight, v))
}

// BodyWeight applies equality check predicate on the "body_weight" field. It's identical to BodyWeightEQ.
func BodyWeight(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldBodyWeight, v))
}

// BodyFatMass applies equality check predicate on the "body_fat_mass" field. It's identical to BodyFatMassEQ.
func BodyFatMass(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldBodyFatMass, v))
}

// SkeletalMuscleMass applies equality check predicate on the "skeletal_muscle_mass" field. It's identical to SkeletalMuscleMassEQ.
func SkeletalMuscleMass(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldSkeletalMuscleMass, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldAuthor, v))
}

// ProgramRecIDEQ applies the EQ predicate on the "program_rec_id" field.
func ProgramRecIDEQ(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldProgramRecID, v))
}

// ProgramRecIDNEQ applies the NEQ predicate on the "program_rec_id" field.
func ProgramRecIDNEQ(v uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldProgramRecID, v))
}

// ProgramRecIDIn applies the In predicate on the "program_rec_id" field.
func ProgramRecIDIn(vs ...uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldProgramRecID, vs...))
}

// ProgramRecIDNotIn applies the NotIn predicate on the "program_rec_id" field.
func ProgramRecIDNotIn(vs ...uint64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldProgramRecID, vs...))
}

// ProgramRecIDIsNil applies the IsNil predicate on the "program_rec_id" field.
func ProgramRecIDIsNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIsNull(FieldProgramRecID))
}

// ProgramRecIDNotNil applies the NotNil predicate on the "program_rec_id" field.
func ProgramRecIDNotNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotNull(FieldProgramRecID))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldDate, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotNull(FieldHeight))
}

// BodyWeightEQ applies the EQ predicate on the "body_weight" field.
func BodyWeightEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldBodyWeight, v))
}

// BodyWeightNEQ applies the NEQ predicate on the "body_weight" field.
func BodyWeightNEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldBodyWeight, v))
}

// BodyWeightIn applies the In predicate on the "body_weight" field.
func BodyWeightIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldBodyWeight, vs...))
}

// BodyWeightNotIn applies the NotIn predicate on the "body_weight" field.
func BodyWeightNotIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldBodyWeight, vs...))
}

// BodyWeightGT applies the GT predicate on the "body_weight" field.
func BodyWeightGT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldBodyWeight, v))
}

// BodyWeightGTE applies the GTE predicate on the "body_weight" field.
func BodyWeightGTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldBodyWeight, v))
}

// BodyWeightLT applies the LT predicate on the "body_weight" field.
func BodyWeightLT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldBodyWeight, v))
}

// BodyWeightLTE applies the LTE predicate on the "body_weight" field.
func BodyWeightLTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldBodyWeight, v))
}

// BodyWeightIsNil applies the IsNil predicate on the "body_weight" field.
func BodyWeightIsNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIsNull(FieldBodyWeight))
}

// BodyWeightNotNil applies the NotNil predicate on the "body_weight" field.
func BodyWeightNotNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotNull(FieldBodyWeight))
}

// BodyFatMassEQ applies the EQ predicate on the "body_fat_mass" field.
func BodyFatMassEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldBodyFatMass, v))
}

// BodyFatMassNEQ applies the NEQ predicate on the "body_fat_mass" field.
func BodyFatMassNEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldBodyFatMass, v))
}

// BodyFatMassIn applies the In predicate on the "body_fat_mass" field.
func BodyFatMassIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldBodyFatMass, vs...))
}

// BodyFatMassNotIn applies the NotIn predicate on the "body_fat_mass" field.
func BodyFatMassNotIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldBodyFatMass, vs...))
}

// BodyFatMassGT applies the GT predicate on the "body_fat_mass" field.
func BodyFatMassGT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldBodyFatMass, v))
}

// BodyFatMassGTE applies the GTE predicate on the "body_fat_mass" field.
func BodyFatMassGTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldBodyFatMass, v))
}

// BodyFatMassLT applies the LT predicate on the "body_fat_mass" field.
func BodyFatMassLT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldBodyFatMass, v))
}

// BodyFatMassLTE applies the LTE predicate on the "body_fat_mass" field.
func BodyFatMassLTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldBodyFatMass, v))
}

// BodyFatMassIsNil applies the IsNil predicate on the "body_fat_mass" field.
func BodyFatMassIsNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIsNull(FieldBodyFatMass))
}

// BodyFatMassNotNil applies the NotNil predicate on the "body_fat_mass" field.
func BodyFatMassNotNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotNull(FieldBodyFatMass))
}

// SkeletalMuscleMassEQ applies the EQ predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldEQ(FieldSkeletalMuscleMass, v))
}

// SkeletalMuscleMassNEQ applies the NEQ predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassNEQ(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNEQ(FieldSkeletalMuscleMass, v))
}

// SkeletalMuscleMassIn applies the In predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIn(FieldSkeletalMuscleMass, vs...))
}

// SkeletalMuscleMassNotIn applies the NotIn predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassNotIn(vs ...float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotIn(FieldSkeletalMuscleMass, vs...))
}

// SkeletalMuscleMassGT applies the GT predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassGT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGT(FieldSkeletalMuscleMass, v))
}

// SkeletalMuscleMassGTE applies the GTE predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassGTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldGTE(FieldSkeletalMuscleMass, v))
}

// SkeletalMuscleMassLT applies the LT predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassLT(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLT(FieldSkeletalMuscleMass, v))
}

// SkeletalMuscleMassLTE applies the LTE predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassLTE(v float64) predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldLTE(FieldSkeletalMuscleMass, v))
}

// SkeletalMuscleMassIsNil applies the IsNil predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassIsNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldIsNull(FieldSkeletalMuscleMass))
}

// SkeletalMuscleMassNotNil applies the NotNil predicate on the "skeletal_muscle_mass" field.
func SkeletalMuscleMassNotNil() predicate.BodyInfo {
	return predicate.BodyInfo(sql.FieldNotNull(FieldSkeletalMuscleMass))
}

// HasProgramRec applies the HasEdge predicate on the "program_rec" edge.
func HasProgramRec() predicate.BodyInfo {
	return predicate.BodyInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramRecTable, ProgramRecColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramRecWith applies the HasEdge predicate on the "program_rec" edge with a given conditions (other predicates).
func HasProgramRecWith(preds ...predicate.ProgramRec) predicate.BodyInfo {
	return predicate.BodyInfo(func(s *sql.Selector) {
		step := newProgramRecStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BodyInfo) predicate.BodyInfo {
	return predicate.BodyInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BodyInfo) predicate.BodyInfo {
	return predicate.BodyInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BodyInfo) predicate.BodyInfo {
	return predicate.BodyInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}

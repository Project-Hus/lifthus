// Code generated by ent, DO NOT EDIT.

package weeklyroutinerec

import (
	"routine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLTE(FieldID, id))
}

// ProgramRecID applies equality check predicate on the "program_rec_id" field. It's identical to ProgramRecIDEQ.
func ProgramRecID(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldProgramRecID, v))
}

// WeeklyRoutineID applies equality check predicate on the "weekly_routine_id" field. It's identical to WeeklyRoutineIDEQ.
func WeeklyRoutineID(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldWeeklyRoutineID, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldStartDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProgramRecIDEQ applies the EQ predicate on the "program_rec_id" field.
func ProgramRecIDEQ(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldProgramRecID, v))
}

// ProgramRecIDNEQ applies the NEQ predicate on the "program_rec_id" field.
func ProgramRecIDNEQ(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNEQ(FieldProgramRecID, v))
}

// ProgramRecIDIn applies the In predicate on the "program_rec_id" field.
func ProgramRecIDIn(vs ...uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldIn(FieldProgramRecID, vs...))
}

// ProgramRecIDNotIn applies the NotIn predicate on the "program_rec_id" field.
func ProgramRecIDNotIn(vs ...uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNotIn(FieldProgramRecID, vs...))
}

// ProgramRecIDGT applies the GT predicate on the "program_rec_id" field.
func ProgramRecIDGT(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGT(FieldProgramRecID, v))
}

// ProgramRecIDGTE applies the GTE predicate on the "program_rec_id" field.
func ProgramRecIDGTE(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGTE(FieldProgramRecID, v))
}

// ProgramRecIDLT applies the LT predicate on the "program_rec_id" field.
func ProgramRecIDLT(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLT(FieldProgramRecID, v))
}

// ProgramRecIDLTE applies the LTE predicate on the "program_rec_id" field.
func ProgramRecIDLTE(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLTE(FieldProgramRecID, v))
}

// WeeklyRoutineIDEQ applies the EQ predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDEQ(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldWeeklyRoutineID, v))
}

// WeeklyRoutineIDNEQ applies the NEQ predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDNEQ(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNEQ(FieldWeeklyRoutineID, v))
}

// WeeklyRoutineIDIn applies the In predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDIn(vs ...uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldIn(FieldWeeklyRoutineID, vs...))
}

// WeeklyRoutineIDNotIn applies the NotIn predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDNotIn(vs ...uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNotIn(FieldWeeklyRoutineID, vs...))
}

// WeeklyRoutineIDGT applies the GT predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDGT(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGT(FieldWeeklyRoutineID, v))
}

// WeeklyRoutineIDGTE applies the GTE predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDGTE(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGTE(FieldWeeklyRoutineID, v))
}

// WeeklyRoutineIDLT applies the LT predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDLT(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLT(FieldWeeklyRoutineID, v))
}

// WeeklyRoutineIDLTE applies the LTE predicate on the "weekly_routine_id" field.
func WeeklyRoutineIDLTE(v uint64) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLTE(FieldWeeklyRoutineID, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLTE(FieldStartDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWeeklyRoutine applies the HasEdge predicate on the "weekly_routine" edge.
func HasWeeklyRoutine() predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WeeklyRoutineTable, WeeklyRoutineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWeeklyRoutineWith applies the HasEdge predicate on the "weekly_routine" edge with a given conditions (other predicates).
func HasWeeklyRoutineWith(preds ...predicate.WeeklyRoutine) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		step := newWeeklyRoutineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgramRec applies the HasEdge predicate on the "program_rec" edge.
func HasProgramRec() predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramRecTable, ProgramRecColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramRecWith applies the HasEdge predicate on the "program_rec" edge with a given conditions (other predicates).
func HasProgramRecWith(preds ...predicate.ProgramRec) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		step := newProgramRecStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyRoutineRecs applies the HasEdge predicate on the "daily_routine_recs" edge.
func HasDailyRoutineRecs() predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DailyRoutineRecsTable, DailyRoutineRecsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyRoutineRecsWith applies the HasEdge predicate on the "daily_routine_recs" edge with a given conditions (other predicates).
func HasDailyRoutineRecsWith(preds ...predicate.DailyRoutineRec) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		step := newDailyRoutineRecsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WeeklyRoutineRec) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WeeklyRoutineRec) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WeeklyRoutineRec) predicate.WeeklyRoutineRec {
	return predicate.WeeklyRoutineRec(func(s *sql.Selector) {
		p(s.Not())
	})
}

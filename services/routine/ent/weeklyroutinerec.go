// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/weeklyroutinerec"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WeeklyRoutineRec is the model entity for the WeeklyRoutineRec schema.
type WeeklyRoutineRec struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ProgramRecID holds the value of the "program_rec_id" field.
	ProgramRecID uint64 `json:"program_rec_id,omitempty"`
	// WeeklyRoutineID holds the value of the "weekly_routine_id" field.
	WeeklyRoutineID uint64 `json:"weekly_routine_id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeeklyRoutineRec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weeklyroutinerec.FieldID, weeklyroutinerec.FieldProgramRecID, weeklyroutinerec.FieldWeeklyRoutineID:
			values[i] = new(sql.NullInt64)
		case weeklyroutinerec.FieldStartDate, weeklyroutinerec.FieldCreatedAt, weeklyroutinerec.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeeklyRoutineRec fields.
func (wrr *WeeklyRoutineRec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weeklyroutinerec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wrr.ID = uint64(value.Int64)
		case weeklyroutinerec.FieldProgramRecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_rec_id", values[i])
			} else if value.Valid {
				wrr.ProgramRecID = uint64(value.Int64)
			}
		case weeklyroutinerec.FieldWeeklyRoutineID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekly_routine_id", values[i])
			} else if value.Valid {
				wrr.WeeklyRoutineID = uint64(value.Int64)
			}
		case weeklyroutinerec.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				wrr.StartDate = value.Time
			}
		case weeklyroutinerec.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wrr.CreatedAt = value.Time
			}
		case weeklyroutinerec.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wrr.UpdatedAt = value.Time
			}
		default:
			wrr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WeeklyRoutineRec.
// This includes values selected through modifiers, order, etc.
func (wrr *WeeklyRoutineRec) Value(name string) (ent.Value, error) {
	return wrr.selectValues.Get(name)
}

// Update returns a builder for updating this WeeklyRoutineRec.
// Note that you need to call WeeklyRoutineRec.Unwrap() before calling this method if this WeeklyRoutineRec
// was returned from a transaction, and the transaction was committed or rolled back.
func (wrr *WeeklyRoutineRec) Update() *WeeklyRoutineRecUpdateOne {
	return NewWeeklyRoutineRecClient(wrr.config).UpdateOne(wrr)
}

// Unwrap unwraps the WeeklyRoutineRec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wrr *WeeklyRoutineRec) Unwrap() *WeeklyRoutineRec {
	_tx, ok := wrr.config.driver.(*txDriver)
	if !ok {
		panic("ent: WeeklyRoutineRec is not a transactional entity")
	}
	wrr.config.driver = _tx.drv
	return wrr
}

// String implements the fmt.Stringer.
func (wrr *WeeklyRoutineRec) String() string {
	var builder strings.Builder
	builder.WriteString("WeeklyRoutineRec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wrr.ID))
	builder.WriteString("program_rec_id=")
	builder.WriteString(fmt.Sprintf("%v", wrr.ProgramRecID))
	builder.WriteString(", ")
	builder.WriteString("weekly_routine_id=")
	builder.WriteString(fmt.Sprintf("%v", wrr.WeeklyRoutineID))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(wrr.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wrr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wrr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WeeklyRoutineRecs is a parsable slice of WeeklyRoutineRec.
type WeeklyRoutineRecs []*WeeklyRoutineRec

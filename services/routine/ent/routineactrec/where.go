// Code generated by ent, DO NOT EDIT.

package routineactrec

import (
	"routine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldID, id))
}

// DailyRoutineRecID applies equality check predicate on the "daily_routine_rec_id" field. It's identical to DailyRoutineRecIDEQ.
func DailyRoutineRecID(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldDailyRoutineRecID, v))
}

// RoutineActID applies equality check predicate on the "routine_act_id" field. It's identical to RoutineActIDEQ.
func RoutineActID(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldRoutineActID, v))
}

// ActID applies equality check predicate on the "act_id" field. It's identical to ActIDEQ.
func ActID(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldActID, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldOrder, v))
}

// Reps applies equality check predicate on the "reps" field. It's identical to RepsEQ.
func Reps(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldReps, v))
}

// Lap applies equality check predicate on the "lap" field. It's identical to LapEQ.
func Lap(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldLap, v))
}

// CurrentReps applies equality check predicate on the "current_reps" field. It's identical to CurrentRepsEQ.
func CurrentReps(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldCurrentReps, v))
}

// CurrentLap applies equality check predicate on the "current_lap" field. It's identical to CurrentLapEQ.
func CurrentLap(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldCurrentLap, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldImage, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldUpdatedAt, v))
}

// DailyRoutineRecIDEQ applies the EQ predicate on the "daily_routine_rec_id" field.
func DailyRoutineRecIDEQ(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldDailyRoutineRecID, v))
}

// DailyRoutineRecIDNEQ applies the NEQ predicate on the "daily_routine_rec_id" field.
func DailyRoutineRecIDNEQ(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldDailyRoutineRecID, v))
}

// DailyRoutineRecIDIn applies the In predicate on the "daily_routine_rec_id" field.
func DailyRoutineRecIDIn(vs ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldDailyRoutineRecID, vs...))
}

// DailyRoutineRecIDNotIn applies the NotIn predicate on the "daily_routine_rec_id" field.
func DailyRoutineRecIDNotIn(vs ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldDailyRoutineRecID, vs...))
}

// RoutineActIDEQ applies the EQ predicate on the "routine_act_id" field.
func RoutineActIDEQ(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldRoutineActID, v))
}

// RoutineActIDNEQ applies the NEQ predicate on the "routine_act_id" field.
func RoutineActIDNEQ(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldRoutineActID, v))
}

// RoutineActIDIn applies the In predicate on the "routine_act_id" field.
func RoutineActIDIn(vs ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldRoutineActID, vs...))
}

// RoutineActIDNotIn applies the NotIn predicate on the "routine_act_id" field.
func RoutineActIDNotIn(vs ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldRoutineActID, vs...))
}

// RoutineActIDGT applies the GT predicate on the "routine_act_id" field.
func RoutineActIDGT(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldRoutineActID, v))
}

// RoutineActIDGTE applies the GTE predicate on the "routine_act_id" field.
func RoutineActIDGTE(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldRoutineActID, v))
}

// RoutineActIDLT applies the LT predicate on the "routine_act_id" field.
func RoutineActIDLT(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldRoutineActID, v))
}

// RoutineActIDLTE applies the LTE predicate on the "routine_act_id" field.
func RoutineActIDLTE(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldRoutineActID, v))
}

// RoutineActIDIsNil applies the IsNil predicate on the "routine_act_id" field.
func RoutineActIDIsNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIsNull(FieldRoutineActID))
}

// RoutineActIDNotNil applies the NotNil predicate on the "routine_act_id" field.
func RoutineActIDNotNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotNull(FieldRoutineActID))
}

// ActIDEQ applies the EQ predicate on the "act_id" field.
func ActIDEQ(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldActID, v))
}

// ActIDNEQ applies the NEQ predicate on the "act_id" field.
func ActIDNEQ(v uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldActID, v))
}

// ActIDIn applies the In predicate on the "act_id" field.
func ActIDIn(vs ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldActID, vs...))
}

// ActIDNotIn applies the NotIn predicate on the "act_id" field.
func ActIDNotIn(vs ...uint64) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldActID, vs...))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldOrder, v))
}

// RepsEQ applies the EQ predicate on the "reps" field.
func RepsEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldReps, v))
}

// RepsNEQ applies the NEQ predicate on the "reps" field.
func RepsNEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldReps, v))
}

// RepsIn applies the In predicate on the "reps" field.
func RepsIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldReps, vs...))
}

// RepsNotIn applies the NotIn predicate on the "reps" field.
func RepsNotIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldReps, vs...))
}

// RepsGT applies the GT predicate on the "reps" field.
func RepsGT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldReps, v))
}

// RepsGTE applies the GTE predicate on the "reps" field.
func RepsGTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldReps, v))
}

// RepsLT applies the LT predicate on the "reps" field.
func RepsLT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldReps, v))
}

// RepsLTE applies the LTE predicate on the "reps" field.
func RepsLTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldReps, v))
}

// RepsIsNil applies the IsNil predicate on the "reps" field.
func RepsIsNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIsNull(FieldReps))
}

// RepsNotNil applies the NotNil predicate on the "reps" field.
func RepsNotNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotNull(FieldReps))
}

// LapEQ applies the EQ predicate on the "lap" field.
func LapEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldLap, v))
}

// LapNEQ applies the NEQ predicate on the "lap" field.
func LapNEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldLap, v))
}

// LapIn applies the In predicate on the "lap" field.
func LapIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldLap, vs...))
}

// LapNotIn applies the NotIn predicate on the "lap" field.
func LapNotIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldLap, vs...))
}

// LapGT applies the GT predicate on the "lap" field.
func LapGT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldLap, v))
}

// LapGTE applies the GTE predicate on the "lap" field.
func LapGTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldLap, v))
}

// LapLT applies the LT predicate on the "lap" field.
func LapLT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldLap, v))
}

// LapLTE applies the LTE predicate on the "lap" field.
func LapLTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldLap, v))
}

// LapIsNil applies the IsNil predicate on the "lap" field.
func LapIsNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIsNull(FieldLap))
}

// LapNotNil applies the NotNil predicate on the "lap" field.
func LapNotNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotNull(FieldLap))
}

// CurrentRepsEQ applies the EQ predicate on the "current_reps" field.
func CurrentRepsEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldCurrentReps, v))
}

// CurrentRepsNEQ applies the NEQ predicate on the "current_reps" field.
func CurrentRepsNEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldCurrentReps, v))
}

// CurrentRepsIn applies the In predicate on the "current_reps" field.
func CurrentRepsIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldCurrentReps, vs...))
}

// CurrentRepsNotIn applies the NotIn predicate on the "current_reps" field.
func CurrentRepsNotIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldCurrentReps, vs...))
}

// CurrentRepsGT applies the GT predicate on the "current_reps" field.
func CurrentRepsGT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldCurrentReps, v))
}

// CurrentRepsGTE applies the GTE predicate on the "current_reps" field.
func CurrentRepsGTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldCurrentReps, v))
}

// CurrentRepsLT applies the LT predicate on the "current_reps" field.
func CurrentRepsLT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldCurrentReps, v))
}

// CurrentRepsLTE applies the LTE predicate on the "current_reps" field.
func CurrentRepsLTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldCurrentReps, v))
}

// CurrentLapEQ applies the EQ predicate on the "current_lap" field.
func CurrentLapEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldCurrentLap, v))
}

// CurrentLapNEQ applies the NEQ predicate on the "current_lap" field.
func CurrentLapNEQ(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldCurrentLap, v))
}

// CurrentLapIn applies the In predicate on the "current_lap" field.
func CurrentLapIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldCurrentLap, vs...))
}

// CurrentLapNotIn applies the NotIn predicate on the "current_lap" field.
func CurrentLapNotIn(vs ...int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldCurrentLap, vs...))
}

// CurrentLapGT applies the GT predicate on the "current_lap" field.
func CurrentLapGT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldCurrentLap, v))
}

// CurrentLapGTE applies the GTE predicate on the "current_lap" field.
func CurrentLapGTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldCurrentLap, v))
}

// CurrentLapLT applies the LT predicate on the "current_lap" field.
func CurrentLapLT(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldCurrentLap, v))
}

// CurrentLapLTE applies the LTE predicate on the "current_lap" field.
func CurrentLapLTE(v int) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldCurrentLap, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldContainsFold(FieldImage, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldContainsFold(FieldComment, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RoutineActRec {
	return predicate.RoutineActRec(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDailyRoutineRec applies the HasEdge predicate on the "daily_routine_rec" edge.
func HasDailyRoutineRec() predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DailyRoutineRecTable, DailyRoutineRecColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyRoutineRecWith applies the HasEdge predicate on the "daily_routine_rec" edge with a given conditions (other predicates).
func HasDailyRoutineRecWith(preds ...predicate.DailyRoutineRec) predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		step := newDailyRoutineRecStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAct applies the HasEdge predicate on the "act" edge.
func HasAct() predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActWith applies the HasEdge predicate on the "act" edge with a given conditions (other predicates).
func HasActWith(preds ...predicate.Act) predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		step := newActStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoutineAct applies the HasEdge predicate on the "routine_act" edge.
func HasRoutineAct() predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoutineActTable, RoutineActColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoutineActWith applies the HasEdge predicate on the "routine_act" edge with a given conditions (other predicates).
func HasRoutineActWith(preds ...predicate.RoutineAct) predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		step := newRoutineActStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoutineActRec) predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoutineActRec) predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoutineActRec) predicate.RoutineActRec {
	return predicate.RoutineActRec(func(s *sql.Selector) {
		p(s.Not())
	})
}

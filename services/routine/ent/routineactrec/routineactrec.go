// Code generated by ent, DO NOT EDIT.

package routineactrec

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the routineactrec type in the database.
	Label = "routine_act_rec"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDailyRoutineRecID holds the string denoting the daily_routine_rec_id field in the database.
	FieldDailyRoutineRecID = "daily_routine_rec_id"
	// FieldRoutineActID holds the string denoting the routine_act_id field in the database.
	FieldRoutineActID = "routine_act_id"
	// FieldActID holds the string denoting the act_id field in the database.
	FieldActID = "act_id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldReps holds the string denoting the reps field in the database.
	FieldReps = "reps"
	// FieldLap holds the string denoting the lap field in the database.
	FieldLap = "lap"
	// FieldCurrentReps holds the string denoting the current_reps field in the database.
	FieldCurrentReps = "current_reps"
	// FieldCurrentLap holds the string denoting the current_lap field in the database.
	FieldCurrentLap = "current_lap"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDailyRoutineRec holds the string denoting the daily_routine_rec edge name in mutations.
	EdgeDailyRoutineRec = "daily_routine_rec"
	// EdgeAct holds the string denoting the act edge name in mutations.
	EdgeAct = "act"
	// EdgeRoutineAct holds the string denoting the routine_act edge name in mutations.
	EdgeRoutineAct = "routine_act"
	// Table holds the table name of the routineactrec in the database.
	Table = "routine_act_recs"
	// DailyRoutineRecTable is the table that holds the daily_routine_rec relation/edge.
	DailyRoutineRecTable = "routine_act_recs"
	// DailyRoutineRecInverseTable is the table name for the DailyRoutineRec entity.
	// It exists in this package in order to avoid circular dependency with the "dailyroutinerec" package.
	DailyRoutineRecInverseTable = "daily_routine_recs"
	// DailyRoutineRecColumn is the table column denoting the daily_routine_rec relation/edge.
	DailyRoutineRecColumn = "daily_routine_rec_id"
	// ActTable is the table that holds the act relation/edge.
	ActTable = "routine_act_recs"
	// ActInverseTable is the table name for the Act entity.
	// It exists in this package in order to avoid circular dependency with the "act" package.
	ActInverseTable = "acts"
	// ActColumn is the table column denoting the act relation/edge.
	ActColumn = "act_id"
	// RoutineActTable is the table that holds the routine_act relation/edge.
	RoutineActTable = "routine_act_recs"
	// RoutineActInverseTable is the table name for the RoutineAct entity.
	// It exists in this package in order to avoid circular dependency with the "routineact" package.
	RoutineActInverseTable = "routine_acts"
	// RoutineActColumn is the table column denoting the routine_act relation/edge.
	RoutineActColumn = "routine_act_id"
)

// Columns holds all SQL columns for routineactrec fields.
var Columns = []string{
	FieldID,
	FieldDailyRoutineRecID,
	FieldRoutineActID,
	FieldActID,
	FieldOrder,
	FieldReps,
	FieldLap,
	FieldCurrentReps,
	FieldCurrentLap,
	FieldImage,
	FieldComment,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
	// RepsValidator is a validator for the "reps" field. It is called by the builders before save.
	RepsValidator func(int) error
	// LapValidator is a validator for the "lap" field. It is called by the builders before save.
	LapValidator func(int) error
	// DefaultCurrentReps holds the default value on creation for the "current_reps" field.
	DefaultCurrentReps int
	// CurrentRepsValidator is a validator for the "current_reps" field. It is called by the builders before save.
	CurrentRepsValidator func(int) error
	// DefaultCurrentLap holds the default value on creation for the "current_lap" field.
	DefaultCurrentLap int
	// CurrentLapValidator is a validator for the "current_lap" field. It is called by the builders before save.
	CurrentLapValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusHistory    Status = "history"
	StatusWaiting    Status = "waiting"
	StatusProceeding Status = "proceeding"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
	StatusCanceled   Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusHistory, StatusWaiting, StatusProceeding, StatusCompleted, StatusFailed, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("routineactrec: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the RoutineActRec queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDailyRoutineRecID orders the results by the daily_routine_rec_id field.
func ByDailyRoutineRecID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDailyRoutineRecID, opts...).ToFunc()
}

// ByRoutineActID orders the results by the routine_act_id field.
func ByRoutineActID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoutineActID, opts...).ToFunc()
}

// ByActID orders the results by the act_id field.
func ByActID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByReps orders the results by the reps field.
func ByReps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReps, opts...).ToFunc()
}

// ByLap orders the results by the lap field.
func ByLap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLap, opts...).ToFunc()
}

// ByCurrentReps orders the results by the current_reps field.
func ByCurrentReps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentReps, opts...).ToFunc()
}

// ByCurrentLap orders the results by the current_lap field.
func ByCurrentLap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentLap, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDailyRoutineRecField orders the results by daily_routine_rec field.
func ByDailyRoutineRecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDailyRoutineRecStep(), sql.OrderByField(field, opts...))
	}
}

// ByActField orders the results by act field.
func ByActField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoutineActField orders the results by routine_act field.
func ByRoutineActField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutineActStep(), sql.OrderByField(field, opts...))
	}
}
func newDailyRoutineRecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DailyRoutineRecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DailyRoutineRecTable, DailyRoutineRecColumn),
	)
}
func newActStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
	)
}
func newRoutineActStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutineActInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoutineActTable, RoutineActColumn),
	)
}

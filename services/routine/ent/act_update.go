// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/act"
	"routine/ent/predicate"
	"routine/ent/routineact"
	"routine/ent/routineactrec"
	"routine/ent/tag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActUpdate is the builder for updating Act entities.
type ActUpdate struct {
	config
	hooks    []Hook
	mutation *ActMutation
}

// Where appends a list predicates to the ActUpdate builder.
func (au *ActUpdate) Where(ps ...predicate.Act) *ActUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ActUpdate) SetName(s string) *ActUpdate {
	au.mutation.SetName(s)
	return au
}

// SetType sets the "type" field.
func (au *ActUpdate) SetType(a act.Type) *ActUpdate {
	au.mutation.SetType(a)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *ActUpdate) SetNillableType(a *act.Type) *ActUpdate {
	if a != nil {
		au.SetType(*a)
	}
	return au
}

// ClearType clears the value of the "type" field.
func (au *ActUpdate) ClearType() *ActUpdate {
	au.mutation.ClearType()
	return au
}

// SetAuthor sets the "author" field.
func (au *ActUpdate) SetAuthor(u uint64) *ActUpdate {
	au.mutation.ResetAuthor()
	au.mutation.SetAuthor(u)
	return au
}

// AddAuthor adds u to the "author" field.
func (au *ActUpdate) AddAuthor(u int64) *ActUpdate {
	au.mutation.AddAuthor(u)
	return au
}

// SetImage sets the "image" field.
func (au *ActUpdate) SetImage(s string) *ActUpdate {
	au.mutation.SetImage(s)
	return au
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (au *ActUpdate) SetNillableImage(s *string) *ActUpdate {
	if s != nil {
		au.SetImage(*s)
	}
	return au
}

// ClearImage clears the value of the "image" field.
func (au *ActUpdate) ClearImage() *ActUpdate {
	au.mutation.ClearImage()
	return au
}

// SetDescription sets the "description" field.
func (au *ActUpdate) SetDescription(s string) *ActUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ActUpdate) SetNillableDescription(s *string) *ActUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ActUpdate) ClearDescription() *ActUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ActUpdate) SetUpdatedAt(t time.Time) *ActUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (au *ActUpdate) AddTagIDs(ids ...uint64) *ActUpdate {
	au.mutation.AddTagIDs(ids...)
	return au
}

// AddTags adds the "tags" edges to the Tag entity.
func (au *ActUpdate) AddTags(t ...*Tag) *ActUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTagIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (au *ActUpdate) AddRoutineActIDs(ids ...uint64) *ActUpdate {
	au.mutation.AddRoutineActIDs(ids...)
	return au
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (au *ActUpdate) AddRoutineActs(r ...*RoutineAct) *ActUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoutineActIDs(ids...)
}

// AddRoutineActRecIDs adds the "routine_act_recs" edge to the RoutineActRec entity by IDs.
func (au *ActUpdate) AddRoutineActRecIDs(ids ...uint64) *ActUpdate {
	au.mutation.AddRoutineActRecIDs(ids...)
	return au
}

// AddRoutineActRecs adds the "routine_act_recs" edges to the RoutineActRec entity.
func (au *ActUpdate) AddRoutineActRecs(r ...*RoutineActRec) *ActUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoutineActRecIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (au *ActUpdate) Mutation() *ActMutation {
	return au.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (au *ActUpdate) ClearTags() *ActUpdate {
	au.mutation.ClearTags()
	return au
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (au *ActUpdate) RemoveTagIDs(ids ...uint64) *ActUpdate {
	au.mutation.RemoveTagIDs(ids...)
	return au
}

// RemoveTags removes "tags" edges to Tag entities.
func (au *ActUpdate) RemoveTags(t ...*Tag) *ActUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTagIDs(ids...)
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (au *ActUpdate) ClearRoutineActs() *ActUpdate {
	au.mutation.ClearRoutineActs()
	return au
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (au *ActUpdate) RemoveRoutineActIDs(ids ...uint64) *ActUpdate {
	au.mutation.RemoveRoutineActIDs(ids...)
	return au
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (au *ActUpdate) RemoveRoutineActs(r ...*RoutineAct) *ActUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoutineActIDs(ids...)
}

// ClearRoutineActRecs clears all "routine_act_recs" edges to the RoutineActRec entity.
func (au *ActUpdate) ClearRoutineActRecs() *ActUpdate {
	au.mutation.ClearRoutineActRecs()
	return au
}

// RemoveRoutineActRecIDs removes the "routine_act_recs" edge to RoutineActRec entities by IDs.
func (au *ActUpdate) RemoveRoutineActRecIDs(ids ...uint64) *ActUpdate {
	au.mutation.RemoveRoutineActRecIDs(ids...)
	return au
}

// RemoveRoutineActRecs removes "routine_act_recs" edges to RoutineActRec entities.
func (au *ActUpdate) RemoveRoutineActRecs(r ...*RoutineActRec) *ActUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoutineActRecIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ActUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := act.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := act.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Act.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.GetType(); ok {
		if err := act.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Act.type": %w`, err)}
		}
	}
	return nil
}

func (au *ActUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(act.Table, act.Columns, sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(act.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(act.FieldType, field.TypeEnum, value)
	}
	if au.mutation.TypeCleared() {
		_spec.ClearField(act.FieldType, field.TypeEnum)
	}
	if value, ok := au.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := au.mutation.AddedAuthor(); ok {
		_spec.AddField(act.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := au.mutation.Image(); ok {
		_spec.SetField(act.FieldImage, field.TypeString, value)
	}
	if au.mutation.ImageCleared() {
		_spec.ClearField(act.FieldImage, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(act.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(act.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(act.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTagsIDs(); len(nodes) > 0 && !au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !au.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RoutineActRecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRoutineActRecsIDs(); len(nodes) > 0 && !au.mutation.RoutineActRecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RoutineActRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{act.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActUpdateOne is the builder for updating a single Act entity.
type ActUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActMutation
}

// SetName sets the "name" field.
func (auo *ActUpdateOne) SetName(s string) *ActUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetType sets the "type" field.
func (auo *ActUpdateOne) SetType(a act.Type) *ActUpdateOne {
	auo.mutation.SetType(a)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *ActUpdateOne) SetNillableType(a *act.Type) *ActUpdateOne {
	if a != nil {
		auo.SetType(*a)
	}
	return auo
}

// ClearType clears the value of the "type" field.
func (auo *ActUpdateOne) ClearType() *ActUpdateOne {
	auo.mutation.ClearType()
	return auo
}

// SetAuthor sets the "author" field.
func (auo *ActUpdateOne) SetAuthor(u uint64) *ActUpdateOne {
	auo.mutation.ResetAuthor()
	auo.mutation.SetAuthor(u)
	return auo
}

// AddAuthor adds u to the "author" field.
func (auo *ActUpdateOne) AddAuthor(u int64) *ActUpdateOne {
	auo.mutation.AddAuthor(u)
	return auo
}

// SetImage sets the "image" field.
func (auo *ActUpdateOne) SetImage(s string) *ActUpdateOne {
	auo.mutation.SetImage(s)
	return auo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (auo *ActUpdateOne) SetNillableImage(s *string) *ActUpdateOne {
	if s != nil {
		auo.SetImage(*s)
	}
	return auo
}

// ClearImage clears the value of the "image" field.
func (auo *ActUpdateOne) ClearImage() *ActUpdateOne {
	auo.mutation.ClearImage()
	return auo
}

// SetDescription sets the "description" field.
func (auo *ActUpdateOne) SetDescription(s string) *ActUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ActUpdateOne) SetNillableDescription(s *string) *ActUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ActUpdateOne) ClearDescription() *ActUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ActUpdateOne) SetUpdatedAt(t time.Time) *ActUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (auo *ActUpdateOne) AddTagIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.AddTagIDs(ids...)
	return auo
}

// AddTags adds the "tags" edges to the Tag entity.
func (auo *ActUpdateOne) AddTags(t ...*Tag) *ActUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTagIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (auo *ActUpdateOne) AddRoutineActIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.AddRoutineActIDs(ids...)
	return auo
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (auo *ActUpdateOne) AddRoutineActs(r ...*RoutineAct) *ActUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoutineActIDs(ids...)
}

// AddRoutineActRecIDs adds the "routine_act_recs" edge to the RoutineActRec entity by IDs.
func (auo *ActUpdateOne) AddRoutineActRecIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.AddRoutineActRecIDs(ids...)
	return auo
}

// AddRoutineActRecs adds the "routine_act_recs" edges to the RoutineActRec entity.
func (auo *ActUpdateOne) AddRoutineActRecs(r ...*RoutineActRec) *ActUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoutineActRecIDs(ids...)
}

// Mutation returns the ActMutation object of the builder.
func (auo *ActUpdateOne) Mutation() *ActMutation {
	return auo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (auo *ActUpdateOne) ClearTags() *ActUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (auo *ActUpdateOne) RemoveTagIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.RemoveTagIDs(ids...)
	return auo
}

// RemoveTags removes "tags" edges to Tag entities.
func (auo *ActUpdateOne) RemoveTags(t ...*Tag) *ActUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTagIDs(ids...)
}

// ClearRoutineActs clears all "routine_acts" edges to the RoutineAct entity.
func (auo *ActUpdateOne) ClearRoutineActs() *ActUpdateOne {
	auo.mutation.ClearRoutineActs()
	return auo
}

// RemoveRoutineActIDs removes the "routine_acts" edge to RoutineAct entities by IDs.
func (auo *ActUpdateOne) RemoveRoutineActIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.RemoveRoutineActIDs(ids...)
	return auo
}

// RemoveRoutineActs removes "routine_acts" edges to RoutineAct entities.
func (auo *ActUpdateOne) RemoveRoutineActs(r ...*RoutineAct) *ActUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoutineActIDs(ids...)
}

// ClearRoutineActRecs clears all "routine_act_recs" edges to the RoutineActRec entity.
func (auo *ActUpdateOne) ClearRoutineActRecs() *ActUpdateOne {
	auo.mutation.ClearRoutineActRecs()
	return auo
}

// RemoveRoutineActRecIDs removes the "routine_act_recs" edge to RoutineActRec entities by IDs.
func (auo *ActUpdateOne) RemoveRoutineActRecIDs(ids ...uint64) *ActUpdateOne {
	auo.mutation.RemoveRoutineActRecIDs(ids...)
	return auo
}

// RemoveRoutineActRecs removes "routine_act_recs" edges to RoutineActRec entities.
func (auo *ActUpdateOne) RemoveRoutineActRecs(r ...*RoutineActRec) *ActUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoutineActRecIDs(ids...)
}

// Where appends a list predicates to the ActUpdate builder.
func (auo *ActUpdateOne) Where(ps ...predicate.Act) *ActUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActUpdateOne) Select(field string, fields ...string) *ActUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Act entity.
func (auo *ActUpdateOne) Save(ctx context.Context) (*Act, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActUpdateOne) SaveX(ctx context.Context) *Act {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ActUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := act.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := act.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Act.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.GetType(); ok {
		if err := act.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Act.type": %w`, err)}
		}
	}
	return nil
}

func (auo *ActUpdateOne) sqlSave(ctx context.Context) (_node *Act, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(act.Table, act.Columns, sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Act.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, act.FieldID)
		for _, f := range fields {
			if !act.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != act.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(act.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(act.FieldType, field.TypeEnum, value)
	}
	if auo.mutation.TypeCleared() {
		_spec.ClearField(act.FieldType, field.TypeEnum)
	}
	if value, ok := auo.mutation.Author(); ok {
		_spec.SetField(act.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.AddedAuthor(); ok {
		_spec.AddField(act.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.Image(); ok {
		_spec.SetField(act.FieldImage, field.TypeString, value)
	}
	if auo.mutation.ImageCleared() {
		_spec.ClearField(act.FieldImage, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(act.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(act.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(act.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   act.TagsTable,
			Columns: act.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRoutineActsIDs(); len(nodes) > 0 && !auo.mutation.RoutineActsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActsTable,
			Columns: []string{act.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RoutineActRecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRoutineActRecsIDs(); len(nodes) > 0 && !auo.mutation.RoutineActRecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RoutineActRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   act.RoutineActRecsTable,
			Columns: []string{act.RoutineActRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineactrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Act{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{act.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

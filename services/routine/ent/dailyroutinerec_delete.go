// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"routine/ent/dailyroutinerec"
	"routine/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DailyRoutineRecDelete is the builder for deleting a DailyRoutineRec entity.
type DailyRoutineRecDelete struct {
	config
	hooks    []Hook
	mutation *DailyRoutineRecMutation
}

// Where appends a list predicates to the DailyRoutineRecDelete builder.
func (drrd *DailyRoutineRecDelete) Where(ps ...predicate.DailyRoutineRec) *DailyRoutineRecDelete {
	drrd.mutation.Where(ps...)
	return drrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (drrd *DailyRoutineRecDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, drrd.sqlExec, drrd.mutation, drrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (drrd *DailyRoutineRecDelete) ExecX(ctx context.Context) int {
	n, err := drrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (drrd *DailyRoutineRecDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(dailyroutinerec.Table, sqlgraph.NewFieldSpec(dailyroutinerec.FieldID, field.TypeUint64))
	if ps := drrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, drrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	drrd.mutation.done = true
	return affected, err
}

// DailyRoutineRecDeleteOne is the builder for deleting a single DailyRoutineRec entity.
type DailyRoutineRecDeleteOne struct {
	drrd *DailyRoutineRecDelete
}

// Where appends a list predicates to the DailyRoutineRecDelete builder.
func (drrdo *DailyRoutineRecDeleteOne) Where(ps ...predicate.DailyRoutineRec) *DailyRoutineRecDeleteOne {
	drrdo.drrd.mutation.Where(ps...)
	return drrdo
}

// Exec executes the deletion query.
func (drrdo *DailyRoutineRecDeleteOne) Exec(ctx context.Context) error {
	n, err := drrdo.drrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{dailyroutinerec.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (drrdo *DailyRoutineRecDeleteOne) ExecX(ctx context.Context) {
	if err := drrdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package onerepmax

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the onerepmax type in the database.
	Label = "one_rep_max"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldActID holds the string denoting the act_id field in the database.
	FieldActID = "act_id"
	// FieldProgramRecID holds the string denoting the program_rec_id field in the database.
	FieldProgramRecID = "program_rec_id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldOneRepMax holds the string denoting the one_rep_max field in the database.
	FieldOneRepMax = "one_rep_max"
	// FieldCertified holds the string denoting the certified field in the database.
	FieldCertified = "certified"
	// FieldCalculated holds the string denoting the calculated field in the database.
	FieldCalculated = "calculated"
	// EdgeAct holds the string denoting the act edge name in mutations.
	EdgeAct = "act"
	// EdgeProgramRec holds the string denoting the program_rec edge name in mutations.
	EdgeProgramRec = "program_rec"
	// Table holds the table name of the onerepmax in the database.
	Table = "one_rep_maxes"
	// ActTable is the table that holds the act relation/edge.
	ActTable = "one_rep_maxes"
	// ActInverseTable is the table name for the Act entity.
	// It exists in this package in order to avoid circular dependency with the "act" package.
	ActInverseTable = "acts"
	// ActColumn is the table column denoting the act relation/edge.
	ActColumn = "act_id"
	// ProgramRecTable is the table that holds the program_rec relation/edge.
	ProgramRecTable = "one_rep_maxes"
	// ProgramRecInverseTable is the table name for the ProgramRec entity.
	// It exists in this package in order to avoid circular dependency with the "programrec" package.
	ProgramRecInverseTable = "program_recs"
	// ProgramRecColumn is the table column denoting the program_rec relation/edge.
	ProgramRecColumn = "program_rec_id"
)

// Columns holds all SQL columns for onerepmax fields.
var Columns = []string{
	FieldID,
	FieldAuthor,
	FieldActID,
	FieldProgramRecID,
	FieldDate,
	FieldOneRepMax,
	FieldCertified,
	FieldCalculated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCertified holds the default value on creation for the "certified" field.
	DefaultCertified bool
	// DefaultCalculated holds the default value on creation for the "calculated" field.
	DefaultCalculated bool
)

// OrderOption defines the ordering options for the OneRepMax queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByActID orders the results by the act_id field.
func ByActID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActID, opts...).ToFunc()
}

// ByProgramRecID orders the results by the program_rec_id field.
func ByProgramRecID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgramRecID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByOneRepMax orders the results by the one_rep_max field.
func ByOneRepMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOneRepMax, opts...).ToFunc()
}

// ByCertified orders the results by the certified field.
func ByCertified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertified, opts...).ToFunc()
}

// ByCalculated orders the results by the calculated field.
func ByCalculated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalculated, opts...).ToFunc()
}

// ByActField orders the results by act field.
func ByActField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramRecField orders the results by program_rec field.
func ByProgramRecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramRecStep(), sql.OrderByField(field, opts...))
	}
}
func newActStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
	)
}
func newProgramRecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramRecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramRecTable, ProgramRecColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"routine/ent/onerepmax"
	"routine/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OneRepMaxDelete is the builder for deleting a OneRepMax entity.
type OneRepMaxDelete struct {
	config
	hooks    []Hook
	mutation *OneRepMaxMutation
}

// Where appends a list predicates to the OneRepMaxDelete builder.
func (ormd *OneRepMaxDelete) Where(ps ...predicate.OneRepMax) *OneRepMaxDelete {
	ormd.mutation.Where(ps...)
	return ormd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ormd *OneRepMaxDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ormd.sqlExec, ormd.mutation, ormd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ormd *OneRepMaxDelete) ExecX(ctx context.Context) int {
	n, err := ormd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ormd *OneRepMaxDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(onerepmax.Table, sqlgraph.NewFieldSpec(onerepmax.FieldID, field.TypeUint64))
	if ps := ormd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ormd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ormd.mutation.done = true
	return affected, err
}

// OneRepMaxDeleteOne is the builder for deleting a single OneRepMax entity.
type OneRepMaxDeleteOne struct {
	ormd *OneRepMaxDelete
}

// Where appends a list predicates to the OneRepMaxDelete builder.
func (ormdo *OneRepMaxDeleteOne) Where(ps ...predicate.OneRepMax) *OneRepMaxDeleteOne {
	ormdo.ormd.mutation.Where(ps...)
	return ormdo
}

// Exec executes the deletion query.
func (ormdo *OneRepMaxDeleteOne) Exec(ctx context.Context) error {
	n, err := ormdo.ormd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{onerepmax.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ormdo *OneRepMaxDeleteOne) ExecX(ctx context.Context) {
	if err := ormdo.Exec(ctx); err != nil {
		panic(err)
	}
}

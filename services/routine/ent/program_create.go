// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/dailyroutine"
	"routine/ent/program"
	"routine/ent/programrec"
	"routine/ent/tag"
	"routine/ent/weeklyroutine"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramCreate is the builder for creating a Program entity.
type ProgramCreate struct {
	config
	mutation *ProgramMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (pc *ProgramCreate) SetTitle(s string) *ProgramCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *ProgramCreate) SetSlug(s string) *ProgramCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetType sets the "type" field.
func (pc *ProgramCreate) SetType(pr program.Type) *ProgramCreate {
	pc.mutation.SetType(pr)
	return pc
}

// SetAuthor sets the "author" field.
func (pc *ProgramCreate) SetAuthor(u uint64) *ProgramCreate {
	pc.mutation.SetAuthor(u)
	return pc
}

// SetImage sets the "image" field.
func (pc *ProgramCreate) SetImage(s string) *ProgramCreate {
	pc.mutation.SetImage(s)
	return pc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableImage(s *string) *ProgramCreate {
	if s != nil {
		pc.SetImage(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProgramCreate) SetDescription(s string) *ProgramCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableDescription(s *string) *ProgramCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProgramCreate) SetCreatedAt(t time.Time) *ProgramCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableCreatedAt(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProgramCreate) SetUpdatedAt(t time.Time) *ProgramCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableUpdatedAt(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProgramCreate) SetID(u uint64) *ProgramCreate {
	pc.mutation.SetID(u)
	return pc
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pc *ProgramCreate) AddTagIDs(ids ...uint64) *ProgramCreate {
	pc.mutation.AddTagIDs(ids...)
	return pc
}

// AddTags adds the "tags" edges to the Tag entity.
func (pc *ProgramCreate) AddTags(t ...*Tag) *ProgramCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTagIDs(ids...)
}

// AddWeeklyRoutineIDs adds the "weekly_routines" edge to the WeeklyRoutine entity by IDs.
func (pc *ProgramCreate) AddWeeklyRoutineIDs(ids ...uint64) *ProgramCreate {
	pc.mutation.AddWeeklyRoutineIDs(ids...)
	return pc
}

// AddWeeklyRoutines adds the "weekly_routines" edges to the WeeklyRoutine entity.
func (pc *ProgramCreate) AddWeeklyRoutines(w ...*WeeklyRoutine) *ProgramCreate {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pc.AddWeeklyRoutineIDs(ids...)
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by IDs.
func (pc *ProgramCreate) AddDailyRoutineIDs(ids ...uint64) *ProgramCreate {
	pc.mutation.AddDailyRoutineIDs(ids...)
	return pc
}

// AddDailyRoutines adds the "daily_routines" edges to the DailyRoutine entity.
func (pc *ProgramCreate) AddDailyRoutines(d ...*DailyRoutine) *ProgramCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDailyRoutineIDs(ids...)
}

// AddProgramRecIDs adds the "program_recs" edge to the ProgramRec entity by IDs.
func (pc *ProgramCreate) AddProgramRecIDs(ids ...uint64) *ProgramCreate {
	pc.mutation.AddProgramRecIDs(ids...)
	return pc
}

// AddProgramRecs adds the "program_recs" edges to the ProgramRec entity.
func (pc *ProgramCreate) AddProgramRecs(p ...*ProgramRec) *ProgramCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProgramRecIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (pc *ProgramCreate) Mutation() *ProgramMutation {
	return pc.mutation
}

// Save creates the Program in the database.
func (pc *ProgramCreate) Save(ctx context.Context) (*Program, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProgramCreate) SaveX(ctx context.Context) *Program {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProgramCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProgramCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProgramCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := program.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := program.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProgramCreate) check() error {
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Program.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := program.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Program.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Program.slug"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Program.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := program.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Program.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Program.author"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Program.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Program.updated_at"`)}
	}
	return nil
}

func (pc *ProgramCreate) sqlSave(ctx context.Context) (*Program, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProgramCreate) createSpec() (*Program, *sqlgraph.CreateSpec) {
	var (
		_node = &Program{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(program.Table, sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(program.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(program.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(program.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Author(); ok {
		_spec.SetField(program.FieldAuthor, field.TypeUint64, value)
		_node.Author = value
	}
	if value, ok := pc.mutation.Image(); ok {
		_spec.SetField(program.FieldImage, field.TypeString, value)
		_node.Image = &value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(program.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.TagsTable,
			Columns: program.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WeeklyRoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.WeeklyRoutinesTable,
			Columns: []string{program.WeeklyRoutinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weeklyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DailyRoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DailyRoutinesTable,
			Columns: []string{program.DailyRoutinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProgramRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramRecsTable,
			Columns: []string{program.ProgramRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProgramCreateBulk is the builder for creating many Program entities in bulk.
type ProgramCreateBulk struct {
	config
	builders []*ProgramCreate
}

// Save creates the Program entities in the database.
func (pcb *ProgramCreateBulk) Save(ctx context.Context) ([]*Program, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Program, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProgramCreateBulk) SaveX(ctx context.Context) []*Program {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProgramCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProgramCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

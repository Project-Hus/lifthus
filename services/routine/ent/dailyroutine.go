// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/dailyroutine"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DailyRoutine is the model entity for the DailyRoutine schema.
type DailyRoutine struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ProgramID holds the value of the "program_id" field.
	ProgramID *uint64 `json:"program_id,omitempty"`
	// WeekID holds the value of the "week_id" field.
	WeekID *uint64 `json:"week_id,omitempty"`
	// Day holds the value of the "day" field.
	Day int `json:"day,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DailyRoutineQuery when eager-loading is set.
	Edges        DailyRoutineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DailyRoutineEdges holds the relations/edges for other nodes in the graph.
type DailyRoutineEdges struct {
	// Program holds the value of the program edge.
	Program []*Program `json:"program,omitempty"`
	// WeeklyRoutine holds the value of the weekly_routine edge.
	WeeklyRoutine []*WeeklyRoutine `json:"weekly_routine,omitempty"`
	// RoutineActs holds the value of the routine_acts edge.
	RoutineActs []*RoutineAct `json:"routine_acts,omitempty"`
	// DailyRoutineRecs holds the value of the daily_routine_recs edge.
	DailyRoutineRecs []*DailyRoutineRec `json:"daily_routine_recs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading.
func (e DailyRoutineEdges) ProgramOrErr() ([]*Program, error) {
	if e.loadedTypes[0] {
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// WeeklyRoutineOrErr returns the WeeklyRoutine value or an error if the edge
// was not loaded in eager-loading.
func (e DailyRoutineEdges) WeeklyRoutineOrErr() ([]*WeeklyRoutine, error) {
	if e.loadedTypes[1] {
		return e.WeeklyRoutine, nil
	}
	return nil, &NotLoadedError{edge: "weekly_routine"}
}

// RoutineActsOrErr returns the RoutineActs value or an error if the edge
// was not loaded in eager-loading.
func (e DailyRoutineEdges) RoutineActsOrErr() ([]*RoutineAct, error) {
	if e.loadedTypes[2] {
		return e.RoutineActs, nil
	}
	return nil, &NotLoadedError{edge: "routine_acts"}
}

// DailyRoutineRecsOrErr returns the DailyRoutineRecs value or an error if the edge
// was not loaded in eager-loading.
func (e DailyRoutineEdges) DailyRoutineRecsOrErr() ([]*DailyRoutineRec, error) {
	if e.loadedTypes[3] {
		return e.DailyRoutineRecs, nil
	}
	return nil, &NotLoadedError{edge: "daily_routine_recs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyRoutine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailyroutine.FieldID, dailyroutine.FieldProgramID, dailyroutine.FieldWeekID, dailyroutine.FieldDay:
			values[i] = new(sql.NullInt64)
		case dailyroutine.FieldCreatedAt, dailyroutine.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyRoutine fields.
func (dr *DailyRoutine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailyroutine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = uint64(value.Int64)
		case dailyroutine.FieldProgramID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_id", values[i])
			} else if value.Valid {
				dr.ProgramID = new(uint64)
				*dr.ProgramID = uint64(value.Int64)
			}
		case dailyroutine.FieldWeekID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field week_id", values[i])
			} else if value.Valid {
				dr.WeekID = new(uint64)
				*dr.WeekID = uint64(value.Int64)
			}
		case dailyroutine.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				dr.Day = int(value.Int64)
			}
		case dailyroutine.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dr.CreatedAt = value.Time
			}
		case dailyroutine.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dr.UpdatedAt = value.Time
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DailyRoutine.
// This includes values selected through modifiers, order, etc.
func (dr *DailyRoutine) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the DailyRoutine entity.
func (dr *DailyRoutine) QueryProgram() *ProgramQuery {
	return NewDailyRoutineClient(dr.config).QueryProgram(dr)
}

// QueryWeeklyRoutine queries the "weekly_routine" edge of the DailyRoutine entity.
func (dr *DailyRoutine) QueryWeeklyRoutine() *WeeklyRoutineQuery {
	return NewDailyRoutineClient(dr.config).QueryWeeklyRoutine(dr)
}

// QueryRoutineActs queries the "routine_acts" edge of the DailyRoutine entity.
func (dr *DailyRoutine) QueryRoutineActs() *RoutineActQuery {
	return NewDailyRoutineClient(dr.config).QueryRoutineActs(dr)
}

// QueryDailyRoutineRecs queries the "daily_routine_recs" edge of the DailyRoutine entity.
func (dr *DailyRoutine) QueryDailyRoutineRecs() *DailyRoutineRecQuery {
	return NewDailyRoutineClient(dr.config).QueryDailyRoutineRecs(dr)
}

// Update returns a builder for updating this DailyRoutine.
// Note that you need to call DailyRoutine.Unwrap() before calling this method if this DailyRoutine
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DailyRoutine) Update() *DailyRoutineUpdateOne {
	return NewDailyRoutineClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DailyRoutine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DailyRoutine) Unwrap() *DailyRoutine {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyRoutine is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DailyRoutine) String() string {
	var builder strings.Builder
	builder.WriteString("DailyRoutine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	if v := dr.ProgramID; v != nil {
		builder.WriteString("program_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dr.WeekID; v != nil {
		builder.WriteString("week_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", dr.Day))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DailyRoutines is a parsable slice of DailyRoutine.
type DailyRoutines []*DailyRoutine

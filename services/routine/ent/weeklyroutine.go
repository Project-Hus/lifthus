// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/program"
	"routine/ent/weeklyroutine"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WeeklyRoutine is the model entity for the WeeklyRoutine schema.
type WeeklyRoutine struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ProgramID holds the value of the "program_id" field.
	ProgramID uint64 `json:"program_id,omitempty"`
	// Week holds the value of the "week" field.
	Week int `json:"week,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeeklyRoutineQuery when eager-loading is set.
	Edges        WeeklyRoutineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WeeklyRoutineEdges holds the relations/edges for other nodes in the graph.
type WeeklyRoutineEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// DailyRoutines holds the value of the daily_routines edge.
	DailyRoutines []*DailyRoutine `json:"daily_routines,omitempty"`
	// WeeklyRoutineRecs holds the value of the weekly_routine_recs edge.
	WeeklyRoutineRecs []*WeeklyRoutineRec `json:"weekly_routine_recs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeeklyRoutineEdges) ProgramOrErr() (*Program, error) {
	if e.loadedTypes[0] {
		if e.Program == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: program.Label}
		}
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// DailyRoutinesOrErr returns the DailyRoutines value or an error if the edge
// was not loaded in eager-loading.
func (e WeeklyRoutineEdges) DailyRoutinesOrErr() ([]*DailyRoutine, error) {
	if e.loadedTypes[1] {
		return e.DailyRoutines, nil
	}
	return nil, &NotLoadedError{edge: "daily_routines"}
}

// WeeklyRoutineRecsOrErr returns the WeeklyRoutineRecs value or an error if the edge
// was not loaded in eager-loading.
func (e WeeklyRoutineEdges) WeeklyRoutineRecsOrErr() ([]*WeeklyRoutineRec, error) {
	if e.loadedTypes[2] {
		return e.WeeklyRoutineRecs, nil
	}
	return nil, &NotLoadedError{edge: "weekly_routine_recs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeeklyRoutine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weeklyroutine.FieldID, weeklyroutine.FieldProgramID, weeklyroutine.FieldWeek:
			values[i] = new(sql.NullInt64)
		case weeklyroutine.FieldCreatedAt, weeklyroutine.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeeklyRoutine fields.
func (wr *WeeklyRoutine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weeklyroutine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wr.ID = uint64(value.Int64)
		case weeklyroutine.FieldProgramID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_id", values[i])
			} else if value.Valid {
				wr.ProgramID = uint64(value.Int64)
			}
		case weeklyroutine.FieldWeek:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field week", values[i])
			} else if value.Valid {
				wr.Week = int(value.Int64)
			}
		case weeklyroutine.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wr.CreatedAt = value.Time
			}
		case weeklyroutine.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wr.UpdatedAt = value.Time
			}
		default:
			wr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WeeklyRoutine.
// This includes values selected through modifiers, order, etc.
func (wr *WeeklyRoutine) Value(name string) (ent.Value, error) {
	return wr.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the WeeklyRoutine entity.
func (wr *WeeklyRoutine) QueryProgram() *ProgramQuery {
	return NewWeeklyRoutineClient(wr.config).QueryProgram(wr)
}

// QueryDailyRoutines queries the "daily_routines" edge of the WeeklyRoutine entity.
func (wr *WeeklyRoutine) QueryDailyRoutines() *DailyRoutineQuery {
	return NewWeeklyRoutineClient(wr.config).QueryDailyRoutines(wr)
}

// QueryWeeklyRoutineRecs queries the "weekly_routine_recs" edge of the WeeklyRoutine entity.
func (wr *WeeklyRoutine) QueryWeeklyRoutineRecs() *WeeklyRoutineRecQuery {
	return NewWeeklyRoutineClient(wr.config).QueryWeeklyRoutineRecs(wr)
}

// Update returns a builder for updating this WeeklyRoutine.
// Note that you need to call WeeklyRoutine.Unwrap() before calling this method if this WeeklyRoutine
// was returned from a transaction, and the transaction was committed or rolled back.
func (wr *WeeklyRoutine) Update() *WeeklyRoutineUpdateOne {
	return NewWeeklyRoutineClient(wr.config).UpdateOne(wr)
}

// Unwrap unwraps the WeeklyRoutine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wr *WeeklyRoutine) Unwrap() *WeeklyRoutine {
	_tx, ok := wr.config.driver.(*txDriver)
	if !ok {
		panic("ent: WeeklyRoutine is not a transactional entity")
	}
	wr.config.driver = _tx.drv
	return wr
}

// String implements the fmt.Stringer.
func (wr *WeeklyRoutine) String() string {
	var builder strings.Builder
	builder.WriteString("WeeklyRoutine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wr.ID))
	builder.WriteString("program_id=")
	builder.WriteString(fmt.Sprintf("%v", wr.ProgramID))
	builder.WriteString(", ")
	builder.WriteString("week=")
	builder.WriteString(fmt.Sprintf("%v", wr.Week))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WeeklyRoutines is a parsable slice of WeeklyRoutine.
type WeeklyRoutines []*WeeklyRoutine

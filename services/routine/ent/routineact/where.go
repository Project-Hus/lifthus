// Code generated by ent, DO NOT EDIT.

package routineact

import (
	"routine/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldID, id))
}

// DailyRoutineID applies equality check predicate on the "daily_routine_id" field. It's identical to DailyRoutineIDEQ.
func DailyRoutineID(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldDailyRoutineID, v))
}

// ActID applies equality check predicate on the "act_id" field. It's identical to ActIDEQ.
func ActID(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldActID, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldOrder, v))
}

// Reps applies equality check predicate on the "reps" field. It's identical to RepsEQ.
func Reps(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldReps, v))
}

// Lap applies equality check predicate on the "lap" field. It's identical to LapEQ.
func Lap(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldLap, v))
}

// DailyRoutineIDEQ applies the EQ predicate on the "daily_routine_id" field.
func DailyRoutineIDEQ(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldDailyRoutineID, v))
}

// DailyRoutineIDNEQ applies the NEQ predicate on the "daily_routine_id" field.
func DailyRoutineIDNEQ(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldDailyRoutineID, v))
}

// DailyRoutineIDIn applies the In predicate on the "daily_routine_id" field.
func DailyRoutineIDIn(vs ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldDailyRoutineID, vs...))
}

// DailyRoutineIDNotIn applies the NotIn predicate on the "daily_routine_id" field.
func DailyRoutineIDNotIn(vs ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldDailyRoutineID, vs...))
}

// DailyRoutineIDGT applies the GT predicate on the "daily_routine_id" field.
func DailyRoutineIDGT(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldDailyRoutineID, v))
}

// DailyRoutineIDGTE applies the GTE predicate on the "daily_routine_id" field.
func DailyRoutineIDGTE(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldDailyRoutineID, v))
}

// DailyRoutineIDLT applies the LT predicate on the "daily_routine_id" field.
func DailyRoutineIDLT(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldDailyRoutineID, v))
}

// DailyRoutineIDLTE applies the LTE predicate on the "daily_routine_id" field.
func DailyRoutineIDLTE(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldDailyRoutineID, v))
}

// ActIDEQ applies the EQ predicate on the "act_id" field.
func ActIDEQ(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldActID, v))
}

// ActIDNEQ applies the NEQ predicate on the "act_id" field.
func ActIDNEQ(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldActID, v))
}

// ActIDIn applies the In predicate on the "act_id" field.
func ActIDIn(vs ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldActID, vs...))
}

// ActIDNotIn applies the NotIn predicate on the "act_id" field.
func ActIDNotIn(vs ...uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldActID, vs...))
}

// ActIDGT applies the GT predicate on the "act_id" field.
func ActIDGT(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldActID, v))
}

// ActIDGTE applies the GTE predicate on the "act_id" field.
func ActIDGTE(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldActID, v))
}

// ActIDLT applies the LT predicate on the "act_id" field.
func ActIDLT(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldActID, v))
}

// ActIDLTE applies the LTE predicate on the "act_id" field.
func ActIDLTE(v uint64) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldActID, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldOrder, v))
}

// RepsEQ applies the EQ predicate on the "reps" field.
func RepsEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldReps, v))
}

// RepsNEQ applies the NEQ predicate on the "reps" field.
func RepsNEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldReps, v))
}

// RepsIn applies the In predicate on the "reps" field.
func RepsIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldReps, vs...))
}

// RepsNotIn applies the NotIn predicate on the "reps" field.
func RepsNotIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldReps, vs...))
}

// RepsGT applies the GT predicate on the "reps" field.
func RepsGT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldReps, v))
}

// RepsGTE applies the GTE predicate on the "reps" field.
func RepsGTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldReps, v))
}

// RepsLT applies the LT predicate on the "reps" field.
func RepsLT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldReps, v))
}

// RepsLTE applies the LTE predicate on the "reps" field.
func RepsLTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldReps, v))
}

// RepsIsNil applies the IsNil predicate on the "reps" field.
func RepsIsNil() predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIsNull(FieldReps))
}

// RepsNotNil applies the NotNil predicate on the "reps" field.
func RepsNotNil() predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotNull(FieldReps))
}

// LapEQ applies the EQ predicate on the "lap" field.
func LapEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldEQ(FieldLap, v))
}

// LapNEQ applies the NEQ predicate on the "lap" field.
func LapNEQ(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNEQ(FieldLap, v))
}

// LapIn applies the In predicate on the "lap" field.
func LapIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIn(FieldLap, vs...))
}

// LapNotIn applies the NotIn predicate on the "lap" field.
func LapNotIn(vs ...int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotIn(FieldLap, vs...))
}

// LapGT applies the GT predicate on the "lap" field.
func LapGT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGT(FieldLap, v))
}

// LapGTE applies the GTE predicate on the "lap" field.
func LapGTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldGTE(FieldLap, v))
}

// LapLT applies the LT predicate on the "lap" field.
func LapLT(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLT(FieldLap, v))
}

// LapLTE applies the LTE predicate on the "lap" field.
func LapLTE(v int) predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldLTE(FieldLap, v))
}

// LapIsNil applies the IsNil predicate on the "lap" field.
func LapIsNil() predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldIsNull(FieldLap))
}

// LapNotNil applies the NotNil predicate on the "lap" field.
func LapNotNil() predicate.RoutineAct {
	return predicate.RoutineAct(sql.FieldNotNull(FieldLap))
}

// HasAct applies the HasEdge predicate on the "act" edge.
func HasAct() predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActTable, ActColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActWith applies the HasEdge predicate on the "act" edge with a given conditions (other predicates).
func HasActWith(preds ...predicate.Act) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := newActStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyRoutine applies the HasEdge predicate on the "daily_routine" edge.
func HasDailyRoutine() predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DailyRoutineTable, DailyRoutineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyRoutineWith applies the HasEdge predicate on the "daily_routine" edge with a given conditions (other predicates).
func HasDailyRoutineWith(preds ...predicate.DailyRoutine) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		step := newDailyRoutineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoutineAct) predicate.RoutineAct {
	return predicate.RoutineAct(func(s *sql.Selector) {
		p(s.Not())
	})
}

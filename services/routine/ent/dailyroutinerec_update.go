// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/dailyroutinerec"
	"routine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DailyRoutineRecUpdate is the builder for updating DailyRoutineRec entities.
type DailyRoutineRecUpdate struct {
	config
	hooks    []Hook
	mutation *DailyRoutineRecMutation
}

// Where appends a list predicates to the DailyRoutineRecUpdate builder.
func (drru *DailyRoutineRecUpdate) Where(ps ...predicate.DailyRoutineRec) *DailyRoutineRecUpdate {
	drru.mutation.Where(ps...)
	return drru
}

// SetProgramRecID sets the "program_rec_id" field.
func (drru *DailyRoutineRecUpdate) SetProgramRecID(u uint64) *DailyRoutineRecUpdate {
	drru.mutation.ResetProgramRecID()
	drru.mutation.SetProgramRecID(u)
	return drru
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (drru *DailyRoutineRecUpdate) SetNillableProgramRecID(u *uint64) *DailyRoutineRecUpdate {
	if u != nil {
		drru.SetProgramRecID(*u)
	}
	return drru
}

// AddProgramRecID adds u to the "program_rec_id" field.
func (drru *DailyRoutineRecUpdate) AddProgramRecID(u int64) *DailyRoutineRecUpdate {
	drru.mutation.AddProgramRecID(u)
	return drru
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (drru *DailyRoutineRecUpdate) ClearProgramRecID() *DailyRoutineRecUpdate {
	drru.mutation.ClearProgramRecID()
	return drru
}

// SetWeeklyRoutineRecID sets the "weekly_routine_rec_id" field.
func (drru *DailyRoutineRecUpdate) SetWeeklyRoutineRecID(u uint64) *DailyRoutineRecUpdate {
	drru.mutation.ResetWeeklyRoutineRecID()
	drru.mutation.SetWeeklyRoutineRecID(u)
	return drru
}

// SetNillableWeeklyRoutineRecID sets the "weekly_routine_rec_id" field if the given value is not nil.
func (drru *DailyRoutineRecUpdate) SetNillableWeeklyRoutineRecID(u *uint64) *DailyRoutineRecUpdate {
	if u != nil {
		drru.SetWeeklyRoutineRecID(*u)
	}
	return drru
}

// AddWeeklyRoutineRecID adds u to the "weekly_routine_rec_id" field.
func (drru *DailyRoutineRecUpdate) AddWeeklyRoutineRecID(u int64) *DailyRoutineRecUpdate {
	drru.mutation.AddWeeklyRoutineRecID(u)
	return drru
}

// ClearWeeklyRoutineRecID clears the value of the "weekly_routine_rec_id" field.
func (drru *DailyRoutineRecUpdate) ClearWeeklyRoutineRecID() *DailyRoutineRecUpdate {
	drru.mutation.ClearWeeklyRoutineRecID()
	return drru
}

// SetDailyRoutineID sets the "daily_routine_id" field.
func (drru *DailyRoutineRecUpdate) SetDailyRoutineID(u uint64) *DailyRoutineRecUpdate {
	drru.mutation.ResetDailyRoutineID()
	drru.mutation.SetDailyRoutineID(u)
	return drru
}

// SetNillableDailyRoutineID sets the "daily_routine_id" field if the given value is not nil.
func (drru *DailyRoutineRecUpdate) SetNillableDailyRoutineID(u *uint64) *DailyRoutineRecUpdate {
	if u != nil {
		drru.SetDailyRoutineID(*u)
	}
	return drru
}

// AddDailyRoutineID adds u to the "daily_routine_id" field.
func (drru *DailyRoutineRecUpdate) AddDailyRoutineID(u int64) *DailyRoutineRecUpdate {
	drru.mutation.AddDailyRoutineID(u)
	return drru
}

// ClearDailyRoutineID clears the value of the "daily_routine_id" field.
func (drru *DailyRoutineRecUpdate) ClearDailyRoutineID() *DailyRoutineRecUpdate {
	drru.mutation.ClearDailyRoutineID()
	return drru
}

// SetDate sets the "date" field.
func (drru *DailyRoutineRecUpdate) SetDate(t time.Time) *DailyRoutineRecUpdate {
	drru.mutation.SetDate(t)
	return drru
}

// SetStatus sets the "status" field.
func (drru *DailyRoutineRecUpdate) SetStatus(d dailyroutinerec.Status) *DailyRoutineRecUpdate {
	drru.mutation.SetStatus(d)
	return drru
}

// SetComment sets the "comment" field.
func (drru *DailyRoutineRecUpdate) SetComment(s string) *DailyRoutineRecUpdate {
	drru.mutation.SetComment(s)
	return drru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (drru *DailyRoutineRecUpdate) SetNillableComment(s *string) *DailyRoutineRecUpdate {
	if s != nil {
		drru.SetComment(*s)
	}
	return drru
}

// ClearComment clears the value of the "comment" field.
func (drru *DailyRoutineRecUpdate) ClearComment() *DailyRoutineRecUpdate {
	drru.mutation.ClearComment()
	return drru
}

// SetUpdatedAt sets the "updated_at" field.
func (drru *DailyRoutineRecUpdate) SetUpdatedAt(t time.Time) *DailyRoutineRecUpdate {
	drru.mutation.SetUpdatedAt(t)
	return drru
}

// Mutation returns the DailyRoutineRecMutation object of the builder.
func (drru *DailyRoutineRecUpdate) Mutation() *DailyRoutineRecMutation {
	return drru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (drru *DailyRoutineRecUpdate) Save(ctx context.Context) (int, error) {
	drru.defaults()
	return withHooks(ctx, drru.sqlSave, drru.mutation, drru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drru *DailyRoutineRecUpdate) SaveX(ctx context.Context) int {
	affected, err := drru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (drru *DailyRoutineRecUpdate) Exec(ctx context.Context) error {
	_, err := drru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drru *DailyRoutineRecUpdate) ExecX(ctx context.Context) {
	if err := drru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drru *DailyRoutineRecUpdate) defaults() {
	if _, ok := drru.mutation.UpdatedAt(); !ok {
		v := dailyroutinerec.UpdateDefaultUpdatedAt()
		drru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drru *DailyRoutineRecUpdate) check() error {
	if v, ok := drru.mutation.Status(); ok {
		if err := dailyroutinerec.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DailyRoutineRec.status": %w`, err)}
		}
	}
	return nil
}

func (drru *DailyRoutineRecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := drru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailyroutinerec.Table, dailyroutinerec.Columns, sqlgraph.NewFieldSpec(dailyroutinerec.FieldID, field.TypeUint64))
	if ps := drru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drru.mutation.ProgramRecID(); ok {
		_spec.SetField(dailyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if value, ok := drru.mutation.AddedProgramRecID(); ok {
		_spec.AddField(dailyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if drru.mutation.ProgramRecIDCleared() {
		_spec.ClearField(dailyroutinerec.FieldProgramRecID, field.TypeUint64)
	}
	if value, ok := drru.mutation.WeeklyRoutineRecID(); ok {
		_spec.SetField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64, value)
	}
	if value, ok := drru.mutation.AddedWeeklyRoutineRecID(); ok {
		_spec.AddField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64, value)
	}
	if drru.mutation.WeeklyRoutineRecIDCleared() {
		_spec.ClearField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64)
	}
	if value, ok := drru.mutation.DailyRoutineID(); ok {
		_spec.SetField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64, value)
	}
	if value, ok := drru.mutation.AddedDailyRoutineID(); ok {
		_spec.AddField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64, value)
	}
	if drru.mutation.DailyRoutineIDCleared() {
		_spec.ClearField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64)
	}
	if value, ok := drru.mutation.Date(); ok {
		_spec.SetField(dailyroutinerec.FieldDate, field.TypeTime, value)
	}
	if value, ok := drru.mutation.Status(); ok {
		_spec.SetField(dailyroutinerec.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := drru.mutation.Comment(); ok {
		_spec.SetField(dailyroutinerec.FieldComment, field.TypeString, value)
	}
	if drru.mutation.CommentCleared() {
		_spec.ClearField(dailyroutinerec.FieldComment, field.TypeString)
	}
	if value, ok := drru.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyroutinerec.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, drru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailyroutinerec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	drru.mutation.done = true
	return n, nil
}

// DailyRoutineRecUpdateOne is the builder for updating a single DailyRoutineRec entity.
type DailyRoutineRecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DailyRoutineRecMutation
}

// SetProgramRecID sets the "program_rec_id" field.
func (drruo *DailyRoutineRecUpdateOne) SetProgramRecID(u uint64) *DailyRoutineRecUpdateOne {
	drruo.mutation.ResetProgramRecID()
	drruo.mutation.SetProgramRecID(u)
	return drruo
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (drruo *DailyRoutineRecUpdateOne) SetNillableProgramRecID(u *uint64) *DailyRoutineRecUpdateOne {
	if u != nil {
		drruo.SetProgramRecID(*u)
	}
	return drruo
}

// AddProgramRecID adds u to the "program_rec_id" field.
func (drruo *DailyRoutineRecUpdateOne) AddProgramRecID(u int64) *DailyRoutineRecUpdateOne {
	drruo.mutation.AddProgramRecID(u)
	return drruo
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (drruo *DailyRoutineRecUpdateOne) ClearProgramRecID() *DailyRoutineRecUpdateOne {
	drruo.mutation.ClearProgramRecID()
	return drruo
}

// SetWeeklyRoutineRecID sets the "weekly_routine_rec_id" field.
func (drruo *DailyRoutineRecUpdateOne) SetWeeklyRoutineRecID(u uint64) *DailyRoutineRecUpdateOne {
	drruo.mutation.ResetWeeklyRoutineRecID()
	drruo.mutation.SetWeeklyRoutineRecID(u)
	return drruo
}

// SetNillableWeeklyRoutineRecID sets the "weekly_routine_rec_id" field if the given value is not nil.
func (drruo *DailyRoutineRecUpdateOne) SetNillableWeeklyRoutineRecID(u *uint64) *DailyRoutineRecUpdateOne {
	if u != nil {
		drruo.SetWeeklyRoutineRecID(*u)
	}
	return drruo
}

// AddWeeklyRoutineRecID adds u to the "weekly_routine_rec_id" field.
func (drruo *DailyRoutineRecUpdateOne) AddWeeklyRoutineRecID(u int64) *DailyRoutineRecUpdateOne {
	drruo.mutation.AddWeeklyRoutineRecID(u)
	return drruo
}

// ClearWeeklyRoutineRecID clears the value of the "weekly_routine_rec_id" field.
func (drruo *DailyRoutineRecUpdateOne) ClearWeeklyRoutineRecID() *DailyRoutineRecUpdateOne {
	drruo.mutation.ClearWeeklyRoutineRecID()
	return drruo
}

// SetDailyRoutineID sets the "daily_routine_id" field.
func (drruo *DailyRoutineRecUpdateOne) SetDailyRoutineID(u uint64) *DailyRoutineRecUpdateOne {
	drruo.mutation.ResetDailyRoutineID()
	drruo.mutation.SetDailyRoutineID(u)
	return drruo
}

// SetNillableDailyRoutineID sets the "daily_routine_id" field if the given value is not nil.
func (drruo *DailyRoutineRecUpdateOne) SetNillableDailyRoutineID(u *uint64) *DailyRoutineRecUpdateOne {
	if u != nil {
		drruo.SetDailyRoutineID(*u)
	}
	return drruo
}

// AddDailyRoutineID adds u to the "daily_routine_id" field.
func (drruo *DailyRoutineRecUpdateOne) AddDailyRoutineID(u int64) *DailyRoutineRecUpdateOne {
	drruo.mutation.AddDailyRoutineID(u)
	return drruo
}

// ClearDailyRoutineID clears the value of the "daily_routine_id" field.
func (drruo *DailyRoutineRecUpdateOne) ClearDailyRoutineID() *DailyRoutineRecUpdateOne {
	drruo.mutation.ClearDailyRoutineID()
	return drruo
}

// SetDate sets the "date" field.
func (drruo *DailyRoutineRecUpdateOne) SetDate(t time.Time) *DailyRoutineRecUpdateOne {
	drruo.mutation.SetDate(t)
	return drruo
}

// SetStatus sets the "status" field.
func (drruo *DailyRoutineRecUpdateOne) SetStatus(d dailyroutinerec.Status) *DailyRoutineRecUpdateOne {
	drruo.mutation.SetStatus(d)
	return drruo
}

// SetComment sets the "comment" field.
func (drruo *DailyRoutineRecUpdateOne) SetComment(s string) *DailyRoutineRecUpdateOne {
	drruo.mutation.SetComment(s)
	return drruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (drruo *DailyRoutineRecUpdateOne) SetNillableComment(s *string) *DailyRoutineRecUpdateOne {
	if s != nil {
		drruo.SetComment(*s)
	}
	return drruo
}

// ClearComment clears the value of the "comment" field.
func (drruo *DailyRoutineRecUpdateOne) ClearComment() *DailyRoutineRecUpdateOne {
	drruo.mutation.ClearComment()
	return drruo
}

// SetUpdatedAt sets the "updated_at" field.
func (drruo *DailyRoutineRecUpdateOne) SetUpdatedAt(t time.Time) *DailyRoutineRecUpdateOne {
	drruo.mutation.SetUpdatedAt(t)
	return drruo
}

// Mutation returns the DailyRoutineRecMutation object of the builder.
func (drruo *DailyRoutineRecUpdateOne) Mutation() *DailyRoutineRecMutation {
	return drruo.mutation
}

// Where appends a list predicates to the DailyRoutineRecUpdate builder.
func (drruo *DailyRoutineRecUpdateOne) Where(ps ...predicate.DailyRoutineRec) *DailyRoutineRecUpdateOne {
	drruo.mutation.Where(ps...)
	return drruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (drruo *DailyRoutineRecUpdateOne) Select(field string, fields ...string) *DailyRoutineRecUpdateOne {
	drruo.fields = append([]string{field}, fields...)
	return drruo
}

// Save executes the query and returns the updated DailyRoutineRec entity.
func (drruo *DailyRoutineRecUpdateOne) Save(ctx context.Context) (*DailyRoutineRec, error) {
	drruo.defaults()
	return withHooks(ctx, drruo.sqlSave, drruo.mutation, drruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drruo *DailyRoutineRecUpdateOne) SaveX(ctx context.Context) *DailyRoutineRec {
	node, err := drruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (drruo *DailyRoutineRecUpdateOne) Exec(ctx context.Context) error {
	_, err := drruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drruo *DailyRoutineRecUpdateOne) ExecX(ctx context.Context) {
	if err := drruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drruo *DailyRoutineRecUpdateOne) defaults() {
	if _, ok := drruo.mutation.UpdatedAt(); !ok {
		v := dailyroutinerec.UpdateDefaultUpdatedAt()
		drruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drruo *DailyRoutineRecUpdateOne) check() error {
	if v, ok := drruo.mutation.Status(); ok {
		if err := dailyroutinerec.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DailyRoutineRec.status": %w`, err)}
		}
	}
	return nil
}

func (drruo *DailyRoutineRecUpdateOne) sqlSave(ctx context.Context) (_node *DailyRoutineRec, err error) {
	if err := drruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailyroutinerec.Table, dailyroutinerec.Columns, sqlgraph.NewFieldSpec(dailyroutinerec.FieldID, field.TypeUint64))
	id, ok := drruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DailyRoutineRec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := drruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailyroutinerec.FieldID)
		for _, f := range fields {
			if !dailyroutinerec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dailyroutinerec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := drruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drruo.mutation.ProgramRecID(); ok {
		_spec.SetField(dailyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if value, ok := drruo.mutation.AddedProgramRecID(); ok {
		_spec.AddField(dailyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if drruo.mutation.ProgramRecIDCleared() {
		_spec.ClearField(dailyroutinerec.FieldProgramRecID, field.TypeUint64)
	}
	if value, ok := drruo.mutation.WeeklyRoutineRecID(); ok {
		_spec.SetField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64, value)
	}
	if value, ok := drruo.mutation.AddedWeeklyRoutineRecID(); ok {
		_spec.AddField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64, value)
	}
	if drruo.mutation.WeeklyRoutineRecIDCleared() {
		_spec.ClearField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64)
	}
	if value, ok := drruo.mutation.DailyRoutineID(); ok {
		_spec.SetField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64, value)
	}
	if value, ok := drruo.mutation.AddedDailyRoutineID(); ok {
		_spec.AddField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64, value)
	}
	if drruo.mutation.DailyRoutineIDCleared() {
		_spec.ClearField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64)
	}
	if value, ok := drruo.mutation.Date(); ok {
		_spec.SetField(dailyroutinerec.FieldDate, field.TypeTime, value)
	}
	if value, ok := drruo.mutation.Status(); ok {
		_spec.SetField(dailyroutinerec.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := drruo.mutation.Comment(); ok {
		_spec.SetField(dailyroutinerec.FieldComment, field.TypeString, value)
	}
	if drruo.mutation.CommentCleared() {
		_spec.ClearField(dailyroutinerec.FieldComment, field.TypeString)
	}
	if value, ok := drruo.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyroutinerec.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &DailyRoutineRec{config: drruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, drruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailyroutinerec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	drruo.mutation.done = true
	return _node, nil
}

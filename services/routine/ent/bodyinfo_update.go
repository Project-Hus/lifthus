// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/bodyinfo"
	"routine/ent/predicate"
	"routine/ent/programrec"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BodyInfoUpdate is the builder for updating BodyInfo entities.
type BodyInfoUpdate struct {
	config
	hooks    []Hook
	mutation *BodyInfoMutation
}

// Where appends a list predicates to the BodyInfoUpdate builder.
func (biu *BodyInfoUpdate) Where(ps ...predicate.BodyInfo) *BodyInfoUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetAuthor sets the "author" field.
func (biu *BodyInfoUpdate) SetAuthor(u uint64) *BodyInfoUpdate {
	biu.mutation.ResetAuthor()
	biu.mutation.SetAuthor(u)
	return biu
}

// AddAuthor adds u to the "author" field.
func (biu *BodyInfoUpdate) AddAuthor(u int64) *BodyInfoUpdate {
	biu.mutation.AddAuthor(u)
	return biu
}

// SetProgramRecID sets the "program_rec_id" field.
func (biu *BodyInfoUpdate) SetProgramRecID(u uint64) *BodyInfoUpdate {
	biu.mutation.SetProgramRecID(u)
	return biu
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (biu *BodyInfoUpdate) SetNillableProgramRecID(u *uint64) *BodyInfoUpdate {
	if u != nil {
		biu.SetProgramRecID(*u)
	}
	return biu
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (biu *BodyInfoUpdate) ClearProgramRecID() *BodyInfoUpdate {
	biu.mutation.ClearProgramRecID()
	return biu
}

// SetDate sets the "date" field.
func (biu *BodyInfoUpdate) SetDate(t time.Time) *BodyInfoUpdate {
	biu.mutation.SetDate(t)
	return biu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (biu *BodyInfoUpdate) SetNillableDate(t *time.Time) *BodyInfoUpdate {
	if t != nil {
		biu.SetDate(*t)
	}
	return biu
}

// SetHeight sets the "height" field.
func (biu *BodyInfoUpdate) SetHeight(f float64) *BodyInfoUpdate {
	biu.mutation.ResetHeight()
	biu.mutation.SetHeight(f)
	return biu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (biu *BodyInfoUpdate) SetNillableHeight(f *float64) *BodyInfoUpdate {
	if f != nil {
		biu.SetHeight(*f)
	}
	return biu
}

// AddHeight adds f to the "height" field.
func (biu *BodyInfoUpdate) AddHeight(f float64) *BodyInfoUpdate {
	biu.mutation.AddHeight(f)
	return biu
}

// ClearHeight clears the value of the "height" field.
func (biu *BodyInfoUpdate) ClearHeight() *BodyInfoUpdate {
	biu.mutation.ClearHeight()
	return biu
}

// SetBodyWeight sets the "body_weight" field.
func (biu *BodyInfoUpdate) SetBodyWeight(f float64) *BodyInfoUpdate {
	biu.mutation.ResetBodyWeight()
	biu.mutation.SetBodyWeight(f)
	return biu
}

// SetNillableBodyWeight sets the "body_weight" field if the given value is not nil.
func (biu *BodyInfoUpdate) SetNillableBodyWeight(f *float64) *BodyInfoUpdate {
	if f != nil {
		biu.SetBodyWeight(*f)
	}
	return biu
}

// AddBodyWeight adds f to the "body_weight" field.
func (biu *BodyInfoUpdate) AddBodyWeight(f float64) *BodyInfoUpdate {
	biu.mutation.AddBodyWeight(f)
	return biu
}

// ClearBodyWeight clears the value of the "body_weight" field.
func (biu *BodyInfoUpdate) ClearBodyWeight() *BodyInfoUpdate {
	biu.mutation.ClearBodyWeight()
	return biu
}

// SetBodyFatMass sets the "body_fat_mass" field.
func (biu *BodyInfoUpdate) SetBodyFatMass(f float64) *BodyInfoUpdate {
	biu.mutation.ResetBodyFatMass()
	biu.mutation.SetBodyFatMass(f)
	return biu
}

// SetNillableBodyFatMass sets the "body_fat_mass" field if the given value is not nil.
func (biu *BodyInfoUpdate) SetNillableBodyFatMass(f *float64) *BodyInfoUpdate {
	if f != nil {
		biu.SetBodyFatMass(*f)
	}
	return biu
}

// AddBodyFatMass adds f to the "body_fat_mass" field.
func (biu *BodyInfoUpdate) AddBodyFatMass(f float64) *BodyInfoUpdate {
	biu.mutation.AddBodyFatMass(f)
	return biu
}

// ClearBodyFatMass clears the value of the "body_fat_mass" field.
func (biu *BodyInfoUpdate) ClearBodyFatMass() *BodyInfoUpdate {
	biu.mutation.ClearBodyFatMass()
	return biu
}

// SetSkeletalMuscleMass sets the "skeletal_muscle_mass" field.
func (biu *BodyInfoUpdate) SetSkeletalMuscleMass(f float64) *BodyInfoUpdate {
	biu.mutation.ResetSkeletalMuscleMass()
	biu.mutation.SetSkeletalMuscleMass(f)
	return biu
}

// SetNillableSkeletalMuscleMass sets the "skeletal_muscle_mass" field if the given value is not nil.
func (biu *BodyInfoUpdate) SetNillableSkeletalMuscleMass(f *float64) *BodyInfoUpdate {
	if f != nil {
		biu.SetSkeletalMuscleMass(*f)
	}
	return biu
}

// AddSkeletalMuscleMass adds f to the "skeletal_muscle_mass" field.
func (biu *BodyInfoUpdate) AddSkeletalMuscleMass(f float64) *BodyInfoUpdate {
	biu.mutation.AddSkeletalMuscleMass(f)
	return biu
}

// ClearSkeletalMuscleMass clears the value of the "skeletal_muscle_mass" field.
func (biu *BodyInfoUpdate) ClearSkeletalMuscleMass() *BodyInfoUpdate {
	biu.mutation.ClearSkeletalMuscleMass()
	return biu
}

// SetProgramRec sets the "program_rec" edge to the ProgramRec entity.
func (biu *BodyInfoUpdate) SetProgramRec(p *ProgramRec) *BodyInfoUpdate {
	return biu.SetProgramRecID(p.ID)
}

// Mutation returns the BodyInfoMutation object of the builder.
func (biu *BodyInfoUpdate) Mutation() *BodyInfoMutation {
	return biu.mutation
}

// ClearProgramRec clears the "program_rec" edge to the ProgramRec entity.
func (biu *BodyInfoUpdate) ClearProgramRec() *BodyInfoUpdate {
	biu.mutation.ClearProgramRec()
	return biu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BodyInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BodyInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BodyInfoUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BodyInfoUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biu *BodyInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bodyinfo.Table, bodyinfo.Columns, sqlgraph.NewFieldSpec(bodyinfo.FieldID, field.TypeUint64))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.Author(); ok {
		_spec.SetField(bodyinfo.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := biu.mutation.AddedAuthor(); ok {
		_spec.AddField(bodyinfo.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := biu.mutation.Date(); ok {
		_spec.SetField(bodyinfo.FieldDate, field.TypeTime, value)
	}
	if value, ok := biu.mutation.Height(); ok {
		_spec.SetField(bodyinfo.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := biu.mutation.AddedHeight(); ok {
		_spec.AddField(bodyinfo.FieldHeight, field.TypeFloat64, value)
	}
	if biu.mutation.HeightCleared() {
		_spec.ClearField(bodyinfo.FieldHeight, field.TypeFloat64)
	}
	if value, ok := biu.mutation.BodyWeight(); ok {
		_spec.SetField(bodyinfo.FieldBodyWeight, field.TypeFloat64, value)
	}
	if value, ok := biu.mutation.AddedBodyWeight(); ok {
		_spec.AddField(bodyinfo.FieldBodyWeight, field.TypeFloat64, value)
	}
	if biu.mutation.BodyWeightCleared() {
		_spec.ClearField(bodyinfo.FieldBodyWeight, field.TypeFloat64)
	}
	if value, ok := biu.mutation.BodyFatMass(); ok {
		_spec.SetField(bodyinfo.FieldBodyFatMass, field.TypeFloat64, value)
	}
	if value, ok := biu.mutation.AddedBodyFatMass(); ok {
		_spec.AddField(bodyinfo.FieldBodyFatMass, field.TypeFloat64, value)
	}
	if biu.mutation.BodyFatMassCleared() {
		_spec.ClearField(bodyinfo.FieldBodyFatMass, field.TypeFloat64)
	}
	if value, ok := biu.mutation.SkeletalMuscleMass(); ok {
		_spec.SetField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64, value)
	}
	if value, ok := biu.mutation.AddedSkeletalMuscleMass(); ok {
		_spec.AddField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64, value)
	}
	if biu.mutation.SkeletalMuscleMassCleared() {
		_spec.ClearField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64)
	}
	if biu.mutation.ProgramRecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyinfo.ProgramRecTable,
			Columns: []string{bodyinfo.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.ProgramRecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyinfo.ProgramRecTable,
			Columns: []string{bodyinfo.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bodyinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BodyInfoUpdateOne is the builder for updating a single BodyInfo entity.
type BodyInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BodyInfoMutation
}

// SetAuthor sets the "author" field.
func (biuo *BodyInfoUpdateOne) SetAuthor(u uint64) *BodyInfoUpdateOne {
	biuo.mutation.ResetAuthor()
	biuo.mutation.SetAuthor(u)
	return biuo
}

// AddAuthor adds u to the "author" field.
func (biuo *BodyInfoUpdateOne) AddAuthor(u int64) *BodyInfoUpdateOne {
	biuo.mutation.AddAuthor(u)
	return biuo
}

// SetProgramRecID sets the "program_rec_id" field.
func (biuo *BodyInfoUpdateOne) SetProgramRecID(u uint64) *BodyInfoUpdateOne {
	biuo.mutation.SetProgramRecID(u)
	return biuo
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (biuo *BodyInfoUpdateOne) SetNillableProgramRecID(u *uint64) *BodyInfoUpdateOne {
	if u != nil {
		biuo.SetProgramRecID(*u)
	}
	return biuo
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (biuo *BodyInfoUpdateOne) ClearProgramRecID() *BodyInfoUpdateOne {
	biuo.mutation.ClearProgramRecID()
	return biuo
}

// SetDate sets the "date" field.
func (biuo *BodyInfoUpdateOne) SetDate(t time.Time) *BodyInfoUpdateOne {
	biuo.mutation.SetDate(t)
	return biuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (biuo *BodyInfoUpdateOne) SetNillableDate(t *time.Time) *BodyInfoUpdateOne {
	if t != nil {
		biuo.SetDate(*t)
	}
	return biuo
}

// SetHeight sets the "height" field.
func (biuo *BodyInfoUpdateOne) SetHeight(f float64) *BodyInfoUpdateOne {
	biuo.mutation.ResetHeight()
	biuo.mutation.SetHeight(f)
	return biuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (biuo *BodyInfoUpdateOne) SetNillableHeight(f *float64) *BodyInfoUpdateOne {
	if f != nil {
		biuo.SetHeight(*f)
	}
	return biuo
}

// AddHeight adds f to the "height" field.
func (biuo *BodyInfoUpdateOne) AddHeight(f float64) *BodyInfoUpdateOne {
	biuo.mutation.AddHeight(f)
	return biuo
}

// ClearHeight clears the value of the "height" field.
func (biuo *BodyInfoUpdateOne) ClearHeight() *BodyInfoUpdateOne {
	biuo.mutation.ClearHeight()
	return biuo
}

// SetBodyWeight sets the "body_weight" field.
func (biuo *BodyInfoUpdateOne) SetBodyWeight(f float64) *BodyInfoUpdateOne {
	biuo.mutation.ResetBodyWeight()
	biuo.mutation.SetBodyWeight(f)
	return biuo
}

// SetNillableBodyWeight sets the "body_weight" field if the given value is not nil.
func (biuo *BodyInfoUpdateOne) SetNillableBodyWeight(f *float64) *BodyInfoUpdateOne {
	if f != nil {
		biuo.SetBodyWeight(*f)
	}
	return biuo
}

// AddBodyWeight adds f to the "body_weight" field.
func (biuo *BodyInfoUpdateOne) AddBodyWeight(f float64) *BodyInfoUpdateOne {
	biuo.mutation.AddBodyWeight(f)
	return biuo
}

// ClearBodyWeight clears the value of the "body_weight" field.
func (biuo *BodyInfoUpdateOne) ClearBodyWeight() *BodyInfoUpdateOne {
	biuo.mutation.ClearBodyWeight()
	return biuo
}

// SetBodyFatMass sets the "body_fat_mass" field.
func (biuo *BodyInfoUpdateOne) SetBodyFatMass(f float64) *BodyInfoUpdateOne {
	biuo.mutation.ResetBodyFatMass()
	biuo.mutation.SetBodyFatMass(f)
	return biuo
}

// SetNillableBodyFatMass sets the "body_fat_mass" field if the given value is not nil.
func (biuo *BodyInfoUpdateOne) SetNillableBodyFatMass(f *float64) *BodyInfoUpdateOne {
	if f != nil {
		biuo.SetBodyFatMass(*f)
	}
	return biuo
}

// AddBodyFatMass adds f to the "body_fat_mass" field.
func (biuo *BodyInfoUpdateOne) AddBodyFatMass(f float64) *BodyInfoUpdateOne {
	biuo.mutation.AddBodyFatMass(f)
	return biuo
}

// ClearBodyFatMass clears the value of the "body_fat_mass" field.
func (biuo *BodyInfoUpdateOne) ClearBodyFatMass() *BodyInfoUpdateOne {
	biuo.mutation.ClearBodyFatMass()
	return biuo
}

// SetSkeletalMuscleMass sets the "skeletal_muscle_mass" field.
func (biuo *BodyInfoUpdateOne) SetSkeletalMuscleMass(f float64) *BodyInfoUpdateOne {
	biuo.mutation.ResetSkeletalMuscleMass()
	biuo.mutation.SetSkeletalMuscleMass(f)
	return biuo
}

// SetNillableSkeletalMuscleMass sets the "skeletal_muscle_mass" field if the given value is not nil.
func (biuo *BodyInfoUpdateOne) SetNillableSkeletalMuscleMass(f *float64) *BodyInfoUpdateOne {
	if f != nil {
		biuo.SetSkeletalMuscleMass(*f)
	}
	return biuo
}

// AddSkeletalMuscleMass adds f to the "skeletal_muscle_mass" field.
func (biuo *BodyInfoUpdateOne) AddSkeletalMuscleMass(f float64) *BodyInfoUpdateOne {
	biuo.mutation.AddSkeletalMuscleMass(f)
	return biuo
}

// ClearSkeletalMuscleMass clears the value of the "skeletal_muscle_mass" field.
func (biuo *BodyInfoUpdateOne) ClearSkeletalMuscleMass() *BodyInfoUpdateOne {
	biuo.mutation.ClearSkeletalMuscleMass()
	return biuo
}

// SetProgramRec sets the "program_rec" edge to the ProgramRec entity.
func (biuo *BodyInfoUpdateOne) SetProgramRec(p *ProgramRec) *BodyInfoUpdateOne {
	return biuo.SetProgramRecID(p.ID)
}

// Mutation returns the BodyInfoMutation object of the builder.
func (biuo *BodyInfoUpdateOne) Mutation() *BodyInfoMutation {
	return biuo.mutation
}

// ClearProgramRec clears the "program_rec" edge to the ProgramRec entity.
func (biuo *BodyInfoUpdateOne) ClearProgramRec() *BodyInfoUpdateOne {
	biuo.mutation.ClearProgramRec()
	return biuo
}

// Where appends a list predicates to the BodyInfoUpdate builder.
func (biuo *BodyInfoUpdateOne) Where(ps ...predicate.BodyInfo) *BodyInfoUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BodyInfoUpdateOne) Select(field string, fields ...string) *BodyInfoUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BodyInfo entity.
func (biuo *BodyInfoUpdateOne) Save(ctx context.Context) (*BodyInfo, error) {
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BodyInfoUpdateOne) SaveX(ctx context.Context) *BodyInfo {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BodyInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BodyInfoUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biuo *BodyInfoUpdateOne) sqlSave(ctx context.Context) (_node *BodyInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(bodyinfo.Table, bodyinfo.Columns, sqlgraph.NewFieldSpec(bodyinfo.FieldID, field.TypeUint64))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BodyInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bodyinfo.FieldID)
		for _, f := range fields {
			if !bodyinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bodyinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.Author(); ok {
		_spec.SetField(bodyinfo.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := biuo.mutation.AddedAuthor(); ok {
		_spec.AddField(bodyinfo.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := biuo.mutation.Date(); ok {
		_spec.SetField(bodyinfo.FieldDate, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.Height(); ok {
		_spec.SetField(bodyinfo.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := biuo.mutation.AddedHeight(); ok {
		_spec.AddField(bodyinfo.FieldHeight, field.TypeFloat64, value)
	}
	if biuo.mutation.HeightCleared() {
		_spec.ClearField(bodyinfo.FieldHeight, field.TypeFloat64)
	}
	if value, ok := biuo.mutation.BodyWeight(); ok {
		_spec.SetField(bodyinfo.FieldBodyWeight, field.TypeFloat64, value)
	}
	if value, ok := biuo.mutation.AddedBodyWeight(); ok {
		_spec.AddField(bodyinfo.FieldBodyWeight, field.TypeFloat64, value)
	}
	if biuo.mutation.BodyWeightCleared() {
		_spec.ClearField(bodyinfo.FieldBodyWeight, field.TypeFloat64)
	}
	if value, ok := biuo.mutation.BodyFatMass(); ok {
		_spec.SetField(bodyinfo.FieldBodyFatMass, field.TypeFloat64, value)
	}
	if value, ok := biuo.mutation.AddedBodyFatMass(); ok {
		_spec.AddField(bodyinfo.FieldBodyFatMass, field.TypeFloat64, value)
	}
	if biuo.mutation.BodyFatMassCleared() {
		_spec.ClearField(bodyinfo.FieldBodyFatMass, field.TypeFloat64)
	}
	if value, ok := biuo.mutation.SkeletalMuscleMass(); ok {
		_spec.SetField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64, value)
	}
	if value, ok := biuo.mutation.AddedSkeletalMuscleMass(); ok {
		_spec.AddField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64, value)
	}
	if biuo.mutation.SkeletalMuscleMassCleared() {
		_spec.ClearField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64)
	}
	if biuo.mutation.ProgramRecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyinfo.ProgramRecTable,
			Columns: []string{bodyinfo.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.ProgramRecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyinfo.ProgramRecTable,
			Columns: []string{bodyinfo.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BodyInfo{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bodyinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}

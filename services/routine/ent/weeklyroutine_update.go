// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/dailyroutine"
	"routine/ent/predicate"
	"routine/ent/program"
	"routine/ent/weeklyroutine"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WeeklyRoutineUpdate is the builder for updating WeeklyRoutine entities.
type WeeklyRoutineUpdate struct {
	config
	hooks    []Hook
	mutation *WeeklyRoutineMutation
}

// Where appends a list predicates to the WeeklyRoutineUpdate builder.
func (wru *WeeklyRoutineUpdate) Where(ps ...predicate.WeeklyRoutine) *WeeklyRoutineUpdate {
	wru.mutation.Where(ps...)
	return wru
}

// SetProgramID sets the "program_id" field.
func (wru *WeeklyRoutineUpdate) SetProgramID(u uint64) *WeeklyRoutineUpdate {
	wru.mutation.ResetProgramID()
	wru.mutation.SetProgramID(u)
	return wru
}

// AddProgramID adds u to the "program_id" field.
func (wru *WeeklyRoutineUpdate) AddProgramID(u int64) *WeeklyRoutineUpdate {
	wru.mutation.AddProgramID(u)
	return wru
}

// SetWeek sets the "week" field.
func (wru *WeeklyRoutineUpdate) SetWeek(i int) *WeeklyRoutineUpdate {
	wru.mutation.ResetWeek()
	wru.mutation.SetWeek(i)
	return wru
}

// AddWeek adds i to the "week" field.
func (wru *WeeklyRoutineUpdate) AddWeek(i int) *WeeklyRoutineUpdate {
	wru.mutation.AddWeek(i)
	return wru
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (wru *WeeklyRoutineUpdate) AddProgramIDs(ids ...uint64) *WeeklyRoutineUpdate {
	wru.mutation.AddProgramIDs(ids...)
	return wru
}

// AddProgram adds the "program" edges to the Program entity.
func (wru *WeeklyRoutineUpdate) AddProgram(p ...*Program) *WeeklyRoutineUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wru.AddProgramIDs(ids...)
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by IDs.
func (wru *WeeklyRoutineUpdate) AddDailyRoutineIDs(ids ...uint64) *WeeklyRoutineUpdate {
	wru.mutation.AddDailyRoutineIDs(ids...)
	return wru
}

// AddDailyRoutines adds the "daily_routines" edges to the DailyRoutine entity.
func (wru *WeeklyRoutineUpdate) AddDailyRoutines(d ...*DailyRoutine) *WeeklyRoutineUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wru.AddDailyRoutineIDs(ids...)
}

// Mutation returns the WeeklyRoutineMutation object of the builder.
func (wru *WeeklyRoutineUpdate) Mutation() *WeeklyRoutineMutation {
	return wru.mutation
}

// ClearProgram clears all "program" edges to the Program entity.
func (wru *WeeklyRoutineUpdate) ClearProgram() *WeeklyRoutineUpdate {
	wru.mutation.ClearProgram()
	return wru
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (wru *WeeklyRoutineUpdate) RemoveProgramIDs(ids ...uint64) *WeeklyRoutineUpdate {
	wru.mutation.RemoveProgramIDs(ids...)
	return wru
}

// RemoveProgram removes "program" edges to Program entities.
func (wru *WeeklyRoutineUpdate) RemoveProgram(p ...*Program) *WeeklyRoutineUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wru.RemoveProgramIDs(ids...)
}

// ClearDailyRoutines clears all "daily_routines" edges to the DailyRoutine entity.
func (wru *WeeklyRoutineUpdate) ClearDailyRoutines() *WeeklyRoutineUpdate {
	wru.mutation.ClearDailyRoutines()
	return wru
}

// RemoveDailyRoutineIDs removes the "daily_routines" edge to DailyRoutine entities by IDs.
func (wru *WeeklyRoutineUpdate) RemoveDailyRoutineIDs(ids ...uint64) *WeeklyRoutineUpdate {
	wru.mutation.RemoveDailyRoutineIDs(ids...)
	return wru
}

// RemoveDailyRoutines removes "daily_routines" edges to DailyRoutine entities.
func (wru *WeeklyRoutineUpdate) RemoveDailyRoutines(d ...*DailyRoutine) *WeeklyRoutineUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wru.RemoveDailyRoutineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wru *WeeklyRoutineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wru.sqlSave, wru.mutation, wru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wru *WeeklyRoutineUpdate) SaveX(ctx context.Context) int {
	affected, err := wru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wru *WeeklyRoutineUpdate) Exec(ctx context.Context) error {
	_, err := wru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wru *WeeklyRoutineUpdate) ExecX(ctx context.Context) {
	if err := wru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wru *WeeklyRoutineUpdate) check() error {
	if v, ok := wru.mutation.Week(); ok {
		if err := weeklyroutine.WeekValidator(v); err != nil {
			return &ValidationError{Name: "week", err: fmt.Errorf(`ent: validator failed for field "WeeklyRoutine.week": %w`, err)}
		}
	}
	return nil
}

func (wru *WeeklyRoutineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(weeklyroutine.Table, weeklyroutine.Columns, sqlgraph.NewFieldSpec(weeklyroutine.FieldID, field.TypeUint64))
	if ps := wru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wru.mutation.ProgramID(); ok {
		_spec.SetField(weeklyroutine.FieldProgramID, field.TypeUint64, value)
	}
	if value, ok := wru.mutation.AddedProgramID(); ok {
		_spec.AddField(weeklyroutine.FieldProgramID, field.TypeUint64, value)
	}
	if value, ok := wru.mutation.Week(); ok {
		_spec.SetField(weeklyroutine.FieldWeek, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedWeek(); ok {
		_spec.AddField(weeklyroutine.FieldWeek, field.TypeInt, value)
	}
	if wru.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weeklyroutine.ProgramTable,
			Columns: weeklyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.RemovedProgramIDs(); len(nodes) > 0 && !wru.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weeklyroutine.ProgramTable,
			Columns: weeklyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weeklyroutine.ProgramTable,
			Columns: weeklyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wru.mutation.DailyRoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weeklyroutine.DailyRoutinesTable,
			Columns: weeklyroutine.DailyRoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.RemovedDailyRoutinesIDs(); len(nodes) > 0 && !wru.mutation.DailyRoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weeklyroutine.DailyRoutinesTable,
			Columns: weeklyroutine.DailyRoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.DailyRoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weeklyroutine.DailyRoutinesTable,
			Columns: weeklyroutine.DailyRoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weeklyroutine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wru.mutation.done = true
	return n, nil
}

// WeeklyRoutineUpdateOne is the builder for updating a single WeeklyRoutine entity.
type WeeklyRoutineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeeklyRoutineMutation
}

// SetProgramID sets the "program_id" field.
func (wruo *WeeklyRoutineUpdateOne) SetProgramID(u uint64) *WeeklyRoutineUpdateOne {
	wruo.mutation.ResetProgramID()
	wruo.mutation.SetProgramID(u)
	return wruo
}

// AddProgramID adds u to the "program_id" field.
func (wruo *WeeklyRoutineUpdateOne) AddProgramID(u int64) *WeeklyRoutineUpdateOne {
	wruo.mutation.AddProgramID(u)
	return wruo
}

// SetWeek sets the "week" field.
func (wruo *WeeklyRoutineUpdateOne) SetWeek(i int) *WeeklyRoutineUpdateOne {
	wruo.mutation.ResetWeek()
	wruo.mutation.SetWeek(i)
	return wruo
}

// AddWeek adds i to the "week" field.
func (wruo *WeeklyRoutineUpdateOne) AddWeek(i int) *WeeklyRoutineUpdateOne {
	wruo.mutation.AddWeek(i)
	return wruo
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (wruo *WeeklyRoutineUpdateOne) AddProgramIDs(ids ...uint64) *WeeklyRoutineUpdateOne {
	wruo.mutation.AddProgramIDs(ids...)
	return wruo
}

// AddProgram adds the "program" edges to the Program entity.
func (wruo *WeeklyRoutineUpdateOne) AddProgram(p ...*Program) *WeeklyRoutineUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wruo.AddProgramIDs(ids...)
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by IDs.
func (wruo *WeeklyRoutineUpdateOne) AddDailyRoutineIDs(ids ...uint64) *WeeklyRoutineUpdateOne {
	wruo.mutation.AddDailyRoutineIDs(ids...)
	return wruo
}

// AddDailyRoutines adds the "daily_routines" edges to the DailyRoutine entity.
func (wruo *WeeklyRoutineUpdateOne) AddDailyRoutines(d ...*DailyRoutine) *WeeklyRoutineUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wruo.AddDailyRoutineIDs(ids...)
}

// Mutation returns the WeeklyRoutineMutation object of the builder.
func (wruo *WeeklyRoutineUpdateOne) Mutation() *WeeklyRoutineMutation {
	return wruo.mutation
}

// ClearProgram clears all "program" edges to the Program entity.
func (wruo *WeeklyRoutineUpdateOne) ClearProgram() *WeeklyRoutineUpdateOne {
	wruo.mutation.ClearProgram()
	return wruo
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (wruo *WeeklyRoutineUpdateOne) RemoveProgramIDs(ids ...uint64) *WeeklyRoutineUpdateOne {
	wruo.mutation.RemoveProgramIDs(ids...)
	return wruo
}

// RemoveProgram removes "program" edges to Program entities.
func (wruo *WeeklyRoutineUpdateOne) RemoveProgram(p ...*Program) *WeeklyRoutineUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wruo.RemoveProgramIDs(ids...)
}

// ClearDailyRoutines clears all "daily_routines" edges to the DailyRoutine entity.
func (wruo *WeeklyRoutineUpdateOne) ClearDailyRoutines() *WeeklyRoutineUpdateOne {
	wruo.mutation.ClearDailyRoutines()
	return wruo
}

// RemoveDailyRoutineIDs removes the "daily_routines" edge to DailyRoutine entities by IDs.
func (wruo *WeeklyRoutineUpdateOne) RemoveDailyRoutineIDs(ids ...uint64) *WeeklyRoutineUpdateOne {
	wruo.mutation.RemoveDailyRoutineIDs(ids...)
	return wruo
}

// RemoveDailyRoutines removes "daily_routines" edges to DailyRoutine entities.
func (wruo *WeeklyRoutineUpdateOne) RemoveDailyRoutines(d ...*DailyRoutine) *WeeklyRoutineUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wruo.RemoveDailyRoutineIDs(ids...)
}

// Where appends a list predicates to the WeeklyRoutineUpdate builder.
func (wruo *WeeklyRoutineUpdateOne) Where(ps ...predicate.WeeklyRoutine) *WeeklyRoutineUpdateOne {
	wruo.mutation.Where(ps...)
	return wruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wruo *WeeklyRoutineUpdateOne) Select(field string, fields ...string) *WeeklyRoutineUpdateOne {
	wruo.fields = append([]string{field}, fields...)
	return wruo
}

// Save executes the query and returns the updated WeeklyRoutine entity.
func (wruo *WeeklyRoutineUpdateOne) Save(ctx context.Context) (*WeeklyRoutine, error) {
	return withHooks(ctx, wruo.sqlSave, wruo.mutation, wruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wruo *WeeklyRoutineUpdateOne) SaveX(ctx context.Context) *WeeklyRoutine {
	node, err := wruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wruo *WeeklyRoutineUpdateOne) Exec(ctx context.Context) error {
	_, err := wruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wruo *WeeklyRoutineUpdateOne) ExecX(ctx context.Context) {
	if err := wruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wruo *WeeklyRoutineUpdateOne) check() error {
	if v, ok := wruo.mutation.Week(); ok {
		if err := weeklyroutine.WeekValidator(v); err != nil {
			return &ValidationError{Name: "week", err: fmt.Errorf(`ent: validator failed for field "WeeklyRoutine.week": %w`, err)}
		}
	}
	return nil
}

func (wruo *WeeklyRoutineUpdateOne) sqlSave(ctx context.Context) (_node *WeeklyRoutine, err error) {
	if err := wruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(weeklyroutine.Table, weeklyroutine.Columns, sqlgraph.NewFieldSpec(weeklyroutine.FieldID, field.TypeUint64))
	id, ok := wruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WeeklyRoutine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weeklyroutine.FieldID)
		for _, f := range fields {
			if !weeklyroutine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weeklyroutine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wruo.mutation.ProgramID(); ok {
		_spec.SetField(weeklyroutine.FieldProgramID, field.TypeUint64, value)
	}
	if value, ok := wruo.mutation.AddedProgramID(); ok {
		_spec.AddField(weeklyroutine.FieldProgramID, field.TypeUint64, value)
	}
	if value, ok := wruo.mutation.Week(); ok {
		_spec.SetField(weeklyroutine.FieldWeek, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedWeek(); ok {
		_spec.AddField(weeklyroutine.FieldWeek, field.TypeInt, value)
	}
	if wruo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weeklyroutine.ProgramTable,
			Columns: weeklyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.RemovedProgramIDs(); len(nodes) > 0 && !wruo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weeklyroutine.ProgramTable,
			Columns: weeklyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weeklyroutine.ProgramTable,
			Columns: weeklyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wruo.mutation.DailyRoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weeklyroutine.DailyRoutinesTable,
			Columns: weeklyroutine.DailyRoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.RemovedDailyRoutinesIDs(); len(nodes) > 0 && !wruo.mutation.DailyRoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weeklyroutine.DailyRoutinesTable,
			Columns: weeklyroutine.DailyRoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.DailyRoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weeklyroutine.DailyRoutinesTable,
			Columns: weeklyroutine.DailyRoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WeeklyRoutine{config: wruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weeklyroutine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wruo.mutation.done = true
	return _node, nil
}

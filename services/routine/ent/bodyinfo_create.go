// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/bodyinfo"
	"routine/ent/programrec"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BodyInfoCreate is the builder for creating a BodyInfo entity.
type BodyInfoCreate struct {
	config
	mutation *BodyInfoMutation
	hooks    []Hook
}

// SetAuthor sets the "author" field.
func (bic *BodyInfoCreate) SetAuthor(u uint64) *BodyInfoCreate {
	bic.mutation.SetAuthor(u)
	return bic
}

// SetProgramRecID sets the "program_rec_id" field.
func (bic *BodyInfoCreate) SetProgramRecID(u uint64) *BodyInfoCreate {
	bic.mutation.SetProgramRecID(u)
	return bic
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (bic *BodyInfoCreate) SetNillableProgramRecID(u *uint64) *BodyInfoCreate {
	if u != nil {
		bic.SetProgramRecID(*u)
	}
	return bic
}

// SetDate sets the "date" field.
func (bic *BodyInfoCreate) SetDate(t time.Time) *BodyInfoCreate {
	bic.mutation.SetDate(t)
	return bic
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (bic *BodyInfoCreate) SetNillableDate(t *time.Time) *BodyInfoCreate {
	if t != nil {
		bic.SetDate(*t)
	}
	return bic
}

// SetHeight sets the "height" field.
func (bic *BodyInfoCreate) SetHeight(f float64) *BodyInfoCreate {
	bic.mutation.SetHeight(f)
	return bic
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (bic *BodyInfoCreate) SetNillableHeight(f *float64) *BodyInfoCreate {
	if f != nil {
		bic.SetHeight(*f)
	}
	return bic
}

// SetBodyWeight sets the "body_weight" field.
func (bic *BodyInfoCreate) SetBodyWeight(f float64) *BodyInfoCreate {
	bic.mutation.SetBodyWeight(f)
	return bic
}

// SetNillableBodyWeight sets the "body_weight" field if the given value is not nil.
func (bic *BodyInfoCreate) SetNillableBodyWeight(f *float64) *BodyInfoCreate {
	if f != nil {
		bic.SetBodyWeight(*f)
	}
	return bic
}

// SetBodyFatMass sets the "body_fat_mass" field.
func (bic *BodyInfoCreate) SetBodyFatMass(f float64) *BodyInfoCreate {
	bic.mutation.SetBodyFatMass(f)
	return bic
}

// SetNillableBodyFatMass sets the "body_fat_mass" field if the given value is not nil.
func (bic *BodyInfoCreate) SetNillableBodyFatMass(f *float64) *BodyInfoCreate {
	if f != nil {
		bic.SetBodyFatMass(*f)
	}
	return bic
}

// SetSkeletalMuscleMass sets the "skeletal_muscle_mass" field.
func (bic *BodyInfoCreate) SetSkeletalMuscleMass(f float64) *BodyInfoCreate {
	bic.mutation.SetSkeletalMuscleMass(f)
	return bic
}

// SetNillableSkeletalMuscleMass sets the "skeletal_muscle_mass" field if the given value is not nil.
func (bic *BodyInfoCreate) SetNillableSkeletalMuscleMass(f *float64) *BodyInfoCreate {
	if f != nil {
		bic.SetSkeletalMuscleMass(*f)
	}
	return bic
}

// SetID sets the "id" field.
func (bic *BodyInfoCreate) SetID(u uint64) *BodyInfoCreate {
	bic.mutation.SetID(u)
	return bic
}

// SetProgramRec sets the "program_rec" edge to the ProgramRec entity.
func (bic *BodyInfoCreate) SetProgramRec(p *ProgramRec) *BodyInfoCreate {
	return bic.SetProgramRecID(p.ID)
}

// Mutation returns the BodyInfoMutation object of the builder.
func (bic *BodyInfoCreate) Mutation() *BodyInfoMutation {
	return bic.mutation
}

// Save creates the BodyInfo in the database.
func (bic *BodyInfoCreate) Save(ctx context.Context) (*BodyInfo, error) {
	bic.defaults()
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BodyInfoCreate) SaveX(ctx context.Context) *BodyInfo {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BodyInfoCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BodyInfoCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bic *BodyInfoCreate) defaults() {
	if _, ok := bic.mutation.Date(); !ok {
		v := bodyinfo.DefaultDate()
		bic.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BodyInfoCreate) check() error {
	if _, ok := bic.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "BodyInfo.author"`)}
	}
	if _, ok := bic.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "BodyInfo.date"`)}
	}
	return nil
}

func (bic *BodyInfoCreate) sqlSave(ctx context.Context) (*BodyInfo, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BodyInfoCreate) createSpec() (*BodyInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &BodyInfo{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(bodyinfo.Table, sqlgraph.NewFieldSpec(bodyinfo.FieldID, field.TypeUint64))
	)
	if id, ok := bic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bic.mutation.Author(); ok {
		_spec.SetField(bodyinfo.FieldAuthor, field.TypeUint64, value)
		_node.Author = value
	}
	if value, ok := bic.mutation.Date(); ok {
		_spec.SetField(bodyinfo.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := bic.mutation.Height(); ok {
		_spec.SetField(bodyinfo.FieldHeight, field.TypeFloat64, value)
		_node.Height = &value
	}
	if value, ok := bic.mutation.BodyWeight(); ok {
		_spec.SetField(bodyinfo.FieldBodyWeight, field.TypeFloat64, value)
		_node.BodyWeight = &value
	}
	if value, ok := bic.mutation.BodyFatMass(); ok {
		_spec.SetField(bodyinfo.FieldBodyFatMass, field.TypeFloat64, value)
		_node.BodyFatMass = &value
	}
	if value, ok := bic.mutation.SkeletalMuscleMass(); ok {
		_spec.SetField(bodyinfo.FieldSkeletalMuscleMass, field.TypeFloat64, value)
		_node.SkeletalMuscleMass = &value
	}
	if nodes := bic.mutation.ProgramRecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyinfo.ProgramRecTable,
			Columns: []string{bodyinfo.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProgramRecID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BodyInfoCreateBulk is the builder for creating many BodyInfo entities in bulk.
type BodyInfoCreateBulk struct {
	config
	builders []*BodyInfoCreate
}

// Save creates the BodyInfo entities in the database.
func (bicb *BodyInfoCreateBulk) Save(ctx context.Context) ([]*BodyInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BodyInfo, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BodyInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BodyInfoCreateBulk) SaveX(ctx context.Context) []*BodyInfo {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BodyInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BodyInfoCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/program"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Program is the model entity for the Program schema.
type Program struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type program.Type `json:"type,omitempty"`
	// Author holds the value of the "author" field.
	Author uint64 `json:"author,omitempty"`
	// Image holds the value of the "image" field.
	Image *string `json:"image,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramQuery when eager-loading is set.
	Edges        ProgramEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProgramEdges holds the relations/edges for other nodes in the graph.
type ProgramEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// WeeklyRoutines holds the value of the weekly_routines edge.
	WeeklyRoutines []*WeeklyRoutine `json:"weekly_routines,omitempty"`
	// DailyRoutines holds the value of the daily_routines edge.
	DailyRoutines []*DailyRoutine `json:"daily_routines,omitempty"`
	// ProgramRecs holds the value of the program_recs edge.
	ProgramRecs []*ProgramRec `json:"program_recs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// WeeklyRoutinesOrErr returns the WeeklyRoutines value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) WeeklyRoutinesOrErr() ([]*WeeklyRoutine, error) {
	if e.loadedTypes[1] {
		return e.WeeklyRoutines, nil
	}
	return nil, &NotLoadedError{edge: "weekly_routines"}
}

// DailyRoutinesOrErr returns the DailyRoutines value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) DailyRoutinesOrErr() ([]*DailyRoutine, error) {
	if e.loadedTypes[2] {
		return e.DailyRoutines, nil
	}
	return nil, &NotLoadedError{edge: "daily_routines"}
}

// ProgramRecsOrErr returns the ProgramRecs value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) ProgramRecsOrErr() ([]*ProgramRec, error) {
	if e.loadedTypes[3] {
		return e.ProgramRecs, nil
	}
	return nil, &NotLoadedError{edge: "program_recs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Program) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case program.FieldID, program.FieldAuthor:
			values[i] = new(sql.NullInt64)
		case program.FieldTitle, program.FieldType, program.FieldImage, program.FieldDescription:
			values[i] = new(sql.NullString)
		case program.FieldCreatedAt, program.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Program fields.
func (pr *Program) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case program.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint64(value.Int64)
		case program.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case program.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = program.Type(value.String)
			}
		case program.FieldAuthor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				pr.Author = uint64(value.Int64)
			}
		case program.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pr.Image = new(string)
				*pr.Image = value.String
			}
		case program.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = new(string)
				*pr.Description = value.String
			}
		case program.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case program.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Program.
// This includes values selected through modifiers, order, etc.
func (pr *Program) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Program entity.
func (pr *Program) QueryTags() *TagQuery {
	return NewProgramClient(pr.config).QueryTags(pr)
}

// QueryWeeklyRoutines queries the "weekly_routines" edge of the Program entity.
func (pr *Program) QueryWeeklyRoutines() *WeeklyRoutineQuery {
	return NewProgramClient(pr.config).QueryWeeklyRoutines(pr)
}

// QueryDailyRoutines queries the "daily_routines" edge of the Program entity.
func (pr *Program) QueryDailyRoutines() *DailyRoutineQuery {
	return NewProgramClient(pr.config).QueryDailyRoutines(pr)
}

// QueryProgramRecs queries the "program_recs" edge of the Program entity.
func (pr *Program) QueryProgramRecs() *ProgramRecQuery {
	return NewProgramClient(pr.config).QueryProgramRecs(pr)
}

// Update returns a builder for updating this Program.
// Note that you need to call Program.Unwrap() before calling this method if this Program
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Program) Update() *ProgramUpdateOne {
	return NewProgramClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Program entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Program) Unwrap() *Program {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Program is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Program) String() string {
	var builder strings.Builder
	builder.WriteString("Program(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", pr.Author))
	builder.WriteString(", ")
	if v := pr.Image; v != nil {
		builder.WriteString("image=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Programs is a parsable slice of Program.
type Programs []*Program

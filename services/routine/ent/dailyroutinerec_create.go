// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/dailyroutinerec"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DailyRoutineRecCreate is the builder for creating a DailyRoutineRec entity.
type DailyRoutineRecCreate struct {
	config
	mutation *DailyRoutineRecMutation
	hooks    []Hook
}

// SetProgramRecID sets the "program_rec_id" field.
func (drrc *DailyRoutineRecCreate) SetProgramRecID(u uint64) *DailyRoutineRecCreate {
	drrc.mutation.SetProgramRecID(u)
	return drrc
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (drrc *DailyRoutineRecCreate) SetNillableProgramRecID(u *uint64) *DailyRoutineRecCreate {
	if u != nil {
		drrc.SetProgramRecID(*u)
	}
	return drrc
}

// SetWeeklyRoutineRecID sets the "weekly_routine_rec_id" field.
func (drrc *DailyRoutineRecCreate) SetWeeklyRoutineRecID(u uint64) *DailyRoutineRecCreate {
	drrc.mutation.SetWeeklyRoutineRecID(u)
	return drrc
}

// SetNillableWeeklyRoutineRecID sets the "weekly_routine_rec_id" field if the given value is not nil.
func (drrc *DailyRoutineRecCreate) SetNillableWeeklyRoutineRecID(u *uint64) *DailyRoutineRecCreate {
	if u != nil {
		drrc.SetWeeklyRoutineRecID(*u)
	}
	return drrc
}

// SetDailyRoutineID sets the "daily_routine_id" field.
func (drrc *DailyRoutineRecCreate) SetDailyRoutineID(u uint64) *DailyRoutineRecCreate {
	drrc.mutation.SetDailyRoutineID(u)
	return drrc
}

// SetNillableDailyRoutineID sets the "daily_routine_id" field if the given value is not nil.
func (drrc *DailyRoutineRecCreate) SetNillableDailyRoutineID(u *uint64) *DailyRoutineRecCreate {
	if u != nil {
		drrc.SetDailyRoutineID(*u)
	}
	return drrc
}

// SetDate sets the "date" field.
func (drrc *DailyRoutineRecCreate) SetDate(t time.Time) *DailyRoutineRecCreate {
	drrc.mutation.SetDate(t)
	return drrc
}

// SetStatus sets the "status" field.
func (drrc *DailyRoutineRecCreate) SetStatus(d dailyroutinerec.Status) *DailyRoutineRecCreate {
	drrc.mutation.SetStatus(d)
	return drrc
}

// SetComment sets the "comment" field.
func (drrc *DailyRoutineRecCreate) SetComment(s string) *DailyRoutineRecCreate {
	drrc.mutation.SetComment(s)
	return drrc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (drrc *DailyRoutineRecCreate) SetNillableComment(s *string) *DailyRoutineRecCreate {
	if s != nil {
		drrc.SetComment(*s)
	}
	return drrc
}

// SetCreatedAt sets the "created_at" field.
func (drrc *DailyRoutineRecCreate) SetCreatedAt(t time.Time) *DailyRoutineRecCreate {
	drrc.mutation.SetCreatedAt(t)
	return drrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (drrc *DailyRoutineRecCreate) SetNillableCreatedAt(t *time.Time) *DailyRoutineRecCreate {
	if t != nil {
		drrc.SetCreatedAt(*t)
	}
	return drrc
}

// SetUpdatedAt sets the "updated_at" field.
func (drrc *DailyRoutineRecCreate) SetUpdatedAt(t time.Time) *DailyRoutineRecCreate {
	drrc.mutation.SetUpdatedAt(t)
	return drrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (drrc *DailyRoutineRecCreate) SetNillableUpdatedAt(t *time.Time) *DailyRoutineRecCreate {
	if t != nil {
		drrc.SetUpdatedAt(*t)
	}
	return drrc
}

// SetID sets the "id" field.
func (drrc *DailyRoutineRecCreate) SetID(u uint64) *DailyRoutineRecCreate {
	drrc.mutation.SetID(u)
	return drrc
}

// Mutation returns the DailyRoutineRecMutation object of the builder.
func (drrc *DailyRoutineRecCreate) Mutation() *DailyRoutineRecMutation {
	return drrc.mutation
}

// Save creates the DailyRoutineRec in the database.
func (drrc *DailyRoutineRecCreate) Save(ctx context.Context) (*DailyRoutineRec, error) {
	drrc.defaults()
	return withHooks(ctx, drrc.sqlSave, drrc.mutation, drrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drrc *DailyRoutineRecCreate) SaveX(ctx context.Context) *DailyRoutineRec {
	v, err := drrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drrc *DailyRoutineRecCreate) Exec(ctx context.Context) error {
	_, err := drrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drrc *DailyRoutineRecCreate) ExecX(ctx context.Context) {
	if err := drrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drrc *DailyRoutineRecCreate) defaults() {
	if _, ok := drrc.mutation.CreatedAt(); !ok {
		v := dailyroutinerec.DefaultCreatedAt()
		drrc.mutation.SetCreatedAt(v)
	}
	if _, ok := drrc.mutation.UpdatedAt(); !ok {
		v := dailyroutinerec.DefaultUpdatedAt()
		drrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drrc *DailyRoutineRecCreate) check() error {
	if _, ok := drrc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "DailyRoutineRec.date"`)}
	}
	if _, ok := drrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DailyRoutineRec.status"`)}
	}
	if v, ok := drrc.mutation.Status(); ok {
		if err := dailyroutinerec.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DailyRoutineRec.status": %w`, err)}
		}
	}
	if _, ok := drrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DailyRoutineRec.created_at"`)}
	}
	if _, ok := drrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DailyRoutineRec.updated_at"`)}
	}
	return nil
}

func (drrc *DailyRoutineRecCreate) sqlSave(ctx context.Context) (*DailyRoutineRec, error) {
	if err := drrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	drrc.mutation.id = &_node.ID
	drrc.mutation.done = true
	return _node, nil
}

func (drrc *DailyRoutineRecCreate) createSpec() (*DailyRoutineRec, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyRoutineRec{config: drrc.config}
		_spec = sqlgraph.NewCreateSpec(dailyroutinerec.Table, sqlgraph.NewFieldSpec(dailyroutinerec.FieldID, field.TypeUint64))
	)
	if id, ok := drrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drrc.mutation.ProgramRecID(); ok {
		_spec.SetField(dailyroutinerec.FieldProgramRecID, field.TypeUint64, value)
		_node.ProgramRecID = &value
	}
	if value, ok := drrc.mutation.WeeklyRoutineRecID(); ok {
		_spec.SetField(dailyroutinerec.FieldWeeklyRoutineRecID, field.TypeUint64, value)
		_node.WeeklyRoutineRecID = &value
	}
	if value, ok := drrc.mutation.DailyRoutineID(); ok {
		_spec.SetField(dailyroutinerec.FieldDailyRoutineID, field.TypeUint64, value)
		_node.DailyRoutineID = &value
	}
	if value, ok := drrc.mutation.Date(); ok {
		_spec.SetField(dailyroutinerec.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := drrc.mutation.Status(); ok {
		_spec.SetField(dailyroutinerec.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := drrc.mutation.Comment(); ok {
		_spec.SetField(dailyroutinerec.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := drrc.mutation.CreatedAt(); ok {
		_spec.SetField(dailyroutinerec.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := drrc.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyroutinerec.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DailyRoutineRecCreateBulk is the builder for creating many DailyRoutineRec entities in bulk.
type DailyRoutineRecCreateBulk struct {
	config
	builders []*DailyRoutineRecCreate
}

// Save creates the DailyRoutineRec entities in the database.
func (drrcb *DailyRoutineRecCreateBulk) Save(ctx context.Context) ([]*DailyRoutineRec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drrcb.builders))
	nodes := make([]*DailyRoutineRec, len(drrcb.builders))
	mutators := make([]Mutator, len(drrcb.builders))
	for i := range drrcb.builders {
		func(i int, root context.Context) {
			builder := drrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyRoutineRecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drrcb *DailyRoutineRecCreateBulk) SaveX(ctx context.Context) []*DailyRoutineRec {
	v, err := drrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drrcb *DailyRoutineRecCreateBulk) Exec(ctx context.Context) error {
	_, err := drrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drrcb *DailyRoutineRecCreateBulk) ExecX(ctx context.Context) {
	if err := drrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

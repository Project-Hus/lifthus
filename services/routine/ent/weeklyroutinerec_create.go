// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/dailyroutinerec"
	"routine/ent/programrec"
	"routine/ent/weeklyroutine"
	"routine/ent/weeklyroutinerec"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WeeklyRoutineRecCreate is the builder for creating a WeeklyRoutineRec entity.
type WeeklyRoutineRecCreate struct {
	config
	mutation *WeeklyRoutineRecMutation
	hooks    []Hook
}

// SetProgramRecID sets the "program_rec_id" field.
func (wrrc *WeeklyRoutineRecCreate) SetProgramRecID(u uint64) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetProgramRecID(u)
	return wrrc
}

// SetWeeklyRoutineID sets the "weekly_routine_id" field.
func (wrrc *WeeklyRoutineRecCreate) SetWeeklyRoutineID(u uint64) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetWeeklyRoutineID(u)
	return wrrc
}

// SetStartDate sets the "start_date" field.
func (wrrc *WeeklyRoutineRecCreate) SetStartDate(t time.Time) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetStartDate(t)
	return wrrc
}

// SetCreatedAt sets the "created_at" field.
func (wrrc *WeeklyRoutineRecCreate) SetCreatedAt(t time.Time) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetCreatedAt(t)
	return wrrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wrrc *WeeklyRoutineRecCreate) SetNillableCreatedAt(t *time.Time) *WeeklyRoutineRecCreate {
	if t != nil {
		wrrc.SetCreatedAt(*t)
	}
	return wrrc
}

// SetUpdatedAt sets the "updated_at" field.
func (wrrc *WeeklyRoutineRecCreate) SetUpdatedAt(t time.Time) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetUpdatedAt(t)
	return wrrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wrrc *WeeklyRoutineRecCreate) SetNillableUpdatedAt(t *time.Time) *WeeklyRoutineRecCreate {
	if t != nil {
		wrrc.SetUpdatedAt(*t)
	}
	return wrrc
}

// SetID sets the "id" field.
func (wrrc *WeeklyRoutineRecCreate) SetID(u uint64) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetID(u)
	return wrrc
}

// SetWeeklyRoutineID sets the "weekly_routine" edge to the WeeklyRoutine entity by ID.
func (wrrc *WeeklyRoutineRecCreate) SetWeeklyRoutineID(id uint64) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetWeeklyRoutineID(id)
	return wrrc
}

// SetNillableWeeklyRoutineID sets the "weekly_routine" edge to the WeeklyRoutine entity by ID if the given value is not nil.
func (wrrc *WeeklyRoutineRecCreate) SetNillableWeeklyRoutineID(id *uint64) *WeeklyRoutineRecCreate {
	if id != nil {
		wrrc = wrrc.SetWeeklyRoutineID(*id)
	}
	return wrrc
}

// SetWeeklyRoutine sets the "weekly_routine" edge to the WeeklyRoutine entity.
func (wrrc *WeeklyRoutineRecCreate) SetWeeklyRoutine(w *WeeklyRoutine) *WeeklyRoutineRecCreate {
	return wrrc.SetWeeklyRoutineID(w.ID)
}

// SetProgramRecID sets the "program_rec" edge to the ProgramRec entity by ID.
func (wrrc *WeeklyRoutineRecCreate) SetProgramRecID(id uint64) *WeeklyRoutineRecCreate {
	wrrc.mutation.SetProgramRecID(id)
	return wrrc
}

// SetNillableProgramRecID sets the "program_rec" edge to the ProgramRec entity by ID if the given value is not nil.
func (wrrc *WeeklyRoutineRecCreate) SetNillableProgramRecID(id *uint64) *WeeklyRoutineRecCreate {
	if id != nil {
		wrrc = wrrc.SetProgramRecID(*id)
	}
	return wrrc
}

// SetProgramRec sets the "program_rec" edge to the ProgramRec entity.
func (wrrc *WeeklyRoutineRecCreate) SetProgramRec(p *ProgramRec) *WeeklyRoutineRecCreate {
	return wrrc.SetProgramRecID(p.ID)
}

// AddDailyRoutineRecIDs adds the "daily_routine_recs" edge to the DailyRoutineRec entity by IDs.
func (wrrc *WeeklyRoutineRecCreate) AddDailyRoutineRecIDs(ids ...uint64) *WeeklyRoutineRecCreate {
	wrrc.mutation.AddDailyRoutineRecIDs(ids...)
	return wrrc
}

// AddDailyRoutineRecs adds the "daily_routine_recs" edges to the DailyRoutineRec entity.
func (wrrc *WeeklyRoutineRecCreate) AddDailyRoutineRecs(d ...*DailyRoutineRec) *WeeklyRoutineRecCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wrrc.AddDailyRoutineRecIDs(ids...)
}

// Mutation returns the WeeklyRoutineRecMutation object of the builder.
func (wrrc *WeeklyRoutineRecCreate) Mutation() *WeeklyRoutineRecMutation {
	return wrrc.mutation
}

// Save creates the WeeklyRoutineRec in the database.
func (wrrc *WeeklyRoutineRecCreate) Save(ctx context.Context) (*WeeklyRoutineRec, error) {
	wrrc.defaults()
	return withHooks(ctx, wrrc.sqlSave, wrrc.mutation, wrrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wrrc *WeeklyRoutineRecCreate) SaveX(ctx context.Context) *WeeklyRoutineRec {
	v, err := wrrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrrc *WeeklyRoutineRecCreate) Exec(ctx context.Context) error {
	_, err := wrrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrrc *WeeklyRoutineRecCreate) ExecX(ctx context.Context) {
	if err := wrrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wrrc *WeeklyRoutineRecCreate) defaults() {
	if _, ok := wrrc.mutation.CreatedAt(); !ok {
		v := weeklyroutinerec.DefaultCreatedAt()
		wrrc.mutation.SetCreatedAt(v)
	}
	if _, ok := wrrc.mutation.UpdatedAt(); !ok {
		v := weeklyroutinerec.DefaultUpdatedAt()
		wrrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wrrc *WeeklyRoutineRecCreate) check() error {
	if _, ok := wrrc.mutation.ProgramRecID(); !ok {
		return &ValidationError{Name: "program_rec_id", err: errors.New(`ent: missing required field "WeeklyRoutineRec.program_rec_id"`)}
	}
	if _, ok := wrrc.mutation.WeeklyRoutineID(); !ok {
		return &ValidationError{Name: "weekly_routine_id", err: errors.New(`ent: missing required field "WeeklyRoutineRec.weekly_routine_id"`)}
	}
	if _, ok := wrrc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "WeeklyRoutineRec.start_date"`)}
	}
	if _, ok := wrrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WeeklyRoutineRec.created_at"`)}
	}
	if _, ok := wrrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WeeklyRoutineRec.updated_at"`)}
	}
	return nil
}

func (wrrc *WeeklyRoutineRecCreate) sqlSave(ctx context.Context) (*WeeklyRoutineRec, error) {
	if err := wrrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wrrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wrrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	wrrc.mutation.id = &_node.ID
	wrrc.mutation.done = true
	return _node, nil
}

func (wrrc *WeeklyRoutineRecCreate) createSpec() (*WeeklyRoutineRec, *sqlgraph.CreateSpec) {
	var (
		_node = &WeeklyRoutineRec{config: wrrc.config}
		_spec = sqlgraph.NewCreateSpec(weeklyroutinerec.Table, sqlgraph.NewFieldSpec(weeklyroutinerec.FieldID, field.TypeUint64))
	)
	if id, ok := wrrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wrrc.mutation.ProgramRecID(); ok {
		_spec.SetField(weeklyroutinerec.FieldProgramRecID, field.TypeUint64, value)
		_node.ProgramRecID = value
	}
	if value, ok := wrrc.mutation.WeeklyRoutineID(); ok {
		_spec.SetField(weeklyroutinerec.FieldWeeklyRoutineID, field.TypeUint64, value)
		_node.WeeklyRoutineID = value
	}
	if value, ok := wrrc.mutation.StartDate(); ok {
		_spec.SetField(weeklyroutinerec.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := wrrc.mutation.CreatedAt(); ok {
		_spec.SetField(weeklyroutinerec.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wrrc.mutation.UpdatedAt(); ok {
		_spec.SetField(weeklyroutinerec.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wrrc.mutation.WeeklyRoutineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklyroutinerec.WeeklyRoutineTable,
			Columns: []string{weeklyroutinerec.WeeklyRoutineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weeklyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.weekly_routine_weekly_routine_recs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrrc.mutation.ProgramRecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklyroutinerec.ProgramRecTable,
			Columns: []string{weeklyroutinerec.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_rec_weekly_routine_recs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrrc.mutation.DailyRoutineRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklyroutinerec.DailyRoutineRecsTable,
			Columns: []string{weeklyroutinerec.DailyRoutineRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutinerec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WeeklyRoutineRecCreateBulk is the builder for creating many WeeklyRoutineRec entities in bulk.
type WeeklyRoutineRecCreateBulk struct {
	config
	builders []*WeeklyRoutineRecCreate
}

// Save creates the WeeklyRoutineRec entities in the database.
func (wrrcb *WeeklyRoutineRecCreateBulk) Save(ctx context.Context) ([]*WeeklyRoutineRec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wrrcb.builders))
	nodes := make([]*WeeklyRoutineRec, len(wrrcb.builders))
	mutators := make([]Mutator, len(wrrcb.builders))
	for i := range wrrcb.builders {
		func(i int, root context.Context) {
			builder := wrrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeeklyRoutineRecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wrrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wrrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wrrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wrrcb *WeeklyRoutineRecCreateBulk) SaveX(ctx context.Context) []*WeeklyRoutineRec {
	v, err := wrrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrrcb *WeeklyRoutineRecCreateBulk) Exec(ctx context.Context) error {
	_, err := wrrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrrcb *WeeklyRoutineRecCreateBulk) ExecX(ctx context.Context) {
	if err := wrrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"routine/ent/act"
	"routine/ent/onerepmax"
	"routine/ent/predicate"
	"routine/ent/programrec"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OneRepMaxQuery is the builder for querying OneRepMax entities.
type OneRepMaxQuery struct {
	config
	ctx            *QueryContext
	order          []onerepmax.OrderOption
	inters         []Interceptor
	predicates     []predicate.OneRepMax
	withAct        *ActQuery
	withProgramRec *ProgramRecQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OneRepMaxQuery builder.
func (ormq *OneRepMaxQuery) Where(ps ...predicate.OneRepMax) *OneRepMaxQuery {
	ormq.predicates = append(ormq.predicates, ps...)
	return ormq
}

// Limit the number of records to be returned by this query.
func (ormq *OneRepMaxQuery) Limit(limit int) *OneRepMaxQuery {
	ormq.ctx.Limit = &limit
	return ormq
}

// Offset to start from.
func (ormq *OneRepMaxQuery) Offset(offset int) *OneRepMaxQuery {
	ormq.ctx.Offset = &offset
	return ormq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ormq *OneRepMaxQuery) Unique(unique bool) *OneRepMaxQuery {
	ormq.ctx.Unique = &unique
	return ormq
}

// Order specifies how the records should be ordered.
func (ormq *OneRepMaxQuery) Order(o ...onerepmax.OrderOption) *OneRepMaxQuery {
	ormq.order = append(ormq.order, o...)
	return ormq
}

// QueryAct chains the current query on the "act" edge.
func (ormq *OneRepMaxQuery) QueryAct() *ActQuery {
	query := (&ActClient{config: ormq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ormq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ormq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(onerepmax.Table, onerepmax.FieldID, selector),
			sqlgraph.To(act.Table, act.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, onerepmax.ActTable, onerepmax.ActColumn),
		)
		fromU = sqlgraph.SetNeighbors(ormq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramRec chains the current query on the "program_rec" edge.
func (ormq *OneRepMaxQuery) QueryProgramRec() *ProgramRecQuery {
	query := (&ProgramRecClient{config: ormq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ormq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ormq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(onerepmax.Table, onerepmax.FieldID, selector),
			sqlgraph.To(programrec.Table, programrec.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, onerepmax.ProgramRecTable, onerepmax.ProgramRecColumn),
		)
		fromU = sqlgraph.SetNeighbors(ormq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OneRepMax entity from the query.
// Returns a *NotFoundError when no OneRepMax was found.
func (ormq *OneRepMaxQuery) First(ctx context.Context) (*OneRepMax, error) {
	nodes, err := ormq.Limit(1).All(setContextOp(ctx, ormq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{onerepmax.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ormq *OneRepMaxQuery) FirstX(ctx context.Context) *OneRepMax {
	node, err := ormq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OneRepMax ID from the query.
// Returns a *NotFoundError when no OneRepMax ID was found.
func (ormq *OneRepMaxQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ormq.Limit(1).IDs(setContextOp(ctx, ormq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{onerepmax.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ormq *OneRepMaxQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ormq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OneRepMax entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OneRepMax entity is found.
// Returns a *NotFoundError when no OneRepMax entities are found.
func (ormq *OneRepMaxQuery) Only(ctx context.Context) (*OneRepMax, error) {
	nodes, err := ormq.Limit(2).All(setContextOp(ctx, ormq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{onerepmax.Label}
	default:
		return nil, &NotSingularError{onerepmax.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ormq *OneRepMaxQuery) OnlyX(ctx context.Context) *OneRepMax {
	node, err := ormq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OneRepMax ID in the query.
// Returns a *NotSingularError when more than one OneRepMax ID is found.
// Returns a *NotFoundError when no entities are found.
func (ormq *OneRepMaxQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ormq.Limit(2).IDs(setContextOp(ctx, ormq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{onerepmax.Label}
	default:
		err = &NotSingularError{onerepmax.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ormq *OneRepMaxQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ormq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OneRepMaxes.
func (ormq *OneRepMaxQuery) All(ctx context.Context) ([]*OneRepMax, error) {
	ctx = setContextOp(ctx, ormq.ctx, "All")
	if err := ormq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OneRepMax, *OneRepMaxQuery]()
	return withInterceptors[[]*OneRepMax](ctx, ormq, qr, ormq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ormq *OneRepMaxQuery) AllX(ctx context.Context) []*OneRepMax {
	nodes, err := ormq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OneRepMax IDs.
func (ormq *OneRepMaxQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if ormq.ctx.Unique == nil && ormq.path != nil {
		ormq.Unique(true)
	}
	ctx = setContextOp(ctx, ormq.ctx, "IDs")
	if err = ormq.Select(onerepmax.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ormq *OneRepMaxQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ormq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ormq *OneRepMaxQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ormq.ctx, "Count")
	if err := ormq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ormq, querierCount[*OneRepMaxQuery](), ormq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ormq *OneRepMaxQuery) CountX(ctx context.Context) int {
	count, err := ormq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ormq *OneRepMaxQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ormq.ctx, "Exist")
	switch _, err := ormq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ormq *OneRepMaxQuery) ExistX(ctx context.Context) bool {
	exist, err := ormq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OneRepMaxQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ormq *OneRepMaxQuery) Clone() *OneRepMaxQuery {
	if ormq == nil {
		return nil
	}
	return &OneRepMaxQuery{
		config:         ormq.config,
		ctx:            ormq.ctx.Clone(),
		order:          append([]onerepmax.OrderOption{}, ormq.order...),
		inters:         append([]Interceptor{}, ormq.inters...),
		predicates:     append([]predicate.OneRepMax{}, ormq.predicates...),
		withAct:        ormq.withAct.Clone(),
		withProgramRec: ormq.withProgramRec.Clone(),
		// clone intermediate query.
		sql:  ormq.sql.Clone(),
		path: ormq.path,
	}
}

// WithAct tells the query-builder to eager-load the nodes that are connected to
// the "act" edge. The optional arguments are used to configure the query builder of the edge.
func (ormq *OneRepMaxQuery) WithAct(opts ...func(*ActQuery)) *OneRepMaxQuery {
	query := (&ActClient{config: ormq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ormq.withAct = query
	return ormq
}

// WithProgramRec tells the query-builder to eager-load the nodes that are connected to
// the "program_rec" edge. The optional arguments are used to configure the query builder of the edge.
func (ormq *OneRepMaxQuery) WithProgramRec(opts ...func(*ProgramRecQuery)) *OneRepMaxQuery {
	query := (&ProgramRecClient{config: ormq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ormq.withProgramRec = query
	return ormq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Author uint64 `json:"author,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OneRepMax.Query().
//		GroupBy(onerepmax.FieldAuthor).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ormq *OneRepMaxQuery) GroupBy(field string, fields ...string) *OneRepMaxGroupBy {
	ormq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OneRepMaxGroupBy{build: ormq}
	grbuild.flds = &ormq.ctx.Fields
	grbuild.label = onerepmax.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Author uint64 `json:"author,omitempty"`
//	}
//
//	client.OneRepMax.Query().
//		Select(onerepmax.FieldAuthor).
//		Scan(ctx, &v)
func (ormq *OneRepMaxQuery) Select(fields ...string) *OneRepMaxSelect {
	ormq.ctx.Fields = append(ormq.ctx.Fields, fields...)
	sbuild := &OneRepMaxSelect{OneRepMaxQuery: ormq}
	sbuild.label = onerepmax.Label
	sbuild.flds, sbuild.scan = &ormq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OneRepMaxSelect configured with the given aggregations.
func (ormq *OneRepMaxQuery) Aggregate(fns ...AggregateFunc) *OneRepMaxSelect {
	return ormq.Select().Aggregate(fns...)
}

func (ormq *OneRepMaxQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ormq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ormq); err != nil {
				return err
			}
		}
	}
	for _, f := range ormq.ctx.Fields {
		if !onerepmax.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ormq.path != nil {
		prev, err := ormq.path(ctx)
		if err != nil {
			return err
		}
		ormq.sql = prev
	}
	return nil
}

func (ormq *OneRepMaxQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OneRepMax, error) {
	var (
		nodes       = []*OneRepMax{}
		_spec       = ormq.querySpec()
		loadedTypes = [2]bool{
			ormq.withAct != nil,
			ormq.withProgramRec != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OneRepMax).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OneRepMax{config: ormq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ormq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ormq.withAct; query != nil {
		if err := ormq.loadAct(ctx, query, nodes, nil,
			func(n *OneRepMax, e *Act) { n.Edges.Act = e }); err != nil {
			return nil, err
		}
	}
	if query := ormq.withProgramRec; query != nil {
		if err := ormq.loadProgramRec(ctx, query, nodes, nil,
			func(n *OneRepMax, e *ProgramRec) { n.Edges.ProgramRec = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ormq *OneRepMaxQuery) loadAct(ctx context.Context, query *ActQuery, nodes []*OneRepMax, init func(*OneRepMax), assign func(*OneRepMax, *Act)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*OneRepMax)
	for i := range nodes {
		fk := nodes[i].ActID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(act.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "act_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ormq *OneRepMaxQuery) loadProgramRec(ctx context.Context, query *ProgramRecQuery, nodes []*OneRepMax, init func(*OneRepMax), assign func(*OneRepMax, *ProgramRec)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*OneRepMax)
	for i := range nodes {
		if nodes[i].ProgramRecID == nil {
			continue
		}
		fk := *nodes[i].ProgramRecID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(programrec.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "program_rec_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ormq *OneRepMaxQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ormq.querySpec()
	_spec.Node.Columns = ormq.ctx.Fields
	if len(ormq.ctx.Fields) > 0 {
		_spec.Unique = ormq.ctx.Unique != nil && *ormq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ormq.driver, _spec)
}

func (ormq *OneRepMaxQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(onerepmax.Table, onerepmax.Columns, sqlgraph.NewFieldSpec(onerepmax.FieldID, field.TypeUint64))
	_spec.From = ormq.sql
	if unique := ormq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ormq.path != nil {
		_spec.Unique = true
	}
	if fields := ormq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, onerepmax.FieldID)
		for i := range fields {
			if fields[i] != onerepmax.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ormq.withAct != nil {
			_spec.Node.AddColumnOnce(onerepmax.FieldActID)
		}
		if ormq.withProgramRec != nil {
			_spec.Node.AddColumnOnce(onerepmax.FieldProgramRecID)
		}
	}
	if ps := ormq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ormq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ormq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ormq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ormq *OneRepMaxQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ormq.driver.Dialect())
	t1 := builder.Table(onerepmax.Table)
	columns := ormq.ctx.Fields
	if len(columns) == 0 {
		columns = onerepmax.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ormq.sql != nil {
		selector = ormq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ormq.ctx.Unique != nil && *ormq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ormq.predicates {
		p(selector)
	}
	for _, p := range ormq.order {
		p(selector)
	}
	if offset := ormq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ormq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OneRepMaxGroupBy is the group-by builder for OneRepMax entities.
type OneRepMaxGroupBy struct {
	selector
	build *OneRepMaxQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ormgb *OneRepMaxGroupBy) Aggregate(fns ...AggregateFunc) *OneRepMaxGroupBy {
	ormgb.fns = append(ormgb.fns, fns...)
	return ormgb
}

// Scan applies the selector query and scans the result into the given value.
func (ormgb *OneRepMaxGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ormgb.build.ctx, "GroupBy")
	if err := ormgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OneRepMaxQuery, *OneRepMaxGroupBy](ctx, ormgb.build, ormgb, ormgb.build.inters, v)
}

func (ormgb *OneRepMaxGroupBy) sqlScan(ctx context.Context, root *OneRepMaxQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ormgb.fns))
	for _, fn := range ormgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ormgb.flds)+len(ormgb.fns))
		for _, f := range *ormgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ormgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ormgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OneRepMaxSelect is the builder for selecting fields of OneRepMax entities.
type OneRepMaxSelect struct {
	*OneRepMaxQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (orms *OneRepMaxSelect) Aggregate(fns ...AggregateFunc) *OneRepMaxSelect {
	orms.fns = append(orms.fns, fns...)
	return orms
}

// Scan applies the selector query and scans the result into the given value.
func (orms *OneRepMaxSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, orms.ctx, "Select")
	if err := orms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OneRepMaxQuery, *OneRepMaxSelect](ctx, orms.OneRepMaxQuery, orms, orms.inters, v)
}

func (orms *OneRepMaxSelect) sqlScan(ctx context.Context, root *OneRepMaxQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(orms.fns))
	for _, fn := range orms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*orms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := orms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/act"
	"routine/ent/dailyroutinerec"
	"routine/ent/routineact"
	"routine/ent/routineactrec"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoutineActRec is the model entity for the RoutineActRec schema.
type RoutineActRec struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// DailyRoutineRecID holds the value of the "daily_routine_rec_id" field.
	DailyRoutineRecID uint64 `json:"daily_routine_rec_id,omitempty"`
	// RoutineActID holds the value of the "routine_act_id" field.
	RoutineActID *uint64 `json:"routine_act_id,omitempty"`
	// ActID holds the value of the "act_id" field.
	ActID *uint64 `json:"act_id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Reps holds the value of the "reps" field.
	Reps *int `json:"reps,omitempty"`
	// Lap holds the value of the "lap" field.
	Lap *int `json:"lap,omitempty"`
	// CurrentReps holds the value of the "current_reps" field.
	CurrentReps int `json:"current_reps,omitempty"`
	// CurrentLap holds the value of the "current_lap" field.
	CurrentLap int `json:"current_lap,omitempty"`
	// Image holds the value of the "image" field.
	Image *string `json:"image,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// Status holds the value of the "status" field.
	Status routineactrec.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoutineActRecQuery when eager-loading is set.
	Edges                              RoutineActRecEdges `json:"edges"`
	act_routine_act_recs               *uint64
	daily_routine_rec_routine_act_recs *uint64
	routine_act_routine_act_recs       *uint64
	selectValues                       sql.SelectValues
}

// RoutineActRecEdges holds the relations/edges for other nodes in the graph.
type RoutineActRecEdges struct {
	// DailyRoutineRec holds the value of the daily_routine_rec edge.
	DailyRoutineRec *DailyRoutineRec `json:"daily_routine_rec,omitempty"`
	// Act holds the value of the act edge.
	Act *Act `json:"act,omitempty"`
	// RoutineAct holds the value of the routine_act edge.
	RoutineAct *RoutineAct `json:"routine_act,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DailyRoutineRecOrErr returns the DailyRoutineRec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineActRecEdges) DailyRoutineRecOrErr() (*DailyRoutineRec, error) {
	if e.loadedTypes[0] {
		if e.DailyRoutineRec == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dailyroutinerec.Label}
		}
		return e.DailyRoutineRec, nil
	}
	return nil, &NotLoadedError{edge: "daily_routine_rec"}
}

// ActOrErr returns the Act value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineActRecEdges) ActOrErr() (*Act, error) {
	if e.loadedTypes[1] {
		if e.Act == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: act.Label}
		}
		return e.Act, nil
	}
	return nil, &NotLoadedError{edge: "act"}
}

// RoutineActOrErr returns the RoutineAct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineActRecEdges) RoutineActOrErr() (*RoutineAct, error) {
	if e.loadedTypes[2] {
		if e.RoutineAct == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: routineact.Label}
		}
		return e.RoutineAct, nil
	}
	return nil, &NotLoadedError{edge: "routine_act"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoutineActRec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case routineactrec.FieldID, routineactrec.FieldDailyRoutineRecID, routineactrec.FieldRoutineActID, routineactrec.FieldActID, routineactrec.FieldOrder, routineactrec.FieldReps, routineactrec.FieldLap, routineactrec.FieldCurrentReps, routineactrec.FieldCurrentLap:
			values[i] = new(sql.NullInt64)
		case routineactrec.FieldImage, routineactrec.FieldComment, routineactrec.FieldStatus:
			values[i] = new(sql.NullString)
		case routineactrec.FieldCreatedAt, routineactrec.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case routineactrec.ForeignKeys[0]: // act_routine_act_recs
			values[i] = new(sql.NullInt64)
		case routineactrec.ForeignKeys[1]: // daily_routine_rec_routine_act_recs
			values[i] = new(sql.NullInt64)
		case routineactrec.ForeignKeys[2]: // routine_act_routine_act_recs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoutineActRec fields.
func (rar *RoutineActRec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case routineactrec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rar.ID = uint64(value.Int64)
		case routineactrec.FieldDailyRoutineRecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_routine_rec_id", values[i])
			} else if value.Valid {
				rar.DailyRoutineRecID = uint64(value.Int64)
			}
		case routineactrec.FieldRoutineActID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field routine_act_id", values[i])
			} else if value.Valid {
				rar.RoutineActID = new(uint64)
				*rar.RoutineActID = uint64(value.Int64)
			}
		case routineactrec.FieldActID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field act_id", values[i])
			} else if value.Valid {
				rar.ActID = new(uint64)
				*rar.ActID = uint64(value.Int64)
			}
		case routineactrec.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				rar.Order = int(value.Int64)
			}
		case routineactrec.FieldReps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reps", values[i])
			} else if value.Valid {
				rar.Reps = new(int)
				*rar.Reps = int(value.Int64)
			}
		case routineactrec.FieldLap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lap", values[i])
			} else if value.Valid {
				rar.Lap = new(int)
				*rar.Lap = int(value.Int64)
			}
		case routineactrec.FieldCurrentReps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_reps", values[i])
			} else if value.Valid {
				rar.CurrentReps = int(value.Int64)
			}
		case routineactrec.FieldCurrentLap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_lap", values[i])
			} else if value.Valid {
				rar.CurrentLap = int(value.Int64)
			}
		case routineactrec.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				rar.Image = new(string)
				*rar.Image = value.String
			}
		case routineactrec.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				rar.Comment = new(string)
				*rar.Comment = value.String
			}
		case routineactrec.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rar.Status = routineactrec.Status(value.String)
			}
		case routineactrec.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rar.CreatedAt = value.Time
			}
		case routineactrec.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rar.UpdatedAt = value.Time
			}
		case routineactrec.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field act_routine_act_recs", value)
			} else if value.Valid {
				rar.act_routine_act_recs = new(uint64)
				*rar.act_routine_act_recs = uint64(value.Int64)
			}
		case routineactrec.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field daily_routine_rec_routine_act_recs", value)
			} else if value.Valid {
				rar.daily_routine_rec_routine_act_recs = new(uint64)
				*rar.daily_routine_rec_routine_act_recs = uint64(value.Int64)
			}
		case routineactrec.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field routine_act_routine_act_recs", value)
			} else if value.Valid {
				rar.routine_act_routine_act_recs = new(uint64)
				*rar.routine_act_routine_act_recs = uint64(value.Int64)
			}
		default:
			rar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoutineActRec.
// This includes values selected through modifiers, order, etc.
func (rar *RoutineActRec) Value(name string) (ent.Value, error) {
	return rar.selectValues.Get(name)
}

// QueryDailyRoutineRec queries the "daily_routine_rec" edge of the RoutineActRec entity.
func (rar *RoutineActRec) QueryDailyRoutineRec() *DailyRoutineRecQuery {
	return NewRoutineActRecClient(rar.config).QueryDailyRoutineRec(rar)
}

// QueryAct queries the "act" edge of the RoutineActRec entity.
func (rar *RoutineActRec) QueryAct() *ActQuery {
	return NewRoutineActRecClient(rar.config).QueryAct(rar)
}

// QueryRoutineAct queries the "routine_act" edge of the RoutineActRec entity.
func (rar *RoutineActRec) QueryRoutineAct() *RoutineActQuery {
	return NewRoutineActRecClient(rar.config).QueryRoutineAct(rar)
}

// Update returns a builder for updating this RoutineActRec.
// Note that you need to call RoutineActRec.Unwrap() before calling this method if this RoutineActRec
// was returned from a transaction, and the transaction was committed or rolled back.
func (rar *RoutineActRec) Update() *RoutineActRecUpdateOne {
	return NewRoutineActRecClient(rar.config).UpdateOne(rar)
}

// Unwrap unwraps the RoutineActRec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rar *RoutineActRec) Unwrap() *RoutineActRec {
	_tx, ok := rar.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoutineActRec is not a transactional entity")
	}
	rar.config.driver = _tx.drv
	return rar
}

// String implements the fmt.Stringer.
func (rar *RoutineActRec) String() string {
	var builder strings.Builder
	builder.WriteString("RoutineActRec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rar.ID))
	builder.WriteString("daily_routine_rec_id=")
	builder.WriteString(fmt.Sprintf("%v", rar.DailyRoutineRecID))
	builder.WriteString(", ")
	if v := rar.RoutineActID; v != nil {
		builder.WriteString("routine_act_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rar.ActID; v != nil {
		builder.WriteString("act_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", rar.Order))
	builder.WriteString(", ")
	if v := rar.Reps; v != nil {
		builder.WriteString("reps=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rar.Lap; v != nil {
		builder.WriteString("lap=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("current_reps=")
	builder.WriteString(fmt.Sprintf("%v", rar.CurrentReps))
	builder.WriteString(", ")
	builder.WriteString("current_lap=")
	builder.WriteString(fmt.Sprintf("%v", rar.CurrentLap))
	builder.WriteString(", ")
	if v := rar.Image; v != nil {
		builder.WriteString("image=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rar.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rar.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rar.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RoutineActRecs is a parsable slice of RoutineActRec.
type RoutineActRecs []*RoutineActRec

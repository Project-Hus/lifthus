// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/dailyroutine"
	"routine/ent/program"
	"routine/ent/routineact"
	"routine/ent/weeklyroutine"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DailyRoutineCreate is the builder for creating a DailyRoutine entity.
type DailyRoutineCreate struct {
	config
	mutation *DailyRoutineMutation
	hooks    []Hook
}

// SetProgramID sets the "program_id" field.
func (drc *DailyRoutineCreate) SetProgramID(u uint64) *DailyRoutineCreate {
	drc.mutation.SetProgramID(u)
	return drc
}

// SetNillableProgramID sets the "program_id" field if the given value is not nil.
func (drc *DailyRoutineCreate) SetNillableProgramID(u *uint64) *DailyRoutineCreate {
	if u != nil {
		drc.SetProgramID(*u)
	}
	return drc
}

// SetWeekID sets the "week_id" field.
func (drc *DailyRoutineCreate) SetWeekID(u uint64) *DailyRoutineCreate {
	drc.mutation.SetWeekID(u)
	return drc
}

// SetNillableWeekID sets the "week_id" field if the given value is not nil.
func (drc *DailyRoutineCreate) SetNillableWeekID(u *uint64) *DailyRoutineCreate {
	if u != nil {
		drc.SetWeekID(*u)
	}
	return drc
}

// SetDay sets the "day" field.
func (drc *DailyRoutineCreate) SetDay(i int) *DailyRoutineCreate {
	drc.mutation.SetDay(i)
	return drc
}

// SetCreatedAt sets the "created_at" field.
func (drc *DailyRoutineCreate) SetCreatedAt(t time.Time) *DailyRoutineCreate {
	drc.mutation.SetCreatedAt(t)
	return drc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (drc *DailyRoutineCreate) SetNillableCreatedAt(t *time.Time) *DailyRoutineCreate {
	if t != nil {
		drc.SetCreatedAt(*t)
	}
	return drc
}

// SetUpdatedAt sets the "updated_at" field.
func (drc *DailyRoutineCreate) SetUpdatedAt(t time.Time) *DailyRoutineCreate {
	drc.mutation.SetUpdatedAt(t)
	return drc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (drc *DailyRoutineCreate) SetNillableUpdatedAt(t *time.Time) *DailyRoutineCreate {
	if t != nil {
		drc.SetUpdatedAt(*t)
	}
	return drc
}

// SetID sets the "id" field.
func (drc *DailyRoutineCreate) SetID(u uint64) *DailyRoutineCreate {
	drc.mutation.SetID(u)
	return drc
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (drc *DailyRoutineCreate) AddProgramIDs(ids ...uint64) *DailyRoutineCreate {
	drc.mutation.AddProgramIDs(ids...)
	return drc
}

// AddProgram adds the "program" edges to the Program entity.
func (drc *DailyRoutineCreate) AddProgram(p ...*Program) *DailyRoutineCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return drc.AddProgramIDs(ids...)
}

// AddWeeklyRoutineIDs adds the "weekly_routine" edge to the WeeklyRoutine entity by IDs.
func (drc *DailyRoutineCreate) AddWeeklyRoutineIDs(ids ...uint64) *DailyRoutineCreate {
	drc.mutation.AddWeeklyRoutineIDs(ids...)
	return drc
}

// AddWeeklyRoutine adds the "weekly_routine" edges to the WeeklyRoutine entity.
func (drc *DailyRoutineCreate) AddWeeklyRoutine(w ...*WeeklyRoutine) *DailyRoutineCreate {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return drc.AddWeeklyRoutineIDs(ids...)
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by IDs.
func (drc *DailyRoutineCreate) AddRoutineActIDs(ids ...uint64) *DailyRoutineCreate {
	drc.mutation.AddRoutineActIDs(ids...)
	return drc
}

// AddRoutineActs adds the "routine_acts" edges to the RoutineAct entity.
func (drc *DailyRoutineCreate) AddRoutineActs(r ...*RoutineAct) *DailyRoutineCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return drc.AddRoutineActIDs(ids...)
}

// Mutation returns the DailyRoutineMutation object of the builder.
func (drc *DailyRoutineCreate) Mutation() *DailyRoutineMutation {
	return drc.mutation
}

// Save creates the DailyRoutine in the database.
func (drc *DailyRoutineCreate) Save(ctx context.Context) (*DailyRoutine, error) {
	drc.defaults()
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DailyRoutineCreate) SaveX(ctx context.Context) *DailyRoutine {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DailyRoutineCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DailyRoutineCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DailyRoutineCreate) defaults() {
	if _, ok := drc.mutation.CreatedAt(); !ok {
		v := dailyroutine.DefaultCreatedAt()
		drc.mutation.SetCreatedAt(v)
	}
	if _, ok := drc.mutation.UpdatedAt(); !ok {
		v := dailyroutine.DefaultUpdatedAt()
		drc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DailyRoutineCreate) check() error {
	if _, ok := drc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "DailyRoutine.day"`)}
	}
	if v, ok := drc.mutation.Day(); ok {
		if err := dailyroutine.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "DailyRoutine.day": %w`, err)}
		}
	}
	if _, ok := drc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DailyRoutine.created_at"`)}
	}
	if _, ok := drc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DailyRoutine.updated_at"`)}
	}
	return nil
}

func (drc *DailyRoutineCreate) sqlSave(ctx context.Context) (*DailyRoutine, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DailyRoutineCreate) createSpec() (*DailyRoutine, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyRoutine{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(dailyroutine.Table, sqlgraph.NewFieldSpec(dailyroutine.FieldID, field.TypeUint64))
	)
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drc.mutation.ProgramID(); ok {
		_spec.SetField(dailyroutine.FieldProgramID, field.TypeUint64, value)
		_node.ProgramID = &value
	}
	if value, ok := drc.mutation.WeekID(); ok {
		_spec.SetField(dailyroutine.FieldWeekID, field.TypeUint64, value)
		_node.WeekID = &value
	}
	if value, ok := drc.mutation.Day(); ok {
		_spec.SetField(dailyroutine.FieldDay, field.TypeInt, value)
		_node.Day = value
	}
	if value, ok := drc.mutation.CreatedAt(); ok {
		_spec.SetField(dailyroutine.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := drc.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyroutine.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := drc.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dailyroutine.ProgramTable,
			Columns: dailyroutine.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.WeeklyRoutineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dailyroutine.WeeklyRoutineTable,
			Columns: dailyroutine.WeeklyRoutinePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weeklyroutine.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.RoutineActsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailyroutine.RoutineActsTable,
			Columns: []string{dailyroutine.RoutineActsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DailyRoutineCreateBulk is the builder for creating many DailyRoutine entities in bulk.
type DailyRoutineCreateBulk struct {
	config
	builders []*DailyRoutineCreate
}

// Save creates the DailyRoutine entities in the database.
func (drcb *DailyRoutineCreateBulk) Save(ctx context.Context) ([]*DailyRoutine, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DailyRoutine, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyRoutineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DailyRoutineCreateBulk) SaveX(ctx context.Context) []*DailyRoutine {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DailyRoutineCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DailyRoutineCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}

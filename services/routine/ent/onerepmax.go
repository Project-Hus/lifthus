// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/act"
	"routine/ent/onerepmax"
	"routine/ent/programrec"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OneRepMax is the model entity for the OneRepMax schema.
type OneRepMax struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Author holds the value of the "author" field.
	Author uint64 `json:"author,omitempty"`
	// ActID holds the value of the "act_id" field.
	ActID uint64 `json:"act_id,omitempty"`
	// ProgramRecID holds the value of the "program_rec_id" field.
	ProgramRecID *uint64 `json:"program_rec_id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// OneRepMax holds the value of the "one_rep_max" field.
	OneRepMax *float64 `json:"one_rep_max,omitempty"`
	// Certified holds the value of the "certified" field.
	Certified bool `json:"certified,omitempty"`
	// Calculated holds the value of the "calculated" field.
	Calculated bool `json:"calculated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OneRepMaxQuery when eager-loading is set.
	Edges        OneRepMaxEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OneRepMaxEdges holds the relations/edges for other nodes in the graph.
type OneRepMaxEdges struct {
	// Act holds the value of the act edge.
	Act *Act `json:"act,omitempty"`
	// ProgramRec holds the value of the program_rec edge.
	ProgramRec *ProgramRec `json:"program_rec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActOrErr returns the Act value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OneRepMaxEdges) ActOrErr() (*Act, error) {
	if e.loadedTypes[0] {
		if e.Act == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: act.Label}
		}
		return e.Act, nil
	}
	return nil, &NotLoadedError{edge: "act"}
}

// ProgramRecOrErr returns the ProgramRec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OneRepMaxEdges) ProgramRecOrErr() (*ProgramRec, error) {
	if e.loadedTypes[1] {
		if e.ProgramRec == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: programrec.Label}
		}
		return e.ProgramRec, nil
	}
	return nil, &NotLoadedError{edge: "program_rec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OneRepMax) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case onerepmax.FieldCertified, onerepmax.FieldCalculated:
			values[i] = new(sql.NullBool)
		case onerepmax.FieldOneRepMax:
			values[i] = new(sql.NullFloat64)
		case onerepmax.FieldID, onerepmax.FieldAuthor, onerepmax.FieldActID, onerepmax.FieldProgramRecID:
			values[i] = new(sql.NullInt64)
		case onerepmax.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OneRepMax fields.
func (orm *OneRepMax) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case onerepmax.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			orm.ID = uint64(value.Int64)
		case onerepmax.FieldAuthor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				orm.Author = uint64(value.Int64)
			}
		case onerepmax.FieldActID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field act_id", values[i])
			} else if value.Valid {
				orm.ActID = uint64(value.Int64)
			}
		case onerepmax.FieldProgramRecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_rec_id", values[i])
			} else if value.Valid {
				orm.ProgramRecID = new(uint64)
				*orm.ProgramRecID = uint64(value.Int64)
			}
		case onerepmax.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				orm.Date = value.Time
			}
		case onerepmax.FieldOneRepMax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field one_rep_max", values[i])
			} else if value.Valid {
				orm.OneRepMax = new(float64)
				*orm.OneRepMax = value.Float64
			}
		case onerepmax.FieldCertified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field certified", values[i])
			} else if value.Valid {
				orm.Certified = value.Bool
			}
		case onerepmax.FieldCalculated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field calculated", values[i])
			} else if value.Valid {
				orm.Calculated = value.Bool
			}
		default:
			orm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OneRepMax.
// This includes values selected through modifiers, order, etc.
func (orm *OneRepMax) Value(name string) (ent.Value, error) {
	return orm.selectValues.Get(name)
}

// QueryAct queries the "act" edge of the OneRepMax entity.
func (orm *OneRepMax) QueryAct() *ActQuery {
	return NewOneRepMaxClient(orm.config).QueryAct(orm)
}

// QueryProgramRec queries the "program_rec" edge of the OneRepMax entity.
func (orm *OneRepMax) QueryProgramRec() *ProgramRecQuery {
	return NewOneRepMaxClient(orm.config).QueryProgramRec(orm)
}

// Update returns a builder for updating this OneRepMax.
// Note that you need to call OneRepMax.Unwrap() before calling this method if this OneRepMax
// was returned from a transaction, and the transaction was committed or rolled back.
func (orm *OneRepMax) Update() *OneRepMaxUpdateOne {
	return NewOneRepMaxClient(orm.config).UpdateOne(orm)
}

// Unwrap unwraps the OneRepMax entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (orm *OneRepMax) Unwrap() *OneRepMax {
	_tx, ok := orm.config.driver.(*txDriver)
	if !ok {
		panic("ent: OneRepMax is not a transactional entity")
	}
	orm.config.driver = _tx.drv
	return orm
}

// String implements the fmt.Stringer.
func (orm *OneRepMax) String() string {
	var builder strings.Builder
	builder.WriteString("OneRepMax(")
	builder.WriteString(fmt.Sprintf("id=%v, ", orm.ID))
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", orm.Author))
	builder.WriteString(", ")
	builder.WriteString("act_id=")
	builder.WriteString(fmt.Sprintf("%v", orm.ActID))
	builder.WriteString(", ")
	if v := orm.ProgramRecID; v != nil {
		builder.WriteString("program_rec_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(orm.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := orm.OneRepMax; v != nil {
		builder.WriteString("one_rep_max=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("certified=")
	builder.WriteString(fmt.Sprintf("%v", orm.Certified))
	builder.WriteString(", ")
	builder.WriteString("calculated=")
	builder.WriteString(fmt.Sprintf("%v", orm.Calculated))
	builder.WriteByte(')')
	return builder.String()
}

// OneRepMaxes is a parsable slice of OneRepMax.
type OneRepMaxes []*OneRepMax

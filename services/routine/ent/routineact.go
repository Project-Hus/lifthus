// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/act"
	"routine/ent/dailyroutine"
	"routine/ent/routineact"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoutineAct is the model entity for the RoutineAct schema.
type RoutineAct struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// DailyRoutineID holds the value of the "daily_routine_id" field.
	DailyRoutineID uint64 `json:"daily_routine_id,omitempty"`
	// ActID holds the value of the "act_id" field.
	ActID uint64 `json:"act_id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Reps holds the value of the "reps" field.
	Reps *int `json:"reps,omitempty"`
	// Lap holds the value of the "lap" field.
	Lap *int `json:"lap,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoutineActQuery when eager-loading is set.
	Edges                      RoutineActEdges `json:"edges"`
	act_routine_acts           *uint64
	daily_routine_routine_acts *uint64
	selectValues               sql.SelectValues
}

// RoutineActEdges holds the relations/edges for other nodes in the graph.
type RoutineActEdges struct {
	// Act holds the value of the act edge.
	Act *Act `json:"act,omitempty"`
	// DailyRoutine holds the value of the daily_routine edge.
	DailyRoutine *DailyRoutine `json:"daily_routine,omitempty"`
	// RoutineActRecs holds the value of the routine_act_recs edge.
	RoutineActRecs []*RoutineActRec `json:"routine_act_recs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActOrErr returns the Act value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineActEdges) ActOrErr() (*Act, error) {
	if e.loadedTypes[0] {
		if e.Act == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: act.Label}
		}
		return e.Act, nil
	}
	return nil, &NotLoadedError{edge: "act"}
}

// DailyRoutineOrErr returns the DailyRoutine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineActEdges) DailyRoutineOrErr() (*DailyRoutine, error) {
	if e.loadedTypes[1] {
		if e.DailyRoutine == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dailyroutine.Label}
		}
		return e.DailyRoutine, nil
	}
	return nil, &NotLoadedError{edge: "daily_routine"}
}

// RoutineActRecsOrErr returns the RoutineActRecs value or an error if the edge
// was not loaded in eager-loading.
func (e RoutineActEdges) RoutineActRecsOrErr() ([]*RoutineActRec, error) {
	if e.loadedTypes[2] {
		return e.RoutineActRecs, nil
	}
	return nil, &NotLoadedError{edge: "routine_act_recs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoutineAct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case routineact.FieldID, routineact.FieldDailyRoutineID, routineact.FieldActID, routineact.FieldOrder, routineact.FieldReps, routineact.FieldLap:
			values[i] = new(sql.NullInt64)
		case routineact.FieldCreatedAt, routineact.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case routineact.ForeignKeys[0]: // act_routine_acts
			values[i] = new(sql.NullInt64)
		case routineact.ForeignKeys[1]: // daily_routine_routine_acts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoutineAct fields.
func (ra *RoutineAct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case routineact.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ra.ID = uint64(value.Int64)
		case routineact.FieldDailyRoutineID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_routine_id", values[i])
			} else if value.Valid {
				ra.DailyRoutineID = uint64(value.Int64)
			}
		case routineact.FieldActID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field act_id", values[i])
			} else if value.Valid {
				ra.ActID = uint64(value.Int64)
			}
		case routineact.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ra.Order = int(value.Int64)
			}
		case routineact.FieldReps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reps", values[i])
			} else if value.Valid {
				ra.Reps = new(int)
				*ra.Reps = int(value.Int64)
			}
		case routineact.FieldLap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lap", values[i])
			} else if value.Valid {
				ra.Lap = new(int)
				*ra.Lap = int(value.Int64)
			}
		case routineact.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ra.CreatedAt = value.Time
			}
		case routineact.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ra.UpdatedAt = value.Time
			}
		case routineact.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field act_routine_acts", value)
			} else if value.Valid {
				ra.act_routine_acts = new(uint64)
				*ra.act_routine_acts = uint64(value.Int64)
			}
		case routineact.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field daily_routine_routine_acts", value)
			} else if value.Valid {
				ra.daily_routine_routine_acts = new(uint64)
				*ra.daily_routine_routine_acts = uint64(value.Int64)
			}
		default:
			ra.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoutineAct.
// This includes values selected through modifiers, order, etc.
func (ra *RoutineAct) Value(name string) (ent.Value, error) {
	return ra.selectValues.Get(name)
}

// QueryAct queries the "act" edge of the RoutineAct entity.
func (ra *RoutineAct) QueryAct() *ActQuery {
	return NewRoutineActClient(ra.config).QueryAct(ra)
}

// QueryDailyRoutine queries the "daily_routine" edge of the RoutineAct entity.
func (ra *RoutineAct) QueryDailyRoutine() *DailyRoutineQuery {
	return NewRoutineActClient(ra.config).QueryDailyRoutine(ra)
}

// QueryRoutineActRecs queries the "routine_act_recs" edge of the RoutineAct entity.
func (ra *RoutineAct) QueryRoutineActRecs() *RoutineActRecQuery {
	return NewRoutineActClient(ra.config).QueryRoutineActRecs(ra)
}

// Update returns a builder for updating this RoutineAct.
// Note that you need to call RoutineAct.Unwrap() before calling this method if this RoutineAct
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *RoutineAct) Update() *RoutineActUpdateOne {
	return NewRoutineActClient(ra.config).UpdateOne(ra)
}

// Unwrap unwraps the RoutineAct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *RoutineAct) Unwrap() *RoutineAct {
	_tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoutineAct is not a transactional entity")
	}
	ra.config.driver = _tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *RoutineAct) String() string {
	var builder strings.Builder
	builder.WriteString("RoutineAct(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ra.ID))
	builder.WriteString("daily_routine_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.DailyRoutineID))
	builder.WriteString(", ")
	builder.WriteString("act_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.ActID))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", ra.Order))
	builder.WriteString(", ")
	if v := ra.Reps; v != nil {
		builder.WriteString("reps=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ra.Lap; v != nil {
		builder.WriteString("lap=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ra.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ra.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RoutineActs is a parsable slice of RoutineAct.
type RoutineActs []*RoutineAct

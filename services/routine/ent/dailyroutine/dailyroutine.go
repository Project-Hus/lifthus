// Code generated by ent, DO NOT EDIT.

package dailyroutine

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dailyroutine type in the database.
	Label = "daily_routine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProgramID holds the string denoting the program_id field in the database.
	FieldProgramID = "program_id"
	// FieldWeekID holds the string denoting the week_id field in the database.
	FieldWeekID = "week_id"
	// FieldDay holds the string denoting the day field in the database.
	FieldDay = "day"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeWeeklyRoutine holds the string denoting the weekly_routine edge name in mutations.
	EdgeWeeklyRoutine = "weekly_routine"
	// EdgeRoutineActs holds the string denoting the routine_acts edge name in mutations.
	EdgeRoutineActs = "routine_acts"
	// EdgeDailyRoutineRecs holds the string denoting the daily_routine_recs edge name in mutations.
	EdgeDailyRoutineRecs = "daily_routine_recs"
	// Table holds the table name of the dailyroutine in the database.
	Table = "daily_routines"
	// ProgramTable is the table that holds the program relation/edge. The primary key declared below.
	ProgramTable = "program_daily_routines"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// WeeklyRoutineTable is the table that holds the weekly_routine relation/edge. The primary key declared below.
	WeeklyRoutineTable = "weekly_routine_daily_routines"
	// WeeklyRoutineInverseTable is the table name for the WeeklyRoutine entity.
	// It exists in this package in order to avoid circular dependency with the "weeklyroutine" package.
	WeeklyRoutineInverseTable = "weekly_routines"
	// RoutineActsTable is the table that holds the routine_acts relation/edge.
	RoutineActsTable = "routine_acts"
	// RoutineActsInverseTable is the table name for the RoutineAct entity.
	// It exists in this package in order to avoid circular dependency with the "routineact" package.
	RoutineActsInverseTable = "routine_acts"
	// RoutineActsColumn is the table column denoting the routine_acts relation/edge.
	RoutineActsColumn = "daily_routine_routine_acts"
	// DailyRoutineRecsTable is the table that holds the daily_routine_recs relation/edge.
	DailyRoutineRecsTable = "daily_routine_recs"
	// DailyRoutineRecsInverseTable is the table name for the DailyRoutineRec entity.
	// It exists in this package in order to avoid circular dependency with the "dailyroutinerec" package.
	DailyRoutineRecsInverseTable = "daily_routine_recs"
	// DailyRoutineRecsColumn is the table column denoting the daily_routine_recs relation/edge.
	DailyRoutineRecsColumn = "daily_routine_daily_routine_recs"
)

// Columns holds all SQL columns for dailyroutine fields.
var Columns = []string{
	FieldID,
	FieldProgramID,
	FieldWeekID,
	FieldDay,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// ProgramPrimaryKey and ProgramColumn2 are the table columns denoting the
	// primary key for the program relation (M2M).
	ProgramPrimaryKey = []string{"program_id", "daily_routine_id"}
	// WeeklyRoutinePrimaryKey and WeeklyRoutineColumn2 are the table columns denoting the
	// primary key for the weekly_routine relation (M2M).
	WeeklyRoutinePrimaryKey = []string{"weekly_routine_id", "daily_routine_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DayValidator is a validator for the "day" field. It is called by the builders before save.
	DayValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the DailyRoutine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProgramID orders the results by the program_id field.
func ByProgramID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgramID, opts...).ToFunc()
}

// ByWeekID orders the results by the week_id field.
func ByWeekID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeekID, opts...).ToFunc()
}

// ByDay orders the results by the day field.
func ByDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDay, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgramCount orders the results by program count.
func ByProgramCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramStep(), opts...)
	}
}

// ByProgram orders the results by program terms.
func ByProgram(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWeeklyRoutineCount orders the results by weekly_routine count.
func ByWeeklyRoutineCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWeeklyRoutineStep(), opts...)
	}
}

// ByWeeklyRoutine orders the results by weekly_routine terms.
func ByWeeklyRoutine(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWeeklyRoutineStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoutineActsCount orders the results by routine_acts count.
func ByRoutineActsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoutineActsStep(), opts...)
	}
}

// ByRoutineActs orders the results by routine_acts terms.
func ByRoutineActs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutineActsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDailyRoutineRecsCount orders the results by daily_routine_recs count.
func ByDailyRoutineRecsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDailyRoutineRecsStep(), opts...)
	}
}

// ByDailyRoutineRecs orders the results by daily_routine_recs terms.
func ByDailyRoutineRecs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDailyRoutineRecsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramTable, ProgramPrimaryKey...),
	)
}
func newWeeklyRoutineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WeeklyRoutineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, WeeklyRoutineTable, WeeklyRoutinePrimaryKey...),
	)
}
func newRoutineActsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutineActsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoutineActsTable, RoutineActsColumn),
	)
}
func newDailyRoutineRecsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DailyRoutineRecsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DailyRoutineRecsTable, DailyRoutineRecsColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package weeklyroutine

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the weeklyroutine type in the database.
	Label = "weekly_routine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProgramID holds the string denoting the program_id field in the database.
	FieldProgramID = "program_id"
	// FieldWeek holds the string denoting the week field in the database.
	FieldWeek = "week"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeDailyRoutines holds the string denoting the daily_routines edge name in mutations.
	EdgeDailyRoutines = "daily_routines"
	// EdgeWeeklyRoutineRecs holds the string denoting the weekly_routine_recs edge name in mutations.
	EdgeWeeklyRoutineRecs = "weekly_routine_recs"
	// Table holds the table name of the weeklyroutine in the database.
	Table = "weekly_routines"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "weekly_routines"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_id"
	// DailyRoutinesTable is the table that holds the daily_routines relation/edge.
	DailyRoutinesTable = "daily_routines"
	// DailyRoutinesInverseTable is the table name for the DailyRoutine entity.
	// It exists in this package in order to avoid circular dependency with the "dailyroutine" package.
	DailyRoutinesInverseTable = "daily_routines"
	// DailyRoutinesColumn is the table column denoting the daily_routines relation/edge.
	DailyRoutinesColumn = "weekly_routine_id"
	// WeeklyRoutineRecsTable is the table that holds the weekly_routine_recs relation/edge.
	WeeklyRoutineRecsTable = "weekly_routine_recs"
	// WeeklyRoutineRecsInverseTable is the table name for the WeeklyRoutineRec entity.
	// It exists in this package in order to avoid circular dependency with the "weeklyroutinerec" package.
	WeeklyRoutineRecsInverseTable = "weekly_routine_recs"
	// WeeklyRoutineRecsColumn is the table column denoting the weekly_routine_recs relation/edge.
	WeeklyRoutineRecsColumn = "weekly_routine_id"
)

// Columns holds all SQL columns for weeklyroutine fields.
var Columns = []string{
	FieldID,
	FieldProgramID,
	FieldWeek,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// WeekValidator is a validator for the "week" field. It is called by the builders before save.
	WeekValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the WeeklyRoutine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProgramID orders the results by the program_id field.
func ByProgramID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgramID, opts...).ToFunc()
}

// ByWeek orders the results by the week field.
func ByWeek(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeek, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByDailyRoutinesCount orders the results by daily_routines count.
func ByDailyRoutinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDailyRoutinesStep(), opts...)
	}
}

// ByDailyRoutines orders the results by daily_routines terms.
func ByDailyRoutines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDailyRoutinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWeeklyRoutineRecsCount orders the results by weekly_routine_recs count.
func ByWeeklyRoutineRecsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWeeklyRoutineRecsStep(), opts...)
	}
}

// ByWeeklyRoutineRecs orders the results by weekly_routine_recs terms.
func ByWeeklyRoutineRecs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWeeklyRoutineRecsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newDailyRoutinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DailyRoutinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DailyRoutinesTable, DailyRoutinesColumn),
	)
}
func newWeeklyRoutineRecsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WeeklyRoutineRecsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WeeklyRoutineRecsTable, WeeklyRoutineRecsColumn),
	)
}

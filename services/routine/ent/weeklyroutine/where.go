// Code generated by ent, DO NOT EDIT.

package weeklyroutine

import (
	"routine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLTE(FieldID, id))
}

// ProgramID applies equality check predicate on the "program_id" field. It's identical to ProgramIDEQ.
func ProgramID(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldProgramID, v))
}

// Week applies equality check predicate on the "week" field. It's identical to WeekEQ.
func Week(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldWeek, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProgramIDEQ applies the EQ predicate on the "program_id" field.
func ProgramIDEQ(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldProgramID, v))
}

// ProgramIDNEQ applies the NEQ predicate on the "program_id" field.
func ProgramIDNEQ(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNEQ(FieldProgramID, v))
}

// ProgramIDIn applies the In predicate on the "program_id" field.
func ProgramIDIn(vs ...uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldIn(FieldProgramID, vs...))
}

// ProgramIDNotIn applies the NotIn predicate on the "program_id" field.
func ProgramIDNotIn(vs ...uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNotIn(FieldProgramID, vs...))
}

// ProgramIDGT applies the GT predicate on the "program_id" field.
func ProgramIDGT(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGT(FieldProgramID, v))
}

// ProgramIDGTE applies the GTE predicate on the "program_id" field.
func ProgramIDGTE(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGTE(FieldProgramID, v))
}

// ProgramIDLT applies the LT predicate on the "program_id" field.
func ProgramIDLT(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLT(FieldProgramID, v))
}

// ProgramIDLTE applies the LTE predicate on the "program_id" field.
func ProgramIDLTE(v uint64) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLTE(FieldProgramID, v))
}

// WeekEQ applies the EQ predicate on the "week" field.
func WeekEQ(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldWeek, v))
}

// WeekNEQ applies the NEQ predicate on the "week" field.
func WeekNEQ(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNEQ(FieldWeek, v))
}

// WeekIn applies the In predicate on the "week" field.
func WeekIn(vs ...int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldIn(FieldWeek, vs...))
}

// WeekNotIn applies the NotIn predicate on the "week" field.
func WeekNotIn(vs ...int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNotIn(FieldWeek, vs...))
}

// WeekGT applies the GT predicate on the "week" field.
func WeekGT(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGT(FieldWeek, v))
}

// WeekGTE applies the GTE predicate on the "week" field.
func WeekGTE(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGTE(FieldWeek, v))
}

// WeekLT applies the LT predicate on the "week" field.
func WeekLT(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLT(FieldWeek, v))
}

// WeekLTE applies the LTE predicate on the "week" field.
func WeekLTE(v int) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLTE(FieldWeek, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProgramTable, ProgramPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyRoutines applies the HasEdge predicate on the "daily_routines" edge.
func HasDailyRoutines() predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DailyRoutinesTable, DailyRoutinesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyRoutinesWith applies the HasEdge predicate on the "daily_routines" edge with a given conditions (other predicates).
func HasDailyRoutinesWith(preds ...predicate.DailyRoutine) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		step := newDailyRoutinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WeeklyRoutine) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WeeklyRoutine) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WeeklyRoutine) predicate.WeeklyRoutine {
	return predicate.WeeklyRoutine(func(s *sql.Selector) {
		p(s.Not())
	})
}

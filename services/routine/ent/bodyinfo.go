// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"routine/ent/bodyinfo"
	"routine/ent/programrec"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BodyInfo is the model entity for the BodyInfo schema.
type BodyInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Author holds the value of the "author" field.
	Author uint64 `json:"author,omitempty"`
	// ProgramRecID holds the value of the "program_rec_id" field.
	ProgramRecID *uint64 `json:"program_rec_id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Height holds the value of the "height" field.
	Height *float64 `json:"height,omitempty"`
	// BodyWeight holds the value of the "body_weight" field.
	BodyWeight *float64 `json:"body_weight,omitempty"`
	// BodyFatMass holds the value of the "body_fat_mass" field.
	BodyFatMass *float64 `json:"body_fat_mass,omitempty"`
	// SkeletalMuscleMass holds the value of the "skeletal_muscle_mass" field.
	SkeletalMuscleMass *float64 `json:"skeletal_muscle_mass,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BodyInfoQuery when eager-loading is set.
	Edges        BodyInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BodyInfoEdges holds the relations/edges for other nodes in the graph.
type BodyInfoEdges struct {
	// ProgramRec holds the value of the program_rec edge.
	ProgramRec *ProgramRec `json:"program_rec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProgramRecOrErr returns the ProgramRec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BodyInfoEdges) ProgramRecOrErr() (*ProgramRec, error) {
	if e.loadedTypes[0] {
		if e.ProgramRec == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: programrec.Label}
		}
		return e.ProgramRec, nil
	}
	return nil, &NotLoadedError{edge: "program_rec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BodyInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bodyinfo.FieldHeight, bodyinfo.FieldBodyWeight, bodyinfo.FieldBodyFatMass, bodyinfo.FieldSkeletalMuscleMass:
			values[i] = new(sql.NullFloat64)
		case bodyinfo.FieldID, bodyinfo.FieldAuthor, bodyinfo.FieldProgramRecID:
			values[i] = new(sql.NullInt64)
		case bodyinfo.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BodyInfo fields.
func (bi *BodyInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bodyinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bi.ID = uint64(value.Int64)
		case bodyinfo.FieldAuthor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				bi.Author = uint64(value.Int64)
			}
		case bodyinfo.FieldProgramRecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field program_rec_id", values[i])
			} else if value.Valid {
				bi.ProgramRecID = new(uint64)
				*bi.ProgramRecID = uint64(value.Int64)
			}
		case bodyinfo.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				bi.Date = value.Time
			}
		case bodyinfo.FieldHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				bi.Height = new(float64)
				*bi.Height = value.Float64
			}
		case bodyinfo.FieldBodyWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field body_weight", values[i])
			} else if value.Valid {
				bi.BodyWeight = new(float64)
				*bi.BodyWeight = value.Float64
			}
		case bodyinfo.FieldBodyFatMass:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field body_fat_mass", values[i])
			} else if value.Valid {
				bi.BodyFatMass = new(float64)
				*bi.BodyFatMass = value.Float64
			}
		case bodyinfo.FieldSkeletalMuscleMass:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field skeletal_muscle_mass", values[i])
			} else if value.Valid {
				bi.SkeletalMuscleMass = new(float64)
				*bi.SkeletalMuscleMass = value.Float64
			}
		default:
			bi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BodyInfo.
// This includes values selected through modifiers, order, etc.
func (bi *BodyInfo) Value(name string) (ent.Value, error) {
	return bi.selectValues.Get(name)
}

// QueryProgramRec queries the "program_rec" edge of the BodyInfo entity.
func (bi *BodyInfo) QueryProgramRec() *ProgramRecQuery {
	return NewBodyInfoClient(bi.config).QueryProgramRec(bi)
}

// Update returns a builder for updating this BodyInfo.
// Note that you need to call BodyInfo.Unwrap() before calling this method if this BodyInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BodyInfo) Update() *BodyInfoUpdateOne {
	return NewBodyInfoClient(bi.config).UpdateOne(bi)
}

// Unwrap unwraps the BodyInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BodyInfo) Unwrap() *BodyInfo {
	_tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BodyInfo is not a transactional entity")
	}
	bi.config.driver = _tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BodyInfo) String() string {
	var builder strings.Builder
	builder.WriteString("BodyInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bi.ID))
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", bi.Author))
	builder.WriteString(", ")
	if v := bi.ProgramRecID; v != nil {
		builder.WriteString("program_rec_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(bi.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bi.Height; v != nil {
		builder.WriteString("height=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bi.BodyWeight; v != nil {
		builder.WriteString("body_weight=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bi.BodyFatMass; v != nil {
		builder.WriteString("body_fat_mass=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bi.SkeletalMuscleMass; v != nil {
		builder.WriteString("skeletal_muscle_mass=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BodyInfos is a parsable slice of BodyInfo.
type BodyInfos []*BodyInfo

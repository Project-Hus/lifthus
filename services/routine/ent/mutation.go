// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/act"
	"routine/ent/dailyroutine"
	"routine/ent/dailyroutinerec"
	"routine/ent/predicate"
	"routine/ent/program"
	"routine/ent/programrec"
	"routine/ent/routineact"
	"routine/ent/routineactrec"
	"routine/ent/tag"
	"routine/ent/weeklyroutine"
	"routine/ent/weeklyroutinerec"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAct              = "Act"
	TypeDailyRoutine     = "DailyRoutine"
	TypeDailyRoutineRec  = "DailyRoutineRec"
	TypeProgram          = "Program"
	TypeProgramRec       = "ProgramRec"
	TypeRoutineAct       = "RoutineAct"
	TypeRoutineActRec    = "RoutineActRec"
	TypeTag              = "Tag"
	TypeWeeklyRoutine    = "WeeklyRoutine"
	TypeWeeklyRoutineRec = "WeeklyRoutineRec"
)

// ActMutation represents an operation that mutates the Act nodes in the graph.
type ActMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	name                    *string
	_type                   *act.Type
	author                  *uint64
	addauthor               *int64
	image                   *string
	description             *string
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	tags                    map[uint64]struct{}
	removedtags             map[uint64]struct{}
	clearedtags             bool
	routine_acts            map[uint64]struct{}
	removedroutine_acts     map[uint64]struct{}
	clearedroutine_acts     bool
	routine_act_recs        map[uint64]struct{}
	removedroutine_act_recs map[uint64]struct{}
	clearedroutine_act_recs bool
	done                    bool
	oldValue                func(context.Context) (*Act, error)
	predicates              []predicate.Act
}

var _ ent.Mutation = (*ActMutation)(nil)

// actOption allows management of the mutation configuration using functional options.
type actOption func(*ActMutation)

// newActMutation creates new mutation for the Act entity.
func newActMutation(c config, op Op, opts ...actOption) *ActMutation {
	m := &ActMutation{
		config:        c,
		op:            op,
		typ:           TypeAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActID sets the ID field of the mutation.
func withActID(id uint64) actOption {
	return func(m *ActMutation) {
		var (
			err   error
			once  sync.Once
			value *Act
		)
		m.oldValue = func(ctx context.Context) (*Act, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Act.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAct sets the old Act of the mutation.
func withAct(node *Act) actOption {
	return func(m *ActMutation) {
		m.oldValue = func(context.Context) (*Act, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Act entities.
func (m *ActMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Act.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ActMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *ActMutation) SetType(a act.Type) {
	m._type = &a
}

// GetType returns the value of the "type" field in the mutation.
func (m *ActMutation) GetType() (r act.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldType(ctx context.Context) (v *act.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *ActMutation) ClearType() {
	m._type = nil
	m.clearedFields[act.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *ActMutation) TypeCleared() bool {
	_, ok := m.clearedFields[act.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *ActMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, act.FieldType)
}

// SetAuthor sets the "author" field.
func (m *ActMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ActMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *ActMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ActMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ActMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetImage sets the "image" field.
func (m *ActMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ActMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldImage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *ActMutation) ClearImage() {
	m.image = nil
	m.clearedFields[act.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *ActMutation) ImageCleared() bool {
	_, ok := m.clearedFields[act.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *ActMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, act.FieldImage)
}

// SetDescription sets the "description" field.
func (m *ActMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ActMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ActMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[act.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ActMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[act.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ActMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, act.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *ActMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ActMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ActMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Act entity.
// If the Act object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ActMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *ActMutation) AddTagIDs(ids ...uint64) {
	if m.tags == nil {
		m.tags = make(map[uint64]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *ActMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *ActMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *ActMutation) RemoveTagIDs(ids ...uint64) {
	if m.removedtags == nil {
		m.removedtags = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *ActMutation) RemovedTagsIDs() (ids []uint64) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ActMutation) TagsIDs() (ids []uint64) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ActMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by ids.
func (m *ActMutation) AddRoutineActIDs(ids ...uint64) {
	if m.routine_acts == nil {
		m.routine_acts = make(map[uint64]struct{})
	}
	for i := range ids {
		m.routine_acts[ids[i]] = struct{}{}
	}
}

// ClearRoutineActs clears the "routine_acts" edge to the RoutineAct entity.
func (m *ActMutation) ClearRoutineActs() {
	m.clearedroutine_acts = true
}

// RoutineActsCleared reports if the "routine_acts" edge to the RoutineAct entity was cleared.
func (m *ActMutation) RoutineActsCleared() bool {
	return m.clearedroutine_acts
}

// RemoveRoutineActIDs removes the "routine_acts" edge to the RoutineAct entity by IDs.
func (m *ActMutation) RemoveRoutineActIDs(ids ...uint64) {
	if m.removedroutine_acts == nil {
		m.removedroutine_acts = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.routine_acts, ids[i])
		m.removedroutine_acts[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActs returns the removed IDs of the "routine_acts" edge to the RoutineAct entity.
func (m *ActMutation) RemovedRoutineActsIDs() (ids []uint64) {
	for id := range m.removedroutine_acts {
		ids = append(ids, id)
	}
	return
}

// RoutineActsIDs returns the "routine_acts" edge IDs in the mutation.
func (m *ActMutation) RoutineActsIDs() (ids []uint64) {
	for id := range m.routine_acts {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActs resets all changes to the "routine_acts" edge.
func (m *ActMutation) ResetRoutineActs() {
	m.routine_acts = nil
	m.clearedroutine_acts = false
	m.removedroutine_acts = nil
}

// AddRoutineActRecIDs adds the "routine_act_recs" edge to the RoutineActRec entity by ids.
func (m *ActMutation) AddRoutineActRecIDs(ids ...uint64) {
	if m.routine_act_recs == nil {
		m.routine_act_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.routine_act_recs[ids[i]] = struct{}{}
	}
}

// ClearRoutineActRecs clears the "routine_act_recs" edge to the RoutineActRec entity.
func (m *ActMutation) ClearRoutineActRecs() {
	m.clearedroutine_act_recs = true
}

// RoutineActRecsCleared reports if the "routine_act_recs" edge to the RoutineActRec entity was cleared.
func (m *ActMutation) RoutineActRecsCleared() bool {
	return m.clearedroutine_act_recs
}

// RemoveRoutineActRecIDs removes the "routine_act_recs" edge to the RoutineActRec entity by IDs.
func (m *ActMutation) RemoveRoutineActRecIDs(ids ...uint64) {
	if m.removedroutine_act_recs == nil {
		m.removedroutine_act_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.routine_act_recs, ids[i])
		m.removedroutine_act_recs[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActRecs returns the removed IDs of the "routine_act_recs" edge to the RoutineActRec entity.
func (m *ActMutation) RemovedRoutineActRecsIDs() (ids []uint64) {
	for id := range m.removedroutine_act_recs {
		ids = append(ids, id)
	}
	return
}

// RoutineActRecsIDs returns the "routine_act_recs" edge IDs in the mutation.
func (m *ActMutation) RoutineActRecsIDs() (ids []uint64) {
	for id := range m.routine_act_recs {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActRecs resets all changes to the "routine_act_recs" edge.
func (m *ActMutation) ResetRoutineActRecs() {
	m.routine_act_recs = nil
	m.clearedroutine_act_recs = false
	m.removedroutine_act_recs = nil
}

// Where appends a list predicates to the ActMutation builder.
func (m *ActMutation) Where(ps ...predicate.Act) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Act, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Act).
func (m *ActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, act.FieldName)
	}
	if m._type != nil {
		fields = append(fields, act.FieldType)
	}
	if m.author != nil {
		fields = append(fields, act.FieldAuthor)
	}
	if m.image != nil {
		fields = append(fields, act.FieldImage)
	}
	if m.description != nil {
		fields = append(fields, act.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, act.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, act.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case act.FieldName:
		return m.Name()
	case act.FieldType:
		return m.GetType()
	case act.FieldAuthor:
		return m.Author()
	case act.FieldImage:
		return m.Image()
	case act.FieldDescription:
		return m.Description()
	case act.FieldCreatedAt:
		return m.CreatedAt()
	case act.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case act.FieldName:
		return m.OldName(ctx)
	case act.FieldType:
		return m.OldType(ctx)
	case act.FieldAuthor:
		return m.OldAuthor(ctx)
	case act.FieldImage:
		return m.OldImage(ctx)
	case act.FieldDescription:
		return m.OldDescription(ctx)
	case act.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case act.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Act field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case act.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case act.FieldType:
		v, ok := value.(act.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case act.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case act.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case act.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case act.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case act.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, act.FieldAuthor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case act.FieldAuthor:
		return m.AddedAuthor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case act.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	}
	return fmt.Errorf("unknown Act numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(act.FieldType) {
		fields = append(fields, act.FieldType)
	}
	if m.FieldCleared(act.FieldImage) {
		fields = append(fields, act.FieldImage)
	}
	if m.FieldCleared(act.FieldDescription) {
		fields = append(fields, act.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActMutation) ClearField(name string) error {
	switch name {
	case act.FieldType:
		m.ClearType()
		return nil
	case act.FieldImage:
		m.ClearImage()
		return nil
	case act.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Act nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActMutation) ResetField(name string) error {
	switch name {
	case act.FieldName:
		m.ResetName()
		return nil
	case act.FieldType:
		m.ResetType()
		return nil
	case act.FieldAuthor:
		m.ResetAuthor()
		return nil
	case act.FieldImage:
		m.ResetImage()
		return nil
	case act.FieldDescription:
		m.ResetDescription()
		return nil
	case act.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case act.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Act field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.tags != nil {
		edges = append(edges, act.EdgeTags)
	}
	if m.routine_acts != nil {
		edges = append(edges, act.EdgeRoutineActs)
	}
	if m.routine_act_recs != nil {
		edges = append(edges, act.EdgeRoutineActRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case act.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.routine_acts))
		for id := range m.routine_acts {
			ids = append(ids, id)
		}
		return ids
	case act.EdgeRoutineActRecs:
		ids := make([]ent.Value, 0, len(m.routine_act_recs))
		for id := range m.routine_act_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtags != nil {
		edges = append(edges, act.EdgeTags)
	}
	if m.removedroutine_acts != nil {
		edges = append(edges, act.EdgeRoutineActs)
	}
	if m.removedroutine_act_recs != nil {
		edges = append(edges, act.EdgeRoutineActRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case act.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case act.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.removedroutine_acts))
		for id := range m.removedroutine_acts {
			ids = append(ids, id)
		}
		return ids
	case act.EdgeRoutineActRecs:
		ids := make([]ent.Value, 0, len(m.removedroutine_act_recs))
		for id := range m.removedroutine_act_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtags {
		edges = append(edges, act.EdgeTags)
	}
	if m.clearedroutine_acts {
		edges = append(edges, act.EdgeRoutineActs)
	}
	if m.clearedroutine_act_recs {
		edges = append(edges, act.EdgeRoutineActRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActMutation) EdgeCleared(name string) bool {
	switch name {
	case act.EdgeTags:
		return m.clearedtags
	case act.EdgeRoutineActs:
		return m.clearedroutine_acts
	case act.EdgeRoutineActRecs:
		return m.clearedroutine_act_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Act unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActMutation) ResetEdge(name string) error {
	switch name {
	case act.EdgeTags:
		m.ResetTags()
		return nil
	case act.EdgeRoutineActs:
		m.ResetRoutineActs()
		return nil
	case act.EdgeRoutineActRecs:
		m.ResetRoutineActRecs()
		return nil
	}
	return fmt.Errorf("unknown Act edge %s", name)
}

// DailyRoutineMutation represents an operation that mutates the DailyRoutine nodes in the graph.
type DailyRoutineMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uint64
	program_id                *uint64
	addprogram_id             *int64
	week_id                   *uint64
	addweek_id                *int64
	day                       *int
	addday                    *int
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	program                   map[uint64]struct{}
	removedprogram            map[uint64]struct{}
	clearedprogram            bool
	weekly_routine            map[uint64]struct{}
	removedweekly_routine     map[uint64]struct{}
	clearedweekly_routine     bool
	routine_acts              map[uint64]struct{}
	removedroutine_acts       map[uint64]struct{}
	clearedroutine_acts       bool
	daily_routine_recs        map[uint64]struct{}
	removeddaily_routine_recs map[uint64]struct{}
	cleareddaily_routine_recs bool
	done                      bool
	oldValue                  func(context.Context) (*DailyRoutine, error)
	predicates                []predicate.DailyRoutine
}

var _ ent.Mutation = (*DailyRoutineMutation)(nil)

// dailyroutineOption allows management of the mutation configuration using functional options.
type dailyroutineOption func(*DailyRoutineMutation)

// newDailyRoutineMutation creates new mutation for the DailyRoutine entity.
func newDailyRoutineMutation(c config, op Op, opts ...dailyroutineOption) *DailyRoutineMutation {
	m := &DailyRoutineMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyRoutine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyRoutineID sets the ID field of the mutation.
func withDailyRoutineID(id uint64) dailyroutineOption {
	return func(m *DailyRoutineMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyRoutine
		)
		m.oldValue = func(ctx context.Context) (*DailyRoutine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyRoutine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyRoutine sets the old DailyRoutine of the mutation.
func withDailyRoutine(node *DailyRoutine) dailyroutineOption {
	return func(m *DailyRoutineMutation) {
		m.oldValue = func(context.Context) (*DailyRoutine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyRoutineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyRoutineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyRoutine entities.
func (m *DailyRoutineMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyRoutineMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyRoutineMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyRoutine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProgramID sets the "program_id" field.
func (m *DailyRoutineMutation) SetProgramID(u uint64) {
	m.program_id = &u
	m.addprogram_id = nil
}

// ProgramID returns the value of the "program_id" field in the mutation.
func (m *DailyRoutineMutation) ProgramID() (r uint64, exists bool) {
	v := m.program_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramID returns the old "program_id" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldProgramID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramID: %w", err)
	}
	return oldValue.ProgramID, nil
}

// AddProgramID adds u to the "program_id" field.
func (m *DailyRoutineMutation) AddProgramID(u int64) {
	if m.addprogram_id != nil {
		*m.addprogram_id += u
	} else {
		m.addprogram_id = &u
	}
}

// AddedProgramID returns the value that was added to the "program_id" field in this mutation.
func (m *DailyRoutineMutation) AddedProgramID() (r int64, exists bool) {
	v := m.addprogram_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProgramID clears the value of the "program_id" field.
func (m *DailyRoutineMutation) ClearProgramID() {
	m.program_id = nil
	m.addprogram_id = nil
	m.clearedFields[dailyroutine.FieldProgramID] = struct{}{}
}

// ProgramIDCleared returns if the "program_id" field was cleared in this mutation.
func (m *DailyRoutineMutation) ProgramIDCleared() bool {
	_, ok := m.clearedFields[dailyroutine.FieldProgramID]
	return ok
}

// ResetProgramID resets all changes to the "program_id" field.
func (m *DailyRoutineMutation) ResetProgramID() {
	m.program_id = nil
	m.addprogram_id = nil
	delete(m.clearedFields, dailyroutine.FieldProgramID)
}

// SetWeekID sets the "week_id" field.
func (m *DailyRoutineMutation) SetWeekID(u uint64) {
	m.week_id = &u
	m.addweek_id = nil
}

// WeekID returns the value of the "week_id" field in the mutation.
func (m *DailyRoutineMutation) WeekID() (r uint64, exists bool) {
	v := m.week_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWeekID returns the old "week_id" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldWeekID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeekID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeekID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeekID: %w", err)
	}
	return oldValue.WeekID, nil
}

// AddWeekID adds u to the "week_id" field.
func (m *DailyRoutineMutation) AddWeekID(u int64) {
	if m.addweek_id != nil {
		*m.addweek_id += u
	} else {
		m.addweek_id = &u
	}
}

// AddedWeekID returns the value that was added to the "week_id" field in this mutation.
func (m *DailyRoutineMutation) AddedWeekID() (r int64, exists bool) {
	v := m.addweek_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeekID clears the value of the "week_id" field.
func (m *DailyRoutineMutation) ClearWeekID() {
	m.week_id = nil
	m.addweek_id = nil
	m.clearedFields[dailyroutine.FieldWeekID] = struct{}{}
}

// WeekIDCleared returns if the "week_id" field was cleared in this mutation.
func (m *DailyRoutineMutation) WeekIDCleared() bool {
	_, ok := m.clearedFields[dailyroutine.FieldWeekID]
	return ok
}

// ResetWeekID resets all changes to the "week_id" field.
func (m *DailyRoutineMutation) ResetWeekID() {
	m.week_id = nil
	m.addweek_id = nil
	delete(m.clearedFields, dailyroutine.FieldWeekID)
}

// SetDay sets the "day" field.
func (m *DailyRoutineMutation) SetDay(i int) {
	m.day = &i
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *DailyRoutineMutation) Day() (r int, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldDay(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds i to the "day" field.
func (m *DailyRoutineMutation) AddDay(i int) {
	if m.addday != nil {
		*m.addday += i
	} else {
		m.addday = &i
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *DailyRoutineMutation) AddedDay() (r int, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *DailyRoutineMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DailyRoutineMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DailyRoutineMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DailyRoutineMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DailyRoutineMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DailyRoutineMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DailyRoutine entity.
// If the DailyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DailyRoutineMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProgramIDs adds the "program" edge to the Program entity by ids.
func (m *DailyRoutineMutation) AddProgramIDs(ids ...uint64) {
	if m.program == nil {
		m.program = make(map[uint64]struct{})
	}
	for i := range ids {
		m.program[ids[i]] = struct{}{}
	}
}

// ClearProgram clears the "program" edge to the Program entity.
func (m *DailyRoutineMutation) ClearProgram() {
	m.clearedprogram = true
}

// ProgramCleared reports if the "program" edge to the Program entity was cleared.
func (m *DailyRoutineMutation) ProgramCleared() bool {
	return m.clearedprogram
}

// RemoveProgramIDs removes the "program" edge to the Program entity by IDs.
func (m *DailyRoutineMutation) RemoveProgramIDs(ids ...uint64) {
	if m.removedprogram == nil {
		m.removedprogram = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.program, ids[i])
		m.removedprogram[ids[i]] = struct{}{}
	}
}

// RemovedProgram returns the removed IDs of the "program" edge to the Program entity.
func (m *DailyRoutineMutation) RemovedProgramIDs() (ids []uint64) {
	for id := range m.removedprogram {
		ids = append(ids, id)
	}
	return
}

// ProgramIDs returns the "program" edge IDs in the mutation.
func (m *DailyRoutineMutation) ProgramIDs() (ids []uint64) {
	for id := range m.program {
		ids = append(ids, id)
	}
	return
}

// ResetProgram resets all changes to the "program" edge.
func (m *DailyRoutineMutation) ResetProgram() {
	m.program = nil
	m.clearedprogram = false
	m.removedprogram = nil
}

// AddWeeklyRoutineIDs adds the "weekly_routine" edge to the WeeklyRoutine entity by ids.
func (m *DailyRoutineMutation) AddWeeklyRoutineIDs(ids ...uint64) {
	if m.weekly_routine == nil {
		m.weekly_routine = make(map[uint64]struct{})
	}
	for i := range ids {
		m.weekly_routine[ids[i]] = struct{}{}
	}
}

// ClearWeeklyRoutine clears the "weekly_routine" edge to the WeeklyRoutine entity.
func (m *DailyRoutineMutation) ClearWeeklyRoutine() {
	m.clearedweekly_routine = true
}

// WeeklyRoutineCleared reports if the "weekly_routine" edge to the WeeklyRoutine entity was cleared.
func (m *DailyRoutineMutation) WeeklyRoutineCleared() bool {
	return m.clearedweekly_routine
}

// RemoveWeeklyRoutineIDs removes the "weekly_routine" edge to the WeeklyRoutine entity by IDs.
func (m *DailyRoutineMutation) RemoveWeeklyRoutineIDs(ids ...uint64) {
	if m.removedweekly_routine == nil {
		m.removedweekly_routine = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.weekly_routine, ids[i])
		m.removedweekly_routine[ids[i]] = struct{}{}
	}
}

// RemovedWeeklyRoutine returns the removed IDs of the "weekly_routine" edge to the WeeklyRoutine entity.
func (m *DailyRoutineMutation) RemovedWeeklyRoutineIDs() (ids []uint64) {
	for id := range m.removedweekly_routine {
		ids = append(ids, id)
	}
	return
}

// WeeklyRoutineIDs returns the "weekly_routine" edge IDs in the mutation.
func (m *DailyRoutineMutation) WeeklyRoutineIDs() (ids []uint64) {
	for id := range m.weekly_routine {
		ids = append(ids, id)
	}
	return
}

// ResetWeeklyRoutine resets all changes to the "weekly_routine" edge.
func (m *DailyRoutineMutation) ResetWeeklyRoutine() {
	m.weekly_routine = nil
	m.clearedweekly_routine = false
	m.removedweekly_routine = nil
}

// AddRoutineActIDs adds the "routine_acts" edge to the RoutineAct entity by ids.
func (m *DailyRoutineMutation) AddRoutineActIDs(ids ...uint64) {
	if m.routine_acts == nil {
		m.routine_acts = make(map[uint64]struct{})
	}
	for i := range ids {
		m.routine_acts[ids[i]] = struct{}{}
	}
}

// ClearRoutineActs clears the "routine_acts" edge to the RoutineAct entity.
func (m *DailyRoutineMutation) ClearRoutineActs() {
	m.clearedroutine_acts = true
}

// RoutineActsCleared reports if the "routine_acts" edge to the RoutineAct entity was cleared.
func (m *DailyRoutineMutation) RoutineActsCleared() bool {
	return m.clearedroutine_acts
}

// RemoveRoutineActIDs removes the "routine_acts" edge to the RoutineAct entity by IDs.
func (m *DailyRoutineMutation) RemoveRoutineActIDs(ids ...uint64) {
	if m.removedroutine_acts == nil {
		m.removedroutine_acts = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.routine_acts, ids[i])
		m.removedroutine_acts[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActs returns the removed IDs of the "routine_acts" edge to the RoutineAct entity.
func (m *DailyRoutineMutation) RemovedRoutineActsIDs() (ids []uint64) {
	for id := range m.removedroutine_acts {
		ids = append(ids, id)
	}
	return
}

// RoutineActsIDs returns the "routine_acts" edge IDs in the mutation.
func (m *DailyRoutineMutation) RoutineActsIDs() (ids []uint64) {
	for id := range m.routine_acts {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActs resets all changes to the "routine_acts" edge.
func (m *DailyRoutineMutation) ResetRoutineActs() {
	m.routine_acts = nil
	m.clearedroutine_acts = false
	m.removedroutine_acts = nil
}

// AddDailyRoutineRecIDs adds the "daily_routine_recs" edge to the DailyRoutineRec entity by ids.
func (m *DailyRoutineMutation) AddDailyRoutineRecIDs(ids ...uint64) {
	if m.daily_routine_recs == nil {
		m.daily_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.daily_routine_recs[ids[i]] = struct{}{}
	}
}

// ClearDailyRoutineRecs clears the "daily_routine_recs" edge to the DailyRoutineRec entity.
func (m *DailyRoutineMutation) ClearDailyRoutineRecs() {
	m.cleareddaily_routine_recs = true
}

// DailyRoutineRecsCleared reports if the "daily_routine_recs" edge to the DailyRoutineRec entity was cleared.
func (m *DailyRoutineMutation) DailyRoutineRecsCleared() bool {
	return m.cleareddaily_routine_recs
}

// RemoveDailyRoutineRecIDs removes the "daily_routine_recs" edge to the DailyRoutineRec entity by IDs.
func (m *DailyRoutineMutation) RemoveDailyRoutineRecIDs(ids ...uint64) {
	if m.removeddaily_routine_recs == nil {
		m.removeddaily_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.daily_routine_recs, ids[i])
		m.removeddaily_routine_recs[ids[i]] = struct{}{}
	}
}

// RemovedDailyRoutineRecs returns the removed IDs of the "daily_routine_recs" edge to the DailyRoutineRec entity.
func (m *DailyRoutineMutation) RemovedDailyRoutineRecsIDs() (ids []uint64) {
	for id := range m.removeddaily_routine_recs {
		ids = append(ids, id)
	}
	return
}

// DailyRoutineRecsIDs returns the "daily_routine_recs" edge IDs in the mutation.
func (m *DailyRoutineMutation) DailyRoutineRecsIDs() (ids []uint64) {
	for id := range m.daily_routine_recs {
		ids = append(ids, id)
	}
	return
}

// ResetDailyRoutineRecs resets all changes to the "daily_routine_recs" edge.
func (m *DailyRoutineMutation) ResetDailyRoutineRecs() {
	m.daily_routine_recs = nil
	m.cleareddaily_routine_recs = false
	m.removeddaily_routine_recs = nil
}

// Where appends a list predicates to the DailyRoutineMutation builder.
func (m *DailyRoutineMutation) Where(ps ...predicate.DailyRoutine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyRoutineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyRoutineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyRoutine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyRoutineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyRoutineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyRoutine).
func (m *DailyRoutineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyRoutineMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.program_id != nil {
		fields = append(fields, dailyroutine.FieldProgramID)
	}
	if m.week_id != nil {
		fields = append(fields, dailyroutine.FieldWeekID)
	}
	if m.day != nil {
		fields = append(fields, dailyroutine.FieldDay)
	}
	if m.created_at != nil {
		fields = append(fields, dailyroutine.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dailyroutine.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyRoutineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailyroutine.FieldProgramID:
		return m.ProgramID()
	case dailyroutine.FieldWeekID:
		return m.WeekID()
	case dailyroutine.FieldDay:
		return m.Day()
	case dailyroutine.FieldCreatedAt:
		return m.CreatedAt()
	case dailyroutine.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyRoutineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailyroutine.FieldProgramID:
		return m.OldProgramID(ctx)
	case dailyroutine.FieldWeekID:
		return m.OldWeekID(ctx)
	case dailyroutine.FieldDay:
		return m.OldDay(ctx)
	case dailyroutine.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dailyroutine.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DailyRoutine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRoutineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailyroutine.FieldProgramID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramID(v)
		return nil
	case dailyroutine.FieldWeekID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeekID(v)
		return nil
	case dailyroutine.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	case dailyroutine.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dailyroutine.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyRoutineMutation) AddedFields() []string {
	var fields []string
	if m.addprogram_id != nil {
		fields = append(fields, dailyroutine.FieldProgramID)
	}
	if m.addweek_id != nil {
		fields = append(fields, dailyroutine.FieldWeekID)
	}
	if m.addday != nil {
		fields = append(fields, dailyroutine.FieldDay)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyRoutineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dailyroutine.FieldProgramID:
		return m.AddedProgramID()
	case dailyroutine.FieldWeekID:
		return m.AddedWeekID()
	case dailyroutine.FieldDay:
		return m.AddedDay()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRoutineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dailyroutine.FieldProgramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgramID(v)
		return nil
	case dailyroutine.FieldWeekID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeekID(v)
		return nil
	case dailyroutine.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyRoutineMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dailyroutine.FieldProgramID) {
		fields = append(fields, dailyroutine.FieldProgramID)
	}
	if m.FieldCleared(dailyroutine.FieldWeekID) {
		fields = append(fields, dailyroutine.FieldWeekID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyRoutineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyRoutineMutation) ClearField(name string) error {
	switch name {
	case dailyroutine.FieldProgramID:
		m.ClearProgramID()
		return nil
	case dailyroutine.FieldWeekID:
		m.ClearWeekID()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyRoutineMutation) ResetField(name string) error {
	switch name {
	case dailyroutine.FieldProgramID:
		m.ResetProgramID()
		return nil
	case dailyroutine.FieldWeekID:
		m.ResetWeekID()
		return nil
	case dailyroutine.FieldDay:
		m.ResetDay()
		return nil
	case dailyroutine.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dailyroutine.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyRoutineMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.program != nil {
		edges = append(edges, dailyroutine.EdgeProgram)
	}
	if m.weekly_routine != nil {
		edges = append(edges, dailyroutine.EdgeWeeklyRoutine)
	}
	if m.routine_acts != nil {
		edges = append(edges, dailyroutine.EdgeRoutineActs)
	}
	if m.daily_routine_recs != nil {
		edges = append(edges, dailyroutine.EdgeDailyRoutineRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyRoutineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailyroutine.EdgeProgram:
		ids := make([]ent.Value, 0, len(m.program))
		for id := range m.program {
			ids = append(ids, id)
		}
		return ids
	case dailyroutine.EdgeWeeklyRoutine:
		ids := make([]ent.Value, 0, len(m.weekly_routine))
		for id := range m.weekly_routine {
			ids = append(ids, id)
		}
		return ids
	case dailyroutine.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.routine_acts))
		for id := range m.routine_acts {
			ids = append(ids, id)
		}
		return ids
	case dailyroutine.EdgeDailyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.daily_routine_recs))
		for id := range m.daily_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyRoutineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedprogram != nil {
		edges = append(edges, dailyroutine.EdgeProgram)
	}
	if m.removedweekly_routine != nil {
		edges = append(edges, dailyroutine.EdgeWeeklyRoutine)
	}
	if m.removedroutine_acts != nil {
		edges = append(edges, dailyroutine.EdgeRoutineActs)
	}
	if m.removeddaily_routine_recs != nil {
		edges = append(edges, dailyroutine.EdgeDailyRoutineRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyRoutineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dailyroutine.EdgeProgram:
		ids := make([]ent.Value, 0, len(m.removedprogram))
		for id := range m.removedprogram {
			ids = append(ids, id)
		}
		return ids
	case dailyroutine.EdgeWeeklyRoutine:
		ids := make([]ent.Value, 0, len(m.removedweekly_routine))
		for id := range m.removedweekly_routine {
			ids = append(ids, id)
		}
		return ids
	case dailyroutine.EdgeRoutineActs:
		ids := make([]ent.Value, 0, len(m.removedroutine_acts))
		for id := range m.removedroutine_acts {
			ids = append(ids, id)
		}
		return ids
	case dailyroutine.EdgeDailyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.removeddaily_routine_recs))
		for id := range m.removeddaily_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyRoutineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedprogram {
		edges = append(edges, dailyroutine.EdgeProgram)
	}
	if m.clearedweekly_routine {
		edges = append(edges, dailyroutine.EdgeWeeklyRoutine)
	}
	if m.clearedroutine_acts {
		edges = append(edges, dailyroutine.EdgeRoutineActs)
	}
	if m.cleareddaily_routine_recs {
		edges = append(edges, dailyroutine.EdgeDailyRoutineRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyRoutineMutation) EdgeCleared(name string) bool {
	switch name {
	case dailyroutine.EdgeProgram:
		return m.clearedprogram
	case dailyroutine.EdgeWeeklyRoutine:
		return m.clearedweekly_routine
	case dailyroutine.EdgeRoutineActs:
		return m.clearedroutine_acts
	case dailyroutine.EdgeDailyRoutineRecs:
		return m.cleareddaily_routine_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyRoutineMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DailyRoutine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyRoutineMutation) ResetEdge(name string) error {
	switch name {
	case dailyroutine.EdgeProgram:
		m.ResetProgram()
		return nil
	case dailyroutine.EdgeWeeklyRoutine:
		m.ResetWeeklyRoutine()
		return nil
	case dailyroutine.EdgeRoutineActs:
		m.ResetRoutineActs()
		return nil
	case dailyroutine.EdgeDailyRoutineRecs:
		m.ResetDailyRoutineRecs()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutine edge %s", name)
}

// DailyRoutineRecMutation represents an operation that mutates the DailyRoutineRec nodes in the graph.
type DailyRoutineRecMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uint64
	author                    *uint64
	addauthor                 *int64
	program_rec_id            *uint64
	addprogram_rec_id         *int64
	weekly_routine_rec_id     *uint64
	addweekly_routine_rec_id  *int64
	daily_routine_id          *uint64
	adddaily_routine_id       *int64
	date                      *time.Time
	status                    *dailyroutinerec.Status
	comment                   *string
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	daily_routine             *uint64
	cleareddaily_routine      bool
	program_rec               *uint64
	clearedprogram_rec        bool
	weekly_routine_rec        *uint64
	clearedweekly_routine_rec bool
	routine_act_recs          map[uint64]struct{}
	removedroutine_act_recs   map[uint64]struct{}
	clearedroutine_act_recs   bool
	done                      bool
	oldValue                  func(context.Context) (*DailyRoutineRec, error)
	predicates                []predicate.DailyRoutineRec
}

var _ ent.Mutation = (*DailyRoutineRecMutation)(nil)

// dailyroutinerecOption allows management of the mutation configuration using functional options.
type dailyroutinerecOption func(*DailyRoutineRecMutation)

// newDailyRoutineRecMutation creates new mutation for the DailyRoutineRec entity.
func newDailyRoutineRecMutation(c config, op Op, opts ...dailyroutinerecOption) *DailyRoutineRecMutation {
	m := &DailyRoutineRecMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyRoutineRec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyRoutineRecID sets the ID field of the mutation.
func withDailyRoutineRecID(id uint64) dailyroutinerecOption {
	return func(m *DailyRoutineRecMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyRoutineRec
		)
		m.oldValue = func(ctx context.Context) (*DailyRoutineRec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyRoutineRec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyRoutineRec sets the old DailyRoutineRec of the mutation.
func withDailyRoutineRec(node *DailyRoutineRec) dailyroutinerecOption {
	return func(m *DailyRoutineRecMutation) {
		m.oldValue = func(context.Context) (*DailyRoutineRec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyRoutineRecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyRoutineRecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyRoutineRec entities.
func (m *DailyRoutineRecMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyRoutineRecMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyRoutineRecMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyRoutineRec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAuthor sets the "author" field.
func (m *DailyRoutineRecMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *DailyRoutineRecMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *DailyRoutineRecMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *DailyRoutineRecMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *DailyRoutineRecMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetProgramRecID sets the "program_rec_id" field.
func (m *DailyRoutineRecMutation) SetProgramRecID(u uint64) {
	m.program_rec_id = &u
	m.addprogram_rec_id = nil
}

// ProgramRecID returns the value of the "program_rec_id" field in the mutation.
func (m *DailyRoutineRecMutation) ProgramRecID() (r uint64, exists bool) {
	v := m.program_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramRecID returns the old "program_rec_id" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldProgramRecID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramRecID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramRecID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramRecID: %w", err)
	}
	return oldValue.ProgramRecID, nil
}

// AddProgramRecID adds u to the "program_rec_id" field.
func (m *DailyRoutineRecMutation) AddProgramRecID(u int64) {
	if m.addprogram_rec_id != nil {
		*m.addprogram_rec_id += u
	} else {
		m.addprogram_rec_id = &u
	}
}

// AddedProgramRecID returns the value that was added to the "program_rec_id" field in this mutation.
func (m *DailyRoutineRecMutation) AddedProgramRecID() (r int64, exists bool) {
	v := m.addprogram_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (m *DailyRoutineRecMutation) ClearProgramRecID() {
	m.program_rec_id = nil
	m.addprogram_rec_id = nil
	m.clearedFields[dailyroutinerec.FieldProgramRecID] = struct{}{}
}

// ProgramRecIDCleared returns if the "program_rec_id" field was cleared in this mutation.
func (m *DailyRoutineRecMutation) ProgramRecIDCleared() bool {
	_, ok := m.clearedFields[dailyroutinerec.FieldProgramRecID]
	return ok
}

// ResetProgramRecID resets all changes to the "program_rec_id" field.
func (m *DailyRoutineRecMutation) ResetProgramRecID() {
	m.program_rec_id = nil
	m.addprogram_rec_id = nil
	delete(m.clearedFields, dailyroutinerec.FieldProgramRecID)
}

// SetWeeklyRoutineRecID sets the "weekly_routine_rec_id" field.
func (m *DailyRoutineRecMutation) SetWeeklyRoutineRecID(u uint64) {
	m.weekly_routine_rec_id = &u
	m.addweekly_routine_rec_id = nil
}

// WeeklyRoutineRecID returns the value of the "weekly_routine_rec_id" field in the mutation.
func (m *DailyRoutineRecMutation) WeeklyRoutineRecID() (r uint64, exists bool) {
	v := m.weekly_routine_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWeeklyRoutineRecID returns the old "weekly_routine_rec_id" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldWeeklyRoutineRecID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeeklyRoutineRecID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeeklyRoutineRecID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeeklyRoutineRecID: %w", err)
	}
	return oldValue.WeeklyRoutineRecID, nil
}

// AddWeeklyRoutineRecID adds u to the "weekly_routine_rec_id" field.
func (m *DailyRoutineRecMutation) AddWeeklyRoutineRecID(u int64) {
	if m.addweekly_routine_rec_id != nil {
		*m.addweekly_routine_rec_id += u
	} else {
		m.addweekly_routine_rec_id = &u
	}
}

// AddedWeeklyRoutineRecID returns the value that was added to the "weekly_routine_rec_id" field in this mutation.
func (m *DailyRoutineRecMutation) AddedWeeklyRoutineRecID() (r int64, exists bool) {
	v := m.addweekly_routine_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeeklyRoutineRecID clears the value of the "weekly_routine_rec_id" field.
func (m *DailyRoutineRecMutation) ClearWeeklyRoutineRecID() {
	m.weekly_routine_rec_id = nil
	m.addweekly_routine_rec_id = nil
	m.clearedFields[dailyroutinerec.FieldWeeklyRoutineRecID] = struct{}{}
}

// WeeklyRoutineRecIDCleared returns if the "weekly_routine_rec_id" field was cleared in this mutation.
func (m *DailyRoutineRecMutation) WeeklyRoutineRecIDCleared() bool {
	_, ok := m.clearedFields[dailyroutinerec.FieldWeeklyRoutineRecID]
	return ok
}

// ResetWeeklyRoutineRecID resets all changes to the "weekly_routine_rec_id" field.
func (m *DailyRoutineRecMutation) ResetWeeklyRoutineRecID() {
	m.weekly_routine_rec_id = nil
	m.addweekly_routine_rec_id = nil
	delete(m.clearedFields, dailyroutinerec.FieldWeeklyRoutineRecID)
}

// SetDailyRoutineID sets the "daily_routine_id" field.
func (m *DailyRoutineRecMutation) SetDailyRoutineID(u uint64) {
	m.daily_routine_id = &u
	m.adddaily_routine_id = nil
}

// DailyRoutineID returns the value of the "daily_routine_id" field in the mutation.
func (m *DailyRoutineRecMutation) DailyRoutineID() (r uint64, exists bool) {
	v := m.daily_routine_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyRoutineID returns the old "daily_routine_id" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldDailyRoutineID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyRoutineID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyRoutineID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyRoutineID: %w", err)
	}
	return oldValue.DailyRoutineID, nil
}

// AddDailyRoutineID adds u to the "daily_routine_id" field.
func (m *DailyRoutineRecMutation) AddDailyRoutineID(u int64) {
	if m.adddaily_routine_id != nil {
		*m.adddaily_routine_id += u
	} else {
		m.adddaily_routine_id = &u
	}
}

// AddedDailyRoutineID returns the value that was added to the "daily_routine_id" field in this mutation.
func (m *DailyRoutineRecMutation) AddedDailyRoutineID() (r int64, exists bool) {
	v := m.adddaily_routine_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDailyRoutineID clears the value of the "daily_routine_id" field.
func (m *DailyRoutineRecMutation) ClearDailyRoutineID() {
	m.daily_routine_id = nil
	m.adddaily_routine_id = nil
	m.clearedFields[dailyroutinerec.FieldDailyRoutineID] = struct{}{}
}

// DailyRoutineIDCleared returns if the "daily_routine_id" field was cleared in this mutation.
func (m *DailyRoutineRecMutation) DailyRoutineIDCleared() bool {
	_, ok := m.clearedFields[dailyroutinerec.FieldDailyRoutineID]
	return ok
}

// ResetDailyRoutineID resets all changes to the "daily_routine_id" field.
func (m *DailyRoutineRecMutation) ResetDailyRoutineID() {
	m.daily_routine_id = nil
	m.adddaily_routine_id = nil
	delete(m.clearedFields, dailyroutinerec.FieldDailyRoutineID)
}

// SetDate sets the "date" field.
func (m *DailyRoutineRecMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DailyRoutineRecMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DailyRoutineRecMutation) ResetDate() {
	m.date = nil
}

// SetStatus sets the "status" field.
func (m *DailyRoutineRecMutation) SetStatus(d dailyroutinerec.Status) {
	m.status = &d
}

// Status returns the value of the "status" field in the mutation.
func (m *DailyRoutineRecMutation) Status() (r dailyroutinerec.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldStatus(ctx context.Context) (v dailyroutinerec.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DailyRoutineRecMutation) ResetStatus() {
	m.status = nil
}

// SetComment sets the "comment" field.
func (m *DailyRoutineRecMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *DailyRoutineRecMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *DailyRoutineRecMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[dailyroutinerec.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *DailyRoutineRecMutation) CommentCleared() bool {
	_, ok := m.clearedFields[dailyroutinerec.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *DailyRoutineRecMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, dailyroutinerec.FieldComment)
}

// SetCreatedAt sets the "created_at" field.
func (m *DailyRoutineRecMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DailyRoutineRecMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DailyRoutineRecMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DailyRoutineRecMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DailyRoutineRecMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DailyRoutineRec entity.
// If the DailyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyRoutineRecMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DailyRoutineRecMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDailyRoutineID sets the "daily_routine" edge to the DailyRoutine entity by id.
func (m *DailyRoutineRecMutation) SetDailyRoutineID(id uint64) {
	m.daily_routine = &id
}

// ClearDailyRoutine clears the "daily_routine" edge to the DailyRoutine entity.
func (m *DailyRoutineRecMutation) ClearDailyRoutine() {
	m.cleareddaily_routine = true
}

// DailyRoutineCleared reports if the "daily_routine" edge to the DailyRoutine entity was cleared.
func (m *DailyRoutineRecMutation) DailyRoutineCleared() bool {
	return m.cleareddaily_routine
}

// DailyRoutineID returns the "daily_routine" edge ID in the mutation.
func (m *DailyRoutineRecMutation) DailyRoutineID() (id uint64, exists bool) {
	if m.daily_routine != nil {
		return *m.daily_routine, true
	}
	return
}

// DailyRoutineIDs returns the "daily_routine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DailyRoutineID instead. It exists only for internal usage by the builders.
func (m *DailyRoutineRecMutation) DailyRoutineIDs() (ids []uint64) {
	if id := m.daily_routine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDailyRoutine resets all changes to the "daily_routine" edge.
func (m *DailyRoutineRecMutation) ResetDailyRoutine() {
	m.daily_routine = nil
	m.cleareddaily_routine = false
}

// SetProgramRecID sets the "program_rec" edge to the ProgramRec entity by id.
func (m *DailyRoutineRecMutation) SetProgramRecID(id uint64) {
	m.program_rec = &id
}

// ClearProgramRec clears the "program_rec" edge to the ProgramRec entity.
func (m *DailyRoutineRecMutation) ClearProgramRec() {
	m.clearedprogram_rec = true
}

// ProgramRecCleared reports if the "program_rec" edge to the ProgramRec entity was cleared.
func (m *DailyRoutineRecMutation) ProgramRecCleared() bool {
	return m.clearedprogram_rec
}

// ProgramRecID returns the "program_rec" edge ID in the mutation.
func (m *DailyRoutineRecMutation) ProgramRecID() (id uint64, exists bool) {
	if m.program_rec != nil {
		return *m.program_rec, true
	}
	return
}

// ProgramRecIDs returns the "program_rec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramRecID instead. It exists only for internal usage by the builders.
func (m *DailyRoutineRecMutation) ProgramRecIDs() (ids []uint64) {
	if id := m.program_rec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgramRec resets all changes to the "program_rec" edge.
func (m *DailyRoutineRecMutation) ResetProgramRec() {
	m.program_rec = nil
	m.clearedprogram_rec = false
}

// SetWeeklyRoutineRecID sets the "weekly_routine_rec" edge to the WeeklyRoutineRec entity by id.
func (m *DailyRoutineRecMutation) SetWeeklyRoutineRecID(id uint64) {
	m.weekly_routine_rec = &id
}

// ClearWeeklyRoutineRec clears the "weekly_routine_rec" edge to the WeeklyRoutineRec entity.
func (m *DailyRoutineRecMutation) ClearWeeklyRoutineRec() {
	m.clearedweekly_routine_rec = true
}

// WeeklyRoutineRecCleared reports if the "weekly_routine_rec" edge to the WeeklyRoutineRec entity was cleared.
func (m *DailyRoutineRecMutation) WeeklyRoutineRecCleared() bool {
	return m.clearedweekly_routine_rec
}

// WeeklyRoutineRecID returns the "weekly_routine_rec" edge ID in the mutation.
func (m *DailyRoutineRecMutation) WeeklyRoutineRecID() (id uint64, exists bool) {
	if m.weekly_routine_rec != nil {
		return *m.weekly_routine_rec, true
	}
	return
}

// WeeklyRoutineRecIDs returns the "weekly_routine_rec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WeeklyRoutineRecID instead. It exists only for internal usage by the builders.
func (m *DailyRoutineRecMutation) WeeklyRoutineRecIDs() (ids []uint64) {
	if id := m.weekly_routine_rec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWeeklyRoutineRec resets all changes to the "weekly_routine_rec" edge.
func (m *DailyRoutineRecMutation) ResetWeeklyRoutineRec() {
	m.weekly_routine_rec = nil
	m.clearedweekly_routine_rec = false
}

// AddRoutineActRecIDs adds the "routine_act_recs" edge to the RoutineActRec entity by ids.
func (m *DailyRoutineRecMutation) AddRoutineActRecIDs(ids ...uint64) {
	if m.routine_act_recs == nil {
		m.routine_act_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.routine_act_recs[ids[i]] = struct{}{}
	}
}

// ClearRoutineActRecs clears the "routine_act_recs" edge to the RoutineActRec entity.
func (m *DailyRoutineRecMutation) ClearRoutineActRecs() {
	m.clearedroutine_act_recs = true
}

// RoutineActRecsCleared reports if the "routine_act_recs" edge to the RoutineActRec entity was cleared.
func (m *DailyRoutineRecMutation) RoutineActRecsCleared() bool {
	return m.clearedroutine_act_recs
}

// RemoveRoutineActRecIDs removes the "routine_act_recs" edge to the RoutineActRec entity by IDs.
func (m *DailyRoutineRecMutation) RemoveRoutineActRecIDs(ids ...uint64) {
	if m.removedroutine_act_recs == nil {
		m.removedroutine_act_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.routine_act_recs, ids[i])
		m.removedroutine_act_recs[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActRecs returns the removed IDs of the "routine_act_recs" edge to the RoutineActRec entity.
func (m *DailyRoutineRecMutation) RemovedRoutineActRecsIDs() (ids []uint64) {
	for id := range m.removedroutine_act_recs {
		ids = append(ids, id)
	}
	return
}

// RoutineActRecsIDs returns the "routine_act_recs" edge IDs in the mutation.
func (m *DailyRoutineRecMutation) RoutineActRecsIDs() (ids []uint64) {
	for id := range m.routine_act_recs {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActRecs resets all changes to the "routine_act_recs" edge.
func (m *DailyRoutineRecMutation) ResetRoutineActRecs() {
	m.routine_act_recs = nil
	m.clearedroutine_act_recs = false
	m.removedroutine_act_recs = nil
}

// Where appends a list predicates to the DailyRoutineRecMutation builder.
func (m *DailyRoutineRecMutation) Where(ps ...predicate.DailyRoutineRec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyRoutineRecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyRoutineRecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyRoutineRec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyRoutineRecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyRoutineRecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyRoutineRec).
func (m *DailyRoutineRecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyRoutineRecMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.author != nil {
		fields = append(fields, dailyroutinerec.FieldAuthor)
	}
	if m.program_rec_id != nil {
		fields = append(fields, dailyroutinerec.FieldProgramRecID)
	}
	if m.weekly_routine_rec_id != nil {
		fields = append(fields, dailyroutinerec.FieldWeeklyRoutineRecID)
	}
	if m.daily_routine_id != nil {
		fields = append(fields, dailyroutinerec.FieldDailyRoutineID)
	}
	if m.date != nil {
		fields = append(fields, dailyroutinerec.FieldDate)
	}
	if m.status != nil {
		fields = append(fields, dailyroutinerec.FieldStatus)
	}
	if m.comment != nil {
		fields = append(fields, dailyroutinerec.FieldComment)
	}
	if m.created_at != nil {
		fields = append(fields, dailyroutinerec.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dailyroutinerec.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyRoutineRecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailyroutinerec.FieldAuthor:
		return m.Author()
	case dailyroutinerec.FieldProgramRecID:
		return m.ProgramRecID()
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		return m.WeeklyRoutineRecID()
	case dailyroutinerec.FieldDailyRoutineID:
		return m.DailyRoutineID()
	case dailyroutinerec.FieldDate:
		return m.Date()
	case dailyroutinerec.FieldStatus:
		return m.Status()
	case dailyroutinerec.FieldComment:
		return m.Comment()
	case dailyroutinerec.FieldCreatedAt:
		return m.CreatedAt()
	case dailyroutinerec.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyRoutineRecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailyroutinerec.FieldAuthor:
		return m.OldAuthor(ctx)
	case dailyroutinerec.FieldProgramRecID:
		return m.OldProgramRecID(ctx)
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		return m.OldWeeklyRoutineRecID(ctx)
	case dailyroutinerec.FieldDailyRoutineID:
		return m.OldDailyRoutineID(ctx)
	case dailyroutinerec.FieldDate:
		return m.OldDate(ctx)
	case dailyroutinerec.FieldStatus:
		return m.OldStatus(ctx)
	case dailyroutinerec.FieldComment:
		return m.OldComment(ctx)
	case dailyroutinerec.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dailyroutinerec.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DailyRoutineRec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRoutineRecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailyroutinerec.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case dailyroutinerec.FieldProgramRecID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramRecID(v)
		return nil
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeeklyRoutineRecID(v)
		return nil
	case dailyroutinerec.FieldDailyRoutineID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyRoutineID(v)
		return nil
	case dailyroutinerec.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case dailyroutinerec.FieldStatus:
		v, ok := value.(dailyroutinerec.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case dailyroutinerec.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case dailyroutinerec.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dailyroutinerec.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRoutineRec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyRoutineRecMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, dailyroutinerec.FieldAuthor)
	}
	if m.addprogram_rec_id != nil {
		fields = append(fields, dailyroutinerec.FieldProgramRecID)
	}
	if m.addweekly_routine_rec_id != nil {
		fields = append(fields, dailyroutinerec.FieldWeeklyRoutineRecID)
	}
	if m.adddaily_routine_id != nil {
		fields = append(fields, dailyroutinerec.FieldDailyRoutineID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyRoutineRecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dailyroutinerec.FieldAuthor:
		return m.AddedAuthor()
	case dailyroutinerec.FieldProgramRecID:
		return m.AddedProgramRecID()
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		return m.AddedWeeklyRoutineRecID()
	case dailyroutinerec.FieldDailyRoutineID:
		return m.AddedDailyRoutineID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyRoutineRecMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dailyroutinerec.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	case dailyroutinerec.FieldProgramRecID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgramRecID(v)
		return nil
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeeklyRoutineRecID(v)
		return nil
	case dailyroutinerec.FieldDailyRoutineID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDailyRoutineID(v)
		return nil
	}
	return fmt.Errorf("unknown DailyRoutineRec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyRoutineRecMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dailyroutinerec.FieldProgramRecID) {
		fields = append(fields, dailyroutinerec.FieldProgramRecID)
	}
	if m.FieldCleared(dailyroutinerec.FieldWeeklyRoutineRecID) {
		fields = append(fields, dailyroutinerec.FieldWeeklyRoutineRecID)
	}
	if m.FieldCleared(dailyroutinerec.FieldDailyRoutineID) {
		fields = append(fields, dailyroutinerec.FieldDailyRoutineID)
	}
	if m.FieldCleared(dailyroutinerec.FieldComment) {
		fields = append(fields, dailyroutinerec.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyRoutineRecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyRoutineRecMutation) ClearField(name string) error {
	switch name {
	case dailyroutinerec.FieldProgramRecID:
		m.ClearProgramRecID()
		return nil
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		m.ClearWeeklyRoutineRecID()
		return nil
	case dailyroutinerec.FieldDailyRoutineID:
		m.ClearDailyRoutineID()
		return nil
	case dailyroutinerec.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutineRec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyRoutineRecMutation) ResetField(name string) error {
	switch name {
	case dailyroutinerec.FieldAuthor:
		m.ResetAuthor()
		return nil
	case dailyroutinerec.FieldProgramRecID:
		m.ResetProgramRecID()
		return nil
	case dailyroutinerec.FieldWeeklyRoutineRecID:
		m.ResetWeeklyRoutineRecID()
		return nil
	case dailyroutinerec.FieldDailyRoutineID:
		m.ResetDailyRoutineID()
		return nil
	case dailyroutinerec.FieldDate:
		m.ResetDate()
		return nil
	case dailyroutinerec.FieldStatus:
		m.ResetStatus()
		return nil
	case dailyroutinerec.FieldComment:
		m.ResetComment()
		return nil
	case dailyroutinerec.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dailyroutinerec.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutineRec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyRoutineRecMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.daily_routine != nil {
		edges = append(edges, dailyroutinerec.EdgeDailyRoutine)
	}
	if m.program_rec != nil {
		edges = append(edges, dailyroutinerec.EdgeProgramRec)
	}
	if m.weekly_routine_rec != nil {
		edges = append(edges, dailyroutinerec.EdgeWeeklyRoutineRec)
	}
	if m.routine_act_recs != nil {
		edges = append(edges, dailyroutinerec.EdgeRoutineActRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyRoutineRecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailyroutinerec.EdgeDailyRoutine:
		if id := m.daily_routine; id != nil {
			return []ent.Value{*id}
		}
	case dailyroutinerec.EdgeProgramRec:
		if id := m.program_rec; id != nil {
			return []ent.Value{*id}
		}
	case dailyroutinerec.EdgeWeeklyRoutineRec:
		if id := m.weekly_routine_rec; id != nil {
			return []ent.Value{*id}
		}
	case dailyroutinerec.EdgeRoutineActRecs:
		ids := make([]ent.Value, 0, len(m.routine_act_recs))
		for id := range m.routine_act_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyRoutineRecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedroutine_act_recs != nil {
		edges = append(edges, dailyroutinerec.EdgeRoutineActRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyRoutineRecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dailyroutinerec.EdgeRoutineActRecs:
		ids := make([]ent.Value, 0, len(m.removedroutine_act_recs))
		for id := range m.removedroutine_act_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyRoutineRecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddaily_routine {
		edges = append(edges, dailyroutinerec.EdgeDailyRoutine)
	}
	if m.clearedprogram_rec {
		edges = append(edges, dailyroutinerec.EdgeProgramRec)
	}
	if m.clearedweekly_routine_rec {
		edges = append(edges, dailyroutinerec.EdgeWeeklyRoutineRec)
	}
	if m.clearedroutine_act_recs {
		edges = append(edges, dailyroutinerec.EdgeRoutineActRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyRoutineRecMutation) EdgeCleared(name string) bool {
	switch name {
	case dailyroutinerec.EdgeDailyRoutine:
		return m.cleareddaily_routine
	case dailyroutinerec.EdgeProgramRec:
		return m.clearedprogram_rec
	case dailyroutinerec.EdgeWeeklyRoutineRec:
		return m.clearedweekly_routine_rec
	case dailyroutinerec.EdgeRoutineActRecs:
		return m.clearedroutine_act_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyRoutineRecMutation) ClearEdge(name string) error {
	switch name {
	case dailyroutinerec.EdgeDailyRoutine:
		m.ClearDailyRoutine()
		return nil
	case dailyroutinerec.EdgeProgramRec:
		m.ClearProgramRec()
		return nil
	case dailyroutinerec.EdgeWeeklyRoutineRec:
		m.ClearWeeklyRoutineRec()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutineRec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyRoutineRecMutation) ResetEdge(name string) error {
	switch name {
	case dailyroutinerec.EdgeDailyRoutine:
		m.ResetDailyRoutine()
		return nil
	case dailyroutinerec.EdgeProgramRec:
		m.ResetProgramRec()
		return nil
	case dailyroutinerec.EdgeWeeklyRoutineRec:
		m.ResetWeeklyRoutineRec()
		return nil
	case dailyroutinerec.EdgeRoutineActRecs:
		m.ResetRoutineActRecs()
		return nil
	}
	return fmt.Errorf("unknown DailyRoutineRec edge %s", name)
}

// ProgramMutation represents an operation that mutates the Program nodes in the graph.
type ProgramMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	title                  *string
	_type                  *program.Type
	author                 *uint64
	addauthor              *int64
	image                  *string
	description            *string
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	tags                   map[uint64]struct{}
	removedtags            map[uint64]struct{}
	clearedtags            bool
	weekly_routines        map[uint64]struct{}
	removedweekly_routines map[uint64]struct{}
	clearedweekly_routines bool
	daily_routines         map[uint64]struct{}
	removeddaily_routines  map[uint64]struct{}
	cleareddaily_routines  bool
	program_recs           map[uint64]struct{}
	removedprogram_recs    map[uint64]struct{}
	clearedprogram_recs    bool
	done                   bool
	oldValue               func(context.Context) (*Program, error)
	predicates             []predicate.Program
}

var _ ent.Mutation = (*ProgramMutation)(nil)

// programOption allows management of the mutation configuration using functional options.
type programOption func(*ProgramMutation)

// newProgramMutation creates new mutation for the Program entity.
func newProgramMutation(c config, op Op, opts ...programOption) *ProgramMutation {
	m := &ProgramMutation{
		config:        c,
		op:            op,
		typ:           TypeProgram,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgramID sets the ID field of the mutation.
func withProgramID(id uint64) programOption {
	return func(m *ProgramMutation) {
		var (
			err   error
			once  sync.Once
			value *Program
		)
		m.oldValue = func(ctx context.Context) (*Program, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Program.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgram sets the old Program of the mutation.
func withProgram(node *Program) programOption {
	return func(m *ProgramMutation) {
		m.oldValue = func(context.Context) (*Program, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgramMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgramMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Program entities.
func (m *ProgramMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgramMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgramMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Program.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ProgramMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProgramMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProgramMutation) ResetTitle() {
	m.title = nil
}

// SetType sets the "type" field.
func (m *ProgramMutation) SetType(pr program.Type) {
	m._type = &pr
}

// GetType returns the value of the "type" field in the mutation.
func (m *ProgramMutation) GetType() (r program.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldType(ctx context.Context) (v program.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ProgramMutation) ResetType() {
	m._type = nil
}

// SetAuthor sets the "author" field.
func (m *ProgramMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ProgramMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *ProgramMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ProgramMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ProgramMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetImage sets the "image" field.
func (m *ProgramMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ProgramMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldImage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *ProgramMutation) ClearImage() {
	m.image = nil
	m.clearedFields[program.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *ProgramMutation) ImageCleared() bool {
	_, ok := m.clearedFields[program.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *ProgramMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, program.FieldImage)
}

// SetDescription sets the "description" field.
func (m *ProgramMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProgramMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProgramMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[program.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProgramMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[program.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProgramMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, program.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProgramMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProgramMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProgramMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProgramMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProgramMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Program entity.
// If the Program object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProgramMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *ProgramMutation) AddTagIDs(ids ...uint64) {
	if m.tags == nil {
		m.tags = make(map[uint64]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *ProgramMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *ProgramMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *ProgramMutation) RemoveTagIDs(ids ...uint64) {
	if m.removedtags == nil {
		m.removedtags = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *ProgramMutation) RemovedTagsIDs() (ids []uint64) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ProgramMutation) TagsIDs() (ids []uint64) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ProgramMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddWeeklyRoutineIDs adds the "weekly_routines" edge to the WeeklyRoutine entity by ids.
func (m *ProgramMutation) AddWeeklyRoutineIDs(ids ...uint64) {
	if m.weekly_routines == nil {
		m.weekly_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		m.weekly_routines[ids[i]] = struct{}{}
	}
}

// ClearWeeklyRoutines clears the "weekly_routines" edge to the WeeklyRoutine entity.
func (m *ProgramMutation) ClearWeeklyRoutines() {
	m.clearedweekly_routines = true
}

// WeeklyRoutinesCleared reports if the "weekly_routines" edge to the WeeklyRoutine entity was cleared.
func (m *ProgramMutation) WeeklyRoutinesCleared() bool {
	return m.clearedweekly_routines
}

// RemoveWeeklyRoutineIDs removes the "weekly_routines" edge to the WeeklyRoutine entity by IDs.
func (m *ProgramMutation) RemoveWeeklyRoutineIDs(ids ...uint64) {
	if m.removedweekly_routines == nil {
		m.removedweekly_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.weekly_routines, ids[i])
		m.removedweekly_routines[ids[i]] = struct{}{}
	}
}

// RemovedWeeklyRoutines returns the removed IDs of the "weekly_routines" edge to the WeeklyRoutine entity.
func (m *ProgramMutation) RemovedWeeklyRoutinesIDs() (ids []uint64) {
	for id := range m.removedweekly_routines {
		ids = append(ids, id)
	}
	return
}

// WeeklyRoutinesIDs returns the "weekly_routines" edge IDs in the mutation.
func (m *ProgramMutation) WeeklyRoutinesIDs() (ids []uint64) {
	for id := range m.weekly_routines {
		ids = append(ids, id)
	}
	return
}

// ResetWeeklyRoutines resets all changes to the "weekly_routines" edge.
func (m *ProgramMutation) ResetWeeklyRoutines() {
	m.weekly_routines = nil
	m.clearedweekly_routines = false
	m.removedweekly_routines = nil
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by ids.
func (m *ProgramMutation) AddDailyRoutineIDs(ids ...uint64) {
	if m.daily_routines == nil {
		m.daily_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		m.daily_routines[ids[i]] = struct{}{}
	}
}

// ClearDailyRoutines clears the "daily_routines" edge to the DailyRoutine entity.
func (m *ProgramMutation) ClearDailyRoutines() {
	m.cleareddaily_routines = true
}

// DailyRoutinesCleared reports if the "daily_routines" edge to the DailyRoutine entity was cleared.
func (m *ProgramMutation) DailyRoutinesCleared() bool {
	return m.cleareddaily_routines
}

// RemoveDailyRoutineIDs removes the "daily_routines" edge to the DailyRoutine entity by IDs.
func (m *ProgramMutation) RemoveDailyRoutineIDs(ids ...uint64) {
	if m.removeddaily_routines == nil {
		m.removeddaily_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.daily_routines, ids[i])
		m.removeddaily_routines[ids[i]] = struct{}{}
	}
}

// RemovedDailyRoutines returns the removed IDs of the "daily_routines" edge to the DailyRoutine entity.
func (m *ProgramMutation) RemovedDailyRoutinesIDs() (ids []uint64) {
	for id := range m.removeddaily_routines {
		ids = append(ids, id)
	}
	return
}

// DailyRoutinesIDs returns the "daily_routines" edge IDs in the mutation.
func (m *ProgramMutation) DailyRoutinesIDs() (ids []uint64) {
	for id := range m.daily_routines {
		ids = append(ids, id)
	}
	return
}

// ResetDailyRoutines resets all changes to the "daily_routines" edge.
func (m *ProgramMutation) ResetDailyRoutines() {
	m.daily_routines = nil
	m.cleareddaily_routines = false
	m.removeddaily_routines = nil
}

// AddProgramRecIDs adds the "program_recs" edge to the ProgramRec entity by ids.
func (m *ProgramMutation) AddProgramRecIDs(ids ...uint64) {
	if m.program_recs == nil {
		m.program_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.program_recs[ids[i]] = struct{}{}
	}
}

// ClearProgramRecs clears the "program_recs" edge to the ProgramRec entity.
func (m *ProgramMutation) ClearProgramRecs() {
	m.clearedprogram_recs = true
}

// ProgramRecsCleared reports if the "program_recs" edge to the ProgramRec entity was cleared.
func (m *ProgramMutation) ProgramRecsCleared() bool {
	return m.clearedprogram_recs
}

// RemoveProgramRecIDs removes the "program_recs" edge to the ProgramRec entity by IDs.
func (m *ProgramMutation) RemoveProgramRecIDs(ids ...uint64) {
	if m.removedprogram_recs == nil {
		m.removedprogram_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.program_recs, ids[i])
		m.removedprogram_recs[ids[i]] = struct{}{}
	}
}

// RemovedProgramRecs returns the removed IDs of the "program_recs" edge to the ProgramRec entity.
func (m *ProgramMutation) RemovedProgramRecsIDs() (ids []uint64) {
	for id := range m.removedprogram_recs {
		ids = append(ids, id)
	}
	return
}

// ProgramRecsIDs returns the "program_recs" edge IDs in the mutation.
func (m *ProgramMutation) ProgramRecsIDs() (ids []uint64) {
	for id := range m.program_recs {
		ids = append(ids, id)
	}
	return
}

// ResetProgramRecs resets all changes to the "program_recs" edge.
func (m *ProgramMutation) ResetProgramRecs() {
	m.program_recs = nil
	m.clearedprogram_recs = false
	m.removedprogram_recs = nil
}

// Where appends a list predicates to the ProgramMutation builder.
func (m *ProgramMutation) Where(ps ...predicate.Program) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProgramMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProgramMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Program, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProgramMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProgramMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Program).
func (m *ProgramMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgramMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.title != nil {
		fields = append(fields, program.FieldTitle)
	}
	if m._type != nil {
		fields = append(fields, program.FieldType)
	}
	if m.author != nil {
		fields = append(fields, program.FieldAuthor)
	}
	if m.image != nil {
		fields = append(fields, program.FieldImage)
	}
	if m.description != nil {
		fields = append(fields, program.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, program.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, program.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgramMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case program.FieldTitle:
		return m.Title()
	case program.FieldType:
		return m.GetType()
	case program.FieldAuthor:
		return m.Author()
	case program.FieldImage:
		return m.Image()
	case program.FieldDescription:
		return m.Description()
	case program.FieldCreatedAt:
		return m.CreatedAt()
	case program.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgramMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case program.FieldTitle:
		return m.OldTitle(ctx)
	case program.FieldType:
		return m.OldType(ctx)
	case program.FieldAuthor:
		return m.OldAuthor(ctx)
	case program.FieldImage:
		return m.OldImage(ctx)
	case program.FieldDescription:
		return m.OldDescription(ctx)
	case program.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case program.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Program field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramMutation) SetField(name string, value ent.Value) error {
	switch name {
	case program.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case program.FieldType:
		v, ok := value.(program.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case program.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case program.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case program.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case program.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case program.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Program field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgramMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, program.FieldAuthor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgramMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case program.FieldAuthor:
		return m.AddedAuthor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramMutation) AddField(name string, value ent.Value) error {
	switch name {
	case program.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	}
	return fmt.Errorf("unknown Program numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgramMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(program.FieldImage) {
		fields = append(fields, program.FieldImage)
	}
	if m.FieldCleared(program.FieldDescription) {
		fields = append(fields, program.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgramMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgramMutation) ClearField(name string) error {
	switch name {
	case program.FieldImage:
		m.ClearImage()
		return nil
	case program.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Program nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgramMutation) ResetField(name string) error {
	switch name {
	case program.FieldTitle:
		m.ResetTitle()
		return nil
	case program.FieldType:
		m.ResetType()
		return nil
	case program.FieldAuthor:
		m.ResetAuthor()
		return nil
	case program.FieldImage:
		m.ResetImage()
		return nil
	case program.FieldDescription:
		m.ResetDescription()
		return nil
	case program.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case program.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Program field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgramMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.tags != nil {
		edges = append(edges, program.EdgeTags)
	}
	if m.weekly_routines != nil {
		edges = append(edges, program.EdgeWeeklyRoutines)
	}
	if m.daily_routines != nil {
		edges = append(edges, program.EdgeDailyRoutines)
	}
	if m.program_recs != nil {
		edges = append(edges, program.EdgeProgramRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgramMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case program.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case program.EdgeWeeklyRoutines:
		ids := make([]ent.Value, 0, len(m.weekly_routines))
		for id := range m.weekly_routines {
			ids = append(ids, id)
		}
		return ids
	case program.EdgeDailyRoutines:
		ids := make([]ent.Value, 0, len(m.daily_routines))
		for id := range m.daily_routines {
			ids = append(ids, id)
		}
		return ids
	case program.EdgeProgramRecs:
		ids := make([]ent.Value, 0, len(m.program_recs))
		for id := range m.program_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgramMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtags != nil {
		edges = append(edges, program.EdgeTags)
	}
	if m.removedweekly_routines != nil {
		edges = append(edges, program.EdgeWeeklyRoutines)
	}
	if m.removeddaily_routines != nil {
		edges = append(edges, program.EdgeDailyRoutines)
	}
	if m.removedprogram_recs != nil {
		edges = append(edges, program.EdgeProgramRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgramMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case program.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case program.EdgeWeeklyRoutines:
		ids := make([]ent.Value, 0, len(m.removedweekly_routines))
		for id := range m.removedweekly_routines {
			ids = append(ids, id)
		}
		return ids
	case program.EdgeDailyRoutines:
		ids := make([]ent.Value, 0, len(m.removeddaily_routines))
		for id := range m.removeddaily_routines {
			ids = append(ids, id)
		}
		return ids
	case program.EdgeProgramRecs:
		ids := make([]ent.Value, 0, len(m.removedprogram_recs))
		for id := range m.removedprogram_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgramMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtags {
		edges = append(edges, program.EdgeTags)
	}
	if m.clearedweekly_routines {
		edges = append(edges, program.EdgeWeeklyRoutines)
	}
	if m.cleareddaily_routines {
		edges = append(edges, program.EdgeDailyRoutines)
	}
	if m.clearedprogram_recs {
		edges = append(edges, program.EdgeProgramRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgramMutation) EdgeCleared(name string) bool {
	switch name {
	case program.EdgeTags:
		return m.clearedtags
	case program.EdgeWeeklyRoutines:
		return m.clearedweekly_routines
	case program.EdgeDailyRoutines:
		return m.cleareddaily_routines
	case program.EdgeProgramRecs:
		return m.clearedprogram_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgramMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Program unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgramMutation) ResetEdge(name string) error {
	switch name {
	case program.EdgeTags:
		m.ResetTags()
		return nil
	case program.EdgeWeeklyRoutines:
		m.ResetWeeklyRoutines()
		return nil
	case program.EdgeDailyRoutines:
		m.ResetDailyRoutines()
		return nil
	case program.EdgeProgramRecs:
		m.ResetProgramRecs()
		return nil
	}
	return fmt.Errorf("unknown Program edge %s", name)
}

// ProgramRecMutation represents an operation that mutates the ProgramRec nodes in the graph.
type ProgramRecMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uint64
	author                     *uint64
	addauthor                  *int64
	program_id                 *uint64
	addprogram_id              *int64
	start_date                 *time.Time
	end_date                   *time.Time
	status                     *programrec.Status
	comment                    *string
	created_at                 *time.Time
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	program                    *uint64
	clearedprogram             bool
	weekly_routine_recs        map[uint64]struct{}
	removedweekly_routine_recs map[uint64]struct{}
	clearedweekly_routine_recs bool
	daily_routine_recs         map[uint64]struct{}
	removeddaily_routine_recs  map[uint64]struct{}
	cleareddaily_routine_recs  bool
	done                       bool
	oldValue                   func(context.Context) (*ProgramRec, error)
	predicates                 []predicate.ProgramRec
}

var _ ent.Mutation = (*ProgramRecMutation)(nil)

// programrecOption allows management of the mutation configuration using functional options.
type programrecOption func(*ProgramRecMutation)

// newProgramRecMutation creates new mutation for the ProgramRec entity.
func newProgramRecMutation(c config, op Op, opts ...programrecOption) *ProgramRecMutation {
	m := &ProgramRecMutation{
		config:        c,
		op:            op,
		typ:           TypeProgramRec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProgramRecID sets the ID field of the mutation.
func withProgramRecID(id uint64) programrecOption {
	return func(m *ProgramRecMutation) {
		var (
			err   error
			once  sync.Once
			value *ProgramRec
		)
		m.oldValue = func(ctx context.Context) (*ProgramRec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProgramRec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProgramRec sets the old ProgramRec of the mutation.
func withProgramRec(node *ProgramRec) programrecOption {
	return func(m *ProgramRecMutation) {
		m.oldValue = func(context.Context) (*ProgramRec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProgramRecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProgramRecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProgramRec entities.
func (m *ProgramRecMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProgramRecMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProgramRecMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProgramRec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAuthor sets the "author" field.
func (m *ProgramRecMutation) SetAuthor(u uint64) {
	m.author = &u
	m.addauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ProgramRecMutation) Author() (r uint64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldAuthor(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AddAuthor adds u to the "author" field.
func (m *ProgramRecMutation) AddAuthor(u int64) {
	if m.addauthor != nil {
		*m.addauthor += u
	} else {
		m.addauthor = &u
	}
}

// AddedAuthor returns the value that was added to the "author" field in this mutation.
func (m *ProgramRecMutation) AddedAuthor() (r int64, exists bool) {
	v := m.addauthor
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ProgramRecMutation) ResetAuthor() {
	m.author = nil
	m.addauthor = nil
}

// SetProgramID sets the "program_id" field.
func (m *ProgramRecMutation) SetProgramID(u uint64) {
	m.program_id = &u
	m.addprogram_id = nil
}

// ProgramID returns the value of the "program_id" field in the mutation.
func (m *ProgramRecMutation) ProgramID() (r uint64, exists bool) {
	v := m.program_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramID returns the old "program_id" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldProgramID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramID: %w", err)
	}
	return oldValue.ProgramID, nil
}

// AddProgramID adds u to the "program_id" field.
func (m *ProgramRecMutation) AddProgramID(u int64) {
	if m.addprogram_id != nil {
		*m.addprogram_id += u
	} else {
		m.addprogram_id = &u
	}
}

// AddedProgramID returns the value that was added to the "program_id" field in this mutation.
func (m *ProgramRecMutation) AddedProgramID() (r int64, exists bool) {
	v := m.addprogram_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgramID resets all changes to the "program_id" field.
func (m *ProgramRecMutation) ResetProgramID() {
	m.program_id = nil
	m.addprogram_id = nil
}

// SetStartDate sets the "start_date" field.
func (m *ProgramRecMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *ProgramRecMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *ProgramRecMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *ProgramRecMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *ProgramRecMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *ProgramRecMutation) ResetEndDate() {
	m.end_date = nil
}

// SetStatus sets the "status" field.
func (m *ProgramRecMutation) SetStatus(pr programrec.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProgramRecMutation) Status() (r programrec.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldStatus(ctx context.Context) (v programrec.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProgramRecMutation) ResetStatus() {
	m.status = nil
}

// SetComment sets the "comment" field.
func (m *ProgramRecMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ProgramRecMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *ProgramRecMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[programrec.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *ProgramRecMutation) CommentCleared() bool {
	_, ok := m.clearedFields[programrec.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *ProgramRecMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, programrec.FieldComment)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProgramRecMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProgramRecMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProgramRecMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProgramRecMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProgramRecMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProgramRec entity.
// If the ProgramRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProgramRecMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProgramRecMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetProgramID sets the "program" edge to the Program entity by id.
func (m *ProgramRecMutation) SetProgramID(id uint64) {
	m.program = &id
}

// ClearProgram clears the "program" edge to the Program entity.
func (m *ProgramRecMutation) ClearProgram() {
	m.clearedprogram = true
}

// ProgramCleared reports if the "program" edge to the Program entity was cleared.
func (m *ProgramRecMutation) ProgramCleared() bool {
	return m.clearedprogram
}

// ProgramID returns the "program" edge ID in the mutation.
func (m *ProgramRecMutation) ProgramID() (id uint64, exists bool) {
	if m.program != nil {
		return *m.program, true
	}
	return
}

// ProgramIDs returns the "program" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramID instead. It exists only for internal usage by the builders.
func (m *ProgramRecMutation) ProgramIDs() (ids []uint64) {
	if id := m.program; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgram resets all changes to the "program" edge.
func (m *ProgramRecMutation) ResetProgram() {
	m.program = nil
	m.clearedprogram = false
}

// AddWeeklyRoutineRecIDs adds the "weekly_routine_recs" edge to the WeeklyRoutineRec entity by ids.
func (m *ProgramRecMutation) AddWeeklyRoutineRecIDs(ids ...uint64) {
	if m.weekly_routine_recs == nil {
		m.weekly_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.weekly_routine_recs[ids[i]] = struct{}{}
	}
}

// ClearWeeklyRoutineRecs clears the "weekly_routine_recs" edge to the WeeklyRoutineRec entity.
func (m *ProgramRecMutation) ClearWeeklyRoutineRecs() {
	m.clearedweekly_routine_recs = true
}

// WeeklyRoutineRecsCleared reports if the "weekly_routine_recs" edge to the WeeklyRoutineRec entity was cleared.
func (m *ProgramRecMutation) WeeklyRoutineRecsCleared() bool {
	return m.clearedweekly_routine_recs
}

// RemoveWeeklyRoutineRecIDs removes the "weekly_routine_recs" edge to the WeeklyRoutineRec entity by IDs.
func (m *ProgramRecMutation) RemoveWeeklyRoutineRecIDs(ids ...uint64) {
	if m.removedweekly_routine_recs == nil {
		m.removedweekly_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.weekly_routine_recs, ids[i])
		m.removedweekly_routine_recs[ids[i]] = struct{}{}
	}
}

// RemovedWeeklyRoutineRecs returns the removed IDs of the "weekly_routine_recs" edge to the WeeklyRoutineRec entity.
func (m *ProgramRecMutation) RemovedWeeklyRoutineRecsIDs() (ids []uint64) {
	for id := range m.removedweekly_routine_recs {
		ids = append(ids, id)
	}
	return
}

// WeeklyRoutineRecsIDs returns the "weekly_routine_recs" edge IDs in the mutation.
func (m *ProgramRecMutation) WeeklyRoutineRecsIDs() (ids []uint64) {
	for id := range m.weekly_routine_recs {
		ids = append(ids, id)
	}
	return
}

// ResetWeeklyRoutineRecs resets all changes to the "weekly_routine_recs" edge.
func (m *ProgramRecMutation) ResetWeeklyRoutineRecs() {
	m.weekly_routine_recs = nil
	m.clearedweekly_routine_recs = false
	m.removedweekly_routine_recs = nil
}

// AddDailyRoutineRecIDs adds the "daily_routine_recs" edge to the DailyRoutineRec entity by ids.
func (m *ProgramRecMutation) AddDailyRoutineRecIDs(ids ...uint64) {
	if m.daily_routine_recs == nil {
		m.daily_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.daily_routine_recs[ids[i]] = struct{}{}
	}
}

// ClearDailyRoutineRecs clears the "daily_routine_recs" edge to the DailyRoutineRec entity.
func (m *ProgramRecMutation) ClearDailyRoutineRecs() {
	m.cleareddaily_routine_recs = true
}

// DailyRoutineRecsCleared reports if the "daily_routine_recs" edge to the DailyRoutineRec entity was cleared.
func (m *ProgramRecMutation) DailyRoutineRecsCleared() bool {
	return m.cleareddaily_routine_recs
}

// RemoveDailyRoutineRecIDs removes the "daily_routine_recs" edge to the DailyRoutineRec entity by IDs.
func (m *ProgramRecMutation) RemoveDailyRoutineRecIDs(ids ...uint64) {
	if m.removeddaily_routine_recs == nil {
		m.removeddaily_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.daily_routine_recs, ids[i])
		m.removeddaily_routine_recs[ids[i]] = struct{}{}
	}
}

// RemovedDailyRoutineRecs returns the removed IDs of the "daily_routine_recs" edge to the DailyRoutineRec entity.
func (m *ProgramRecMutation) RemovedDailyRoutineRecsIDs() (ids []uint64) {
	for id := range m.removeddaily_routine_recs {
		ids = append(ids, id)
	}
	return
}

// DailyRoutineRecsIDs returns the "daily_routine_recs" edge IDs in the mutation.
func (m *ProgramRecMutation) DailyRoutineRecsIDs() (ids []uint64) {
	for id := range m.daily_routine_recs {
		ids = append(ids, id)
	}
	return
}

// ResetDailyRoutineRecs resets all changes to the "daily_routine_recs" edge.
func (m *ProgramRecMutation) ResetDailyRoutineRecs() {
	m.daily_routine_recs = nil
	m.cleareddaily_routine_recs = false
	m.removeddaily_routine_recs = nil
}

// Where appends a list predicates to the ProgramRecMutation builder.
func (m *ProgramRecMutation) Where(ps ...predicate.ProgramRec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProgramRecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProgramRecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProgramRec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProgramRecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProgramRecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProgramRec).
func (m *ProgramRecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProgramRecMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.author != nil {
		fields = append(fields, programrec.FieldAuthor)
	}
	if m.program_id != nil {
		fields = append(fields, programrec.FieldProgramID)
	}
	if m.start_date != nil {
		fields = append(fields, programrec.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, programrec.FieldEndDate)
	}
	if m.status != nil {
		fields = append(fields, programrec.FieldStatus)
	}
	if m.comment != nil {
		fields = append(fields, programrec.FieldComment)
	}
	if m.created_at != nil {
		fields = append(fields, programrec.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, programrec.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProgramRecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case programrec.FieldAuthor:
		return m.Author()
	case programrec.FieldProgramID:
		return m.ProgramID()
	case programrec.FieldStartDate:
		return m.StartDate()
	case programrec.FieldEndDate:
		return m.EndDate()
	case programrec.FieldStatus:
		return m.Status()
	case programrec.FieldComment:
		return m.Comment()
	case programrec.FieldCreatedAt:
		return m.CreatedAt()
	case programrec.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProgramRecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case programrec.FieldAuthor:
		return m.OldAuthor(ctx)
	case programrec.FieldProgramID:
		return m.OldProgramID(ctx)
	case programrec.FieldStartDate:
		return m.OldStartDate(ctx)
	case programrec.FieldEndDate:
		return m.OldEndDate(ctx)
	case programrec.FieldStatus:
		return m.OldStatus(ctx)
	case programrec.FieldComment:
		return m.OldComment(ctx)
	case programrec.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case programrec.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProgramRec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramRecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case programrec.FieldAuthor:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case programrec.FieldProgramID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramID(v)
		return nil
	case programrec.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case programrec.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case programrec.FieldStatus:
		v, ok := value.(programrec.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case programrec.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case programrec.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case programrec.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProgramRec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProgramRecMutation) AddedFields() []string {
	var fields []string
	if m.addauthor != nil {
		fields = append(fields, programrec.FieldAuthor)
	}
	if m.addprogram_id != nil {
		fields = append(fields, programrec.FieldProgramID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProgramRecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case programrec.FieldAuthor:
		return m.AddedAuthor()
	case programrec.FieldProgramID:
		return m.AddedProgramID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProgramRecMutation) AddField(name string, value ent.Value) error {
	switch name {
	case programrec.FieldAuthor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthor(v)
		return nil
	case programrec.FieldProgramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgramID(v)
		return nil
	}
	return fmt.Errorf("unknown ProgramRec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProgramRecMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(programrec.FieldComment) {
		fields = append(fields, programrec.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProgramRecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProgramRecMutation) ClearField(name string) error {
	switch name {
	case programrec.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown ProgramRec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProgramRecMutation) ResetField(name string) error {
	switch name {
	case programrec.FieldAuthor:
		m.ResetAuthor()
		return nil
	case programrec.FieldProgramID:
		m.ResetProgramID()
		return nil
	case programrec.FieldStartDate:
		m.ResetStartDate()
		return nil
	case programrec.FieldEndDate:
		m.ResetEndDate()
		return nil
	case programrec.FieldStatus:
		m.ResetStatus()
		return nil
	case programrec.FieldComment:
		m.ResetComment()
		return nil
	case programrec.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case programrec.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProgramRec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProgramRecMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.program != nil {
		edges = append(edges, programrec.EdgeProgram)
	}
	if m.weekly_routine_recs != nil {
		edges = append(edges, programrec.EdgeWeeklyRoutineRecs)
	}
	if m.daily_routine_recs != nil {
		edges = append(edges, programrec.EdgeDailyRoutineRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProgramRecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case programrec.EdgeProgram:
		if id := m.program; id != nil {
			return []ent.Value{*id}
		}
	case programrec.EdgeWeeklyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.weekly_routine_recs))
		for id := range m.weekly_routine_recs {
			ids = append(ids, id)
		}
		return ids
	case programrec.EdgeDailyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.daily_routine_recs))
		for id := range m.daily_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProgramRecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedweekly_routine_recs != nil {
		edges = append(edges, programrec.EdgeWeeklyRoutineRecs)
	}
	if m.removeddaily_routine_recs != nil {
		edges = append(edges, programrec.EdgeDailyRoutineRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProgramRecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case programrec.EdgeWeeklyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.removedweekly_routine_recs))
		for id := range m.removedweekly_routine_recs {
			ids = append(ids, id)
		}
		return ids
	case programrec.EdgeDailyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.removeddaily_routine_recs))
		for id := range m.removeddaily_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProgramRecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprogram {
		edges = append(edges, programrec.EdgeProgram)
	}
	if m.clearedweekly_routine_recs {
		edges = append(edges, programrec.EdgeWeeklyRoutineRecs)
	}
	if m.cleareddaily_routine_recs {
		edges = append(edges, programrec.EdgeDailyRoutineRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProgramRecMutation) EdgeCleared(name string) bool {
	switch name {
	case programrec.EdgeProgram:
		return m.clearedprogram
	case programrec.EdgeWeeklyRoutineRecs:
		return m.clearedweekly_routine_recs
	case programrec.EdgeDailyRoutineRecs:
		return m.cleareddaily_routine_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProgramRecMutation) ClearEdge(name string) error {
	switch name {
	case programrec.EdgeProgram:
		m.ClearProgram()
		return nil
	}
	return fmt.Errorf("unknown ProgramRec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProgramRecMutation) ResetEdge(name string) error {
	switch name {
	case programrec.EdgeProgram:
		m.ResetProgram()
		return nil
	case programrec.EdgeWeeklyRoutineRecs:
		m.ResetWeeklyRoutineRecs()
		return nil
	case programrec.EdgeDailyRoutineRecs:
		m.ResetDailyRoutineRecs()
		return nil
	}
	return fmt.Errorf("unknown ProgramRec edge %s", name)
}

// RoutineActMutation represents an operation that mutates the RoutineAct nodes in the graph.
type RoutineActMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	daily_routine_id        *uint64
	adddaily_routine_id     *int64
	act_id                  *uint64
	addact_id               *int64
	_order                  *int
	add_order               *int
	reps                    *int
	addreps                 *int
	lap                     *int
	addlap                  *int
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	act                     *uint64
	clearedact              bool
	daily_routine           *uint64
	cleareddaily_routine    bool
	routine_act_recs        map[uint64]struct{}
	removedroutine_act_recs map[uint64]struct{}
	clearedroutine_act_recs bool
	done                    bool
	oldValue                func(context.Context) (*RoutineAct, error)
	predicates              []predicate.RoutineAct
}

var _ ent.Mutation = (*RoutineActMutation)(nil)

// routineactOption allows management of the mutation configuration using functional options.
type routineactOption func(*RoutineActMutation)

// newRoutineActMutation creates new mutation for the RoutineAct entity.
func newRoutineActMutation(c config, op Op, opts ...routineactOption) *RoutineActMutation {
	m := &RoutineActMutation{
		config:        c,
		op:            op,
		typ:           TypeRoutineAct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoutineActID sets the ID field of the mutation.
func withRoutineActID(id uint64) routineactOption {
	return func(m *RoutineActMutation) {
		var (
			err   error
			once  sync.Once
			value *RoutineAct
		)
		m.oldValue = func(ctx context.Context) (*RoutineAct, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoutineAct.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoutineAct sets the old RoutineAct of the mutation.
func withRoutineAct(node *RoutineAct) routineactOption {
	return func(m *RoutineActMutation) {
		m.oldValue = func(context.Context) (*RoutineAct, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoutineActMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoutineActMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoutineAct entities.
func (m *RoutineActMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoutineActMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoutineActMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoutineAct.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDailyRoutineID sets the "daily_routine_id" field.
func (m *RoutineActMutation) SetDailyRoutineID(u uint64) {
	m.daily_routine_id = &u
	m.adddaily_routine_id = nil
}

// DailyRoutineID returns the value of the "daily_routine_id" field in the mutation.
func (m *RoutineActMutation) DailyRoutineID() (r uint64, exists bool) {
	v := m.daily_routine_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyRoutineID returns the old "daily_routine_id" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldDailyRoutineID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyRoutineID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyRoutineID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyRoutineID: %w", err)
	}
	return oldValue.DailyRoutineID, nil
}

// AddDailyRoutineID adds u to the "daily_routine_id" field.
func (m *RoutineActMutation) AddDailyRoutineID(u int64) {
	if m.adddaily_routine_id != nil {
		*m.adddaily_routine_id += u
	} else {
		m.adddaily_routine_id = &u
	}
}

// AddedDailyRoutineID returns the value that was added to the "daily_routine_id" field in this mutation.
func (m *RoutineActMutation) AddedDailyRoutineID() (r int64, exists bool) {
	v := m.adddaily_routine_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDailyRoutineID resets all changes to the "daily_routine_id" field.
func (m *RoutineActMutation) ResetDailyRoutineID() {
	m.daily_routine_id = nil
	m.adddaily_routine_id = nil
}

// SetActID sets the "act_id" field.
func (m *RoutineActMutation) SetActID(u uint64) {
	m.act_id = &u
	m.addact_id = nil
}

// ActID returns the value of the "act_id" field in the mutation.
func (m *RoutineActMutation) ActID() (r uint64, exists bool) {
	v := m.act_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActID returns the old "act_id" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldActID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActID: %w", err)
	}
	return oldValue.ActID, nil
}

// AddActID adds u to the "act_id" field.
func (m *RoutineActMutation) AddActID(u int64) {
	if m.addact_id != nil {
		*m.addact_id += u
	} else {
		m.addact_id = &u
	}
}

// AddedActID returns the value that was added to the "act_id" field in this mutation.
func (m *RoutineActMutation) AddedActID() (r int64, exists bool) {
	v := m.addact_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetActID resets all changes to the "act_id" field.
func (m *RoutineActMutation) ResetActID() {
	m.act_id = nil
	m.addact_id = nil
}

// SetOrder sets the "order" field.
func (m *RoutineActMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RoutineActMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *RoutineActMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RoutineActMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RoutineActMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetReps sets the "reps" field.
func (m *RoutineActMutation) SetReps(i int) {
	m.reps = &i
	m.addreps = nil
}

// Reps returns the value of the "reps" field in the mutation.
func (m *RoutineActMutation) Reps() (r int, exists bool) {
	v := m.reps
	if v == nil {
		return
	}
	return *v, true
}

// OldReps returns the old "reps" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldReps(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReps: %w", err)
	}
	return oldValue.Reps, nil
}

// AddReps adds i to the "reps" field.
func (m *RoutineActMutation) AddReps(i int) {
	if m.addreps != nil {
		*m.addreps += i
	} else {
		m.addreps = &i
	}
}

// AddedReps returns the value that was added to the "reps" field in this mutation.
func (m *RoutineActMutation) AddedReps() (r int, exists bool) {
	v := m.addreps
	if v == nil {
		return
	}
	return *v, true
}

// ClearReps clears the value of the "reps" field.
func (m *RoutineActMutation) ClearReps() {
	m.reps = nil
	m.addreps = nil
	m.clearedFields[routineact.FieldReps] = struct{}{}
}

// RepsCleared returns if the "reps" field was cleared in this mutation.
func (m *RoutineActMutation) RepsCleared() bool {
	_, ok := m.clearedFields[routineact.FieldReps]
	return ok
}

// ResetReps resets all changes to the "reps" field.
func (m *RoutineActMutation) ResetReps() {
	m.reps = nil
	m.addreps = nil
	delete(m.clearedFields, routineact.FieldReps)
}

// SetLap sets the "lap" field.
func (m *RoutineActMutation) SetLap(i int) {
	m.lap = &i
	m.addlap = nil
}

// Lap returns the value of the "lap" field in the mutation.
func (m *RoutineActMutation) Lap() (r int, exists bool) {
	v := m.lap
	if v == nil {
		return
	}
	return *v, true
}

// OldLap returns the old "lap" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldLap(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLap: %w", err)
	}
	return oldValue.Lap, nil
}

// AddLap adds i to the "lap" field.
func (m *RoutineActMutation) AddLap(i int) {
	if m.addlap != nil {
		*m.addlap += i
	} else {
		m.addlap = &i
	}
}

// AddedLap returns the value that was added to the "lap" field in this mutation.
func (m *RoutineActMutation) AddedLap() (r int, exists bool) {
	v := m.addlap
	if v == nil {
		return
	}
	return *v, true
}

// ClearLap clears the value of the "lap" field.
func (m *RoutineActMutation) ClearLap() {
	m.lap = nil
	m.addlap = nil
	m.clearedFields[routineact.FieldLap] = struct{}{}
}

// LapCleared returns if the "lap" field was cleared in this mutation.
func (m *RoutineActMutation) LapCleared() bool {
	_, ok := m.clearedFields[routineact.FieldLap]
	return ok
}

// ResetLap resets all changes to the "lap" field.
func (m *RoutineActMutation) ResetLap() {
	m.lap = nil
	m.addlap = nil
	delete(m.clearedFields, routineact.FieldLap)
}

// SetCreatedAt sets the "created_at" field.
func (m *RoutineActMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoutineActMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoutineActMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoutineActMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoutineActMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RoutineAct entity.
// If the RoutineAct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoutineActMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetActID sets the "act" edge to the Act entity by id.
func (m *RoutineActMutation) SetActID(id uint64) {
	m.act = &id
}

// ClearAct clears the "act" edge to the Act entity.
func (m *RoutineActMutation) ClearAct() {
	m.clearedact = true
}

// ActCleared reports if the "act" edge to the Act entity was cleared.
func (m *RoutineActMutation) ActCleared() bool {
	return m.clearedact
}

// ActID returns the "act" edge ID in the mutation.
func (m *RoutineActMutation) ActID() (id uint64, exists bool) {
	if m.act != nil {
		return *m.act, true
	}
	return
}

// ActIDs returns the "act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActID instead. It exists only for internal usage by the builders.
func (m *RoutineActMutation) ActIDs() (ids []uint64) {
	if id := m.act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAct resets all changes to the "act" edge.
func (m *RoutineActMutation) ResetAct() {
	m.act = nil
	m.clearedact = false
}

// SetDailyRoutineID sets the "daily_routine" edge to the DailyRoutine entity by id.
func (m *RoutineActMutation) SetDailyRoutineID(id uint64) {
	m.daily_routine = &id
}

// ClearDailyRoutine clears the "daily_routine" edge to the DailyRoutine entity.
func (m *RoutineActMutation) ClearDailyRoutine() {
	m.cleareddaily_routine = true
}

// DailyRoutineCleared reports if the "daily_routine" edge to the DailyRoutine entity was cleared.
func (m *RoutineActMutation) DailyRoutineCleared() bool {
	return m.cleareddaily_routine
}

// DailyRoutineID returns the "daily_routine" edge ID in the mutation.
func (m *RoutineActMutation) DailyRoutineID() (id uint64, exists bool) {
	if m.daily_routine != nil {
		return *m.daily_routine, true
	}
	return
}

// DailyRoutineIDs returns the "daily_routine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DailyRoutineID instead. It exists only for internal usage by the builders.
func (m *RoutineActMutation) DailyRoutineIDs() (ids []uint64) {
	if id := m.daily_routine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDailyRoutine resets all changes to the "daily_routine" edge.
func (m *RoutineActMutation) ResetDailyRoutine() {
	m.daily_routine = nil
	m.cleareddaily_routine = false
}

// AddRoutineActRecIDs adds the "routine_act_recs" edge to the RoutineActRec entity by ids.
func (m *RoutineActMutation) AddRoutineActRecIDs(ids ...uint64) {
	if m.routine_act_recs == nil {
		m.routine_act_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.routine_act_recs[ids[i]] = struct{}{}
	}
}

// ClearRoutineActRecs clears the "routine_act_recs" edge to the RoutineActRec entity.
func (m *RoutineActMutation) ClearRoutineActRecs() {
	m.clearedroutine_act_recs = true
}

// RoutineActRecsCleared reports if the "routine_act_recs" edge to the RoutineActRec entity was cleared.
func (m *RoutineActMutation) RoutineActRecsCleared() bool {
	return m.clearedroutine_act_recs
}

// RemoveRoutineActRecIDs removes the "routine_act_recs" edge to the RoutineActRec entity by IDs.
func (m *RoutineActMutation) RemoveRoutineActRecIDs(ids ...uint64) {
	if m.removedroutine_act_recs == nil {
		m.removedroutine_act_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.routine_act_recs, ids[i])
		m.removedroutine_act_recs[ids[i]] = struct{}{}
	}
}

// RemovedRoutineActRecs returns the removed IDs of the "routine_act_recs" edge to the RoutineActRec entity.
func (m *RoutineActMutation) RemovedRoutineActRecsIDs() (ids []uint64) {
	for id := range m.removedroutine_act_recs {
		ids = append(ids, id)
	}
	return
}

// RoutineActRecsIDs returns the "routine_act_recs" edge IDs in the mutation.
func (m *RoutineActMutation) RoutineActRecsIDs() (ids []uint64) {
	for id := range m.routine_act_recs {
		ids = append(ids, id)
	}
	return
}

// ResetRoutineActRecs resets all changes to the "routine_act_recs" edge.
func (m *RoutineActMutation) ResetRoutineActRecs() {
	m.routine_act_recs = nil
	m.clearedroutine_act_recs = false
	m.removedroutine_act_recs = nil
}

// Where appends a list predicates to the RoutineActMutation builder.
func (m *RoutineActMutation) Where(ps ...predicate.RoutineAct) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoutineActMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoutineActMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoutineAct, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoutineActMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoutineActMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoutineAct).
func (m *RoutineActMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoutineActMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.daily_routine_id != nil {
		fields = append(fields, routineact.FieldDailyRoutineID)
	}
	if m.act_id != nil {
		fields = append(fields, routineact.FieldActID)
	}
	if m._order != nil {
		fields = append(fields, routineact.FieldOrder)
	}
	if m.reps != nil {
		fields = append(fields, routineact.FieldReps)
	}
	if m.lap != nil {
		fields = append(fields, routineact.FieldLap)
	}
	if m.created_at != nil {
		fields = append(fields, routineact.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, routineact.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoutineActMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case routineact.FieldDailyRoutineID:
		return m.DailyRoutineID()
	case routineact.FieldActID:
		return m.ActID()
	case routineact.FieldOrder:
		return m.Order()
	case routineact.FieldReps:
		return m.Reps()
	case routineact.FieldLap:
		return m.Lap()
	case routineact.FieldCreatedAt:
		return m.CreatedAt()
	case routineact.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoutineActMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case routineact.FieldDailyRoutineID:
		return m.OldDailyRoutineID(ctx)
	case routineact.FieldActID:
		return m.OldActID(ctx)
	case routineact.FieldOrder:
		return m.OldOrder(ctx)
	case routineact.FieldReps:
		return m.OldReps(ctx)
	case routineact.FieldLap:
		return m.OldLap(ctx)
	case routineact.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case routineact.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RoutineAct field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActMutation) SetField(name string, value ent.Value) error {
	switch name {
	case routineact.FieldDailyRoutineID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyRoutineID(v)
		return nil
	case routineact.FieldActID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActID(v)
		return nil
	case routineact.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case routineact.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReps(v)
		return nil
	case routineact.FieldLap:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLap(v)
		return nil
	case routineact.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case routineact.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineAct field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoutineActMutation) AddedFields() []string {
	var fields []string
	if m.adddaily_routine_id != nil {
		fields = append(fields, routineact.FieldDailyRoutineID)
	}
	if m.addact_id != nil {
		fields = append(fields, routineact.FieldActID)
	}
	if m.add_order != nil {
		fields = append(fields, routineact.FieldOrder)
	}
	if m.addreps != nil {
		fields = append(fields, routineact.FieldReps)
	}
	if m.addlap != nil {
		fields = append(fields, routineact.FieldLap)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoutineActMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case routineact.FieldDailyRoutineID:
		return m.AddedDailyRoutineID()
	case routineact.FieldActID:
		return m.AddedActID()
	case routineact.FieldOrder:
		return m.AddedOrder()
	case routineact.FieldReps:
		return m.AddedReps()
	case routineact.FieldLap:
		return m.AddedLap()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActMutation) AddField(name string, value ent.Value) error {
	switch name {
	case routineact.FieldDailyRoutineID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDailyRoutineID(v)
		return nil
	case routineact.FieldActID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActID(v)
		return nil
	case routineact.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case routineact.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReps(v)
		return nil
	case routineact.FieldLap:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLap(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineAct numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoutineActMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(routineact.FieldReps) {
		fields = append(fields, routineact.FieldReps)
	}
	if m.FieldCleared(routineact.FieldLap) {
		fields = append(fields, routineact.FieldLap)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoutineActMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoutineActMutation) ClearField(name string) error {
	switch name {
	case routineact.FieldReps:
		m.ClearReps()
		return nil
	case routineact.FieldLap:
		m.ClearLap()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoutineActMutation) ResetField(name string) error {
	switch name {
	case routineact.FieldDailyRoutineID:
		m.ResetDailyRoutineID()
		return nil
	case routineact.FieldActID:
		m.ResetActID()
		return nil
	case routineact.FieldOrder:
		m.ResetOrder()
		return nil
	case routineact.FieldReps:
		m.ResetReps()
		return nil
	case routineact.FieldLap:
		m.ResetLap()
		return nil
	case routineact.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case routineact.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoutineActMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.act != nil {
		edges = append(edges, routineact.EdgeAct)
	}
	if m.daily_routine != nil {
		edges = append(edges, routineact.EdgeDailyRoutine)
	}
	if m.routine_act_recs != nil {
		edges = append(edges, routineact.EdgeRoutineActRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoutineActMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case routineact.EdgeAct:
		if id := m.act; id != nil {
			return []ent.Value{*id}
		}
	case routineact.EdgeDailyRoutine:
		if id := m.daily_routine; id != nil {
			return []ent.Value{*id}
		}
	case routineact.EdgeRoutineActRecs:
		ids := make([]ent.Value, 0, len(m.routine_act_recs))
		for id := range m.routine_act_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoutineActMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedroutine_act_recs != nil {
		edges = append(edges, routineact.EdgeRoutineActRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoutineActMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case routineact.EdgeRoutineActRecs:
		ids := make([]ent.Value, 0, len(m.removedroutine_act_recs))
		for id := range m.removedroutine_act_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoutineActMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedact {
		edges = append(edges, routineact.EdgeAct)
	}
	if m.cleareddaily_routine {
		edges = append(edges, routineact.EdgeDailyRoutine)
	}
	if m.clearedroutine_act_recs {
		edges = append(edges, routineact.EdgeRoutineActRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoutineActMutation) EdgeCleared(name string) bool {
	switch name {
	case routineact.EdgeAct:
		return m.clearedact
	case routineact.EdgeDailyRoutine:
		return m.cleareddaily_routine
	case routineact.EdgeRoutineActRecs:
		return m.clearedroutine_act_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoutineActMutation) ClearEdge(name string) error {
	switch name {
	case routineact.EdgeAct:
		m.ClearAct()
		return nil
	case routineact.EdgeDailyRoutine:
		m.ClearDailyRoutine()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoutineActMutation) ResetEdge(name string) error {
	switch name {
	case routineact.EdgeAct:
		m.ResetAct()
		return nil
	case routineact.EdgeDailyRoutine:
		m.ResetDailyRoutine()
		return nil
	case routineact.EdgeRoutineActRecs:
		m.ResetRoutineActRecs()
		return nil
	}
	return fmt.Errorf("unknown RoutineAct edge %s", name)
}

// RoutineActRecMutation represents an operation that mutates the RoutineActRec nodes in the graph.
type RoutineActRecMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uint64
	daily_routine_rec_id     *uint64
	adddaily_routine_rec_id  *int64
	routine_act_id           *uint64
	addroutine_act_id        *int64
	act_id                   *uint64
	addact_id                *int64
	_order                   *int
	add_order                *int
	reps                     *int
	addreps                  *int
	lap                      *int
	addlap                   *int
	current_reps             *int
	addcurrent_reps          *int
	current_lap              *int
	addcurrent_lap           *int
	image                    *string
	comment                  *string
	status                   *routineactrec.Status
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	daily_routine_rec        *uint64
	cleareddaily_routine_rec bool
	act                      *uint64
	clearedact               bool
	routine_act              *uint64
	clearedroutine_act       bool
	done                     bool
	oldValue                 func(context.Context) (*RoutineActRec, error)
	predicates               []predicate.RoutineActRec
}

var _ ent.Mutation = (*RoutineActRecMutation)(nil)

// routineactrecOption allows management of the mutation configuration using functional options.
type routineactrecOption func(*RoutineActRecMutation)

// newRoutineActRecMutation creates new mutation for the RoutineActRec entity.
func newRoutineActRecMutation(c config, op Op, opts ...routineactrecOption) *RoutineActRecMutation {
	m := &RoutineActRecMutation{
		config:        c,
		op:            op,
		typ:           TypeRoutineActRec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoutineActRecID sets the ID field of the mutation.
func withRoutineActRecID(id uint64) routineactrecOption {
	return func(m *RoutineActRecMutation) {
		var (
			err   error
			once  sync.Once
			value *RoutineActRec
		)
		m.oldValue = func(ctx context.Context) (*RoutineActRec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoutineActRec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoutineActRec sets the old RoutineActRec of the mutation.
func withRoutineActRec(node *RoutineActRec) routineactrecOption {
	return func(m *RoutineActRecMutation) {
		m.oldValue = func(context.Context) (*RoutineActRec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoutineActRecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoutineActRecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoutineActRec entities.
func (m *RoutineActRecMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoutineActRecMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoutineActRecMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoutineActRec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDailyRoutineRecID sets the "daily_routine_rec_id" field.
func (m *RoutineActRecMutation) SetDailyRoutineRecID(u uint64) {
	m.daily_routine_rec_id = &u
	m.adddaily_routine_rec_id = nil
}

// DailyRoutineRecID returns the value of the "daily_routine_rec_id" field in the mutation.
func (m *RoutineActRecMutation) DailyRoutineRecID() (r uint64, exists bool) {
	v := m.daily_routine_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyRoutineRecID returns the old "daily_routine_rec_id" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldDailyRoutineRecID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyRoutineRecID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyRoutineRecID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyRoutineRecID: %w", err)
	}
	return oldValue.DailyRoutineRecID, nil
}

// AddDailyRoutineRecID adds u to the "daily_routine_rec_id" field.
func (m *RoutineActRecMutation) AddDailyRoutineRecID(u int64) {
	if m.adddaily_routine_rec_id != nil {
		*m.adddaily_routine_rec_id += u
	} else {
		m.adddaily_routine_rec_id = &u
	}
}

// AddedDailyRoutineRecID returns the value that was added to the "daily_routine_rec_id" field in this mutation.
func (m *RoutineActRecMutation) AddedDailyRoutineRecID() (r int64, exists bool) {
	v := m.adddaily_routine_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDailyRoutineRecID resets all changes to the "daily_routine_rec_id" field.
func (m *RoutineActRecMutation) ResetDailyRoutineRecID() {
	m.daily_routine_rec_id = nil
	m.adddaily_routine_rec_id = nil
}

// SetRoutineActID sets the "routine_act_id" field.
func (m *RoutineActRecMutation) SetRoutineActID(u uint64) {
	m.routine_act_id = &u
	m.addroutine_act_id = nil
}

// RoutineActID returns the value of the "routine_act_id" field in the mutation.
func (m *RoutineActRecMutation) RoutineActID() (r uint64, exists bool) {
	v := m.routine_act_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoutineActID returns the old "routine_act_id" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldRoutineActID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoutineActID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoutineActID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoutineActID: %w", err)
	}
	return oldValue.RoutineActID, nil
}

// AddRoutineActID adds u to the "routine_act_id" field.
func (m *RoutineActRecMutation) AddRoutineActID(u int64) {
	if m.addroutine_act_id != nil {
		*m.addroutine_act_id += u
	} else {
		m.addroutine_act_id = &u
	}
}

// AddedRoutineActID returns the value that was added to the "routine_act_id" field in this mutation.
func (m *RoutineActRecMutation) AddedRoutineActID() (r int64, exists bool) {
	v := m.addroutine_act_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearRoutineActID clears the value of the "routine_act_id" field.
func (m *RoutineActRecMutation) ClearRoutineActID() {
	m.routine_act_id = nil
	m.addroutine_act_id = nil
	m.clearedFields[routineactrec.FieldRoutineActID] = struct{}{}
}

// RoutineActIDCleared returns if the "routine_act_id" field was cleared in this mutation.
func (m *RoutineActRecMutation) RoutineActIDCleared() bool {
	_, ok := m.clearedFields[routineactrec.FieldRoutineActID]
	return ok
}

// ResetRoutineActID resets all changes to the "routine_act_id" field.
func (m *RoutineActRecMutation) ResetRoutineActID() {
	m.routine_act_id = nil
	m.addroutine_act_id = nil
	delete(m.clearedFields, routineactrec.FieldRoutineActID)
}

// SetActID sets the "act_id" field.
func (m *RoutineActRecMutation) SetActID(u uint64) {
	m.act_id = &u
	m.addact_id = nil
}

// ActID returns the value of the "act_id" field in the mutation.
func (m *RoutineActRecMutation) ActID() (r uint64, exists bool) {
	v := m.act_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActID returns the old "act_id" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldActID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActID: %w", err)
	}
	return oldValue.ActID, nil
}

// AddActID adds u to the "act_id" field.
func (m *RoutineActRecMutation) AddActID(u int64) {
	if m.addact_id != nil {
		*m.addact_id += u
	} else {
		m.addact_id = &u
	}
}

// AddedActID returns the value that was added to the "act_id" field in this mutation.
func (m *RoutineActRecMutation) AddedActID() (r int64, exists bool) {
	v := m.addact_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearActID clears the value of the "act_id" field.
func (m *RoutineActRecMutation) ClearActID() {
	m.act_id = nil
	m.addact_id = nil
	m.clearedFields[routineactrec.FieldActID] = struct{}{}
}

// ActIDCleared returns if the "act_id" field was cleared in this mutation.
func (m *RoutineActRecMutation) ActIDCleared() bool {
	_, ok := m.clearedFields[routineactrec.FieldActID]
	return ok
}

// ResetActID resets all changes to the "act_id" field.
func (m *RoutineActRecMutation) ResetActID() {
	m.act_id = nil
	m.addact_id = nil
	delete(m.clearedFields, routineactrec.FieldActID)
}

// SetOrder sets the "order" field.
func (m *RoutineActRecMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RoutineActRecMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *RoutineActRecMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RoutineActRecMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RoutineActRecMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetReps sets the "reps" field.
func (m *RoutineActRecMutation) SetReps(i int) {
	m.reps = &i
	m.addreps = nil
}

// Reps returns the value of the "reps" field in the mutation.
func (m *RoutineActRecMutation) Reps() (r int, exists bool) {
	v := m.reps
	if v == nil {
		return
	}
	return *v, true
}

// OldReps returns the old "reps" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldReps(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReps: %w", err)
	}
	return oldValue.Reps, nil
}

// AddReps adds i to the "reps" field.
func (m *RoutineActRecMutation) AddReps(i int) {
	if m.addreps != nil {
		*m.addreps += i
	} else {
		m.addreps = &i
	}
}

// AddedReps returns the value that was added to the "reps" field in this mutation.
func (m *RoutineActRecMutation) AddedReps() (r int, exists bool) {
	v := m.addreps
	if v == nil {
		return
	}
	return *v, true
}

// ClearReps clears the value of the "reps" field.
func (m *RoutineActRecMutation) ClearReps() {
	m.reps = nil
	m.addreps = nil
	m.clearedFields[routineactrec.FieldReps] = struct{}{}
}

// RepsCleared returns if the "reps" field was cleared in this mutation.
func (m *RoutineActRecMutation) RepsCleared() bool {
	_, ok := m.clearedFields[routineactrec.FieldReps]
	return ok
}

// ResetReps resets all changes to the "reps" field.
func (m *RoutineActRecMutation) ResetReps() {
	m.reps = nil
	m.addreps = nil
	delete(m.clearedFields, routineactrec.FieldReps)
}

// SetLap sets the "lap" field.
func (m *RoutineActRecMutation) SetLap(i int) {
	m.lap = &i
	m.addlap = nil
}

// Lap returns the value of the "lap" field in the mutation.
func (m *RoutineActRecMutation) Lap() (r int, exists bool) {
	v := m.lap
	if v == nil {
		return
	}
	return *v, true
}

// OldLap returns the old "lap" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldLap(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLap: %w", err)
	}
	return oldValue.Lap, nil
}

// AddLap adds i to the "lap" field.
func (m *RoutineActRecMutation) AddLap(i int) {
	if m.addlap != nil {
		*m.addlap += i
	} else {
		m.addlap = &i
	}
}

// AddedLap returns the value that was added to the "lap" field in this mutation.
func (m *RoutineActRecMutation) AddedLap() (r int, exists bool) {
	v := m.addlap
	if v == nil {
		return
	}
	return *v, true
}

// ClearLap clears the value of the "lap" field.
func (m *RoutineActRecMutation) ClearLap() {
	m.lap = nil
	m.addlap = nil
	m.clearedFields[routineactrec.FieldLap] = struct{}{}
}

// LapCleared returns if the "lap" field was cleared in this mutation.
func (m *RoutineActRecMutation) LapCleared() bool {
	_, ok := m.clearedFields[routineactrec.FieldLap]
	return ok
}

// ResetLap resets all changes to the "lap" field.
func (m *RoutineActRecMutation) ResetLap() {
	m.lap = nil
	m.addlap = nil
	delete(m.clearedFields, routineactrec.FieldLap)
}

// SetCurrentReps sets the "current_reps" field.
func (m *RoutineActRecMutation) SetCurrentReps(i int) {
	m.current_reps = &i
	m.addcurrent_reps = nil
}

// CurrentReps returns the value of the "current_reps" field in the mutation.
func (m *RoutineActRecMutation) CurrentReps() (r int, exists bool) {
	v := m.current_reps
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentReps returns the old "current_reps" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldCurrentReps(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentReps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentReps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentReps: %w", err)
	}
	return oldValue.CurrentReps, nil
}

// AddCurrentReps adds i to the "current_reps" field.
func (m *RoutineActRecMutation) AddCurrentReps(i int) {
	if m.addcurrent_reps != nil {
		*m.addcurrent_reps += i
	} else {
		m.addcurrent_reps = &i
	}
}

// AddedCurrentReps returns the value that was added to the "current_reps" field in this mutation.
func (m *RoutineActRecMutation) AddedCurrentReps() (r int, exists bool) {
	v := m.addcurrent_reps
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentReps resets all changes to the "current_reps" field.
func (m *RoutineActRecMutation) ResetCurrentReps() {
	m.current_reps = nil
	m.addcurrent_reps = nil
}

// SetCurrentLap sets the "current_lap" field.
func (m *RoutineActRecMutation) SetCurrentLap(i int) {
	m.current_lap = &i
	m.addcurrent_lap = nil
}

// CurrentLap returns the value of the "current_lap" field in the mutation.
func (m *RoutineActRecMutation) CurrentLap() (r int, exists bool) {
	v := m.current_lap
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentLap returns the old "current_lap" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldCurrentLap(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentLap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentLap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentLap: %w", err)
	}
	return oldValue.CurrentLap, nil
}

// AddCurrentLap adds i to the "current_lap" field.
func (m *RoutineActRecMutation) AddCurrentLap(i int) {
	if m.addcurrent_lap != nil {
		*m.addcurrent_lap += i
	} else {
		m.addcurrent_lap = &i
	}
}

// AddedCurrentLap returns the value that was added to the "current_lap" field in this mutation.
func (m *RoutineActRecMutation) AddedCurrentLap() (r int, exists bool) {
	v := m.addcurrent_lap
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentLap resets all changes to the "current_lap" field.
func (m *RoutineActRecMutation) ResetCurrentLap() {
	m.current_lap = nil
	m.addcurrent_lap = nil
}

// SetImage sets the "image" field.
func (m *RoutineActRecMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *RoutineActRecMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldImage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *RoutineActRecMutation) ClearImage() {
	m.image = nil
	m.clearedFields[routineactrec.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *RoutineActRecMutation) ImageCleared() bool {
	_, ok := m.clearedFields[routineactrec.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *RoutineActRecMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, routineactrec.FieldImage)
}

// SetComment sets the "comment" field.
func (m *RoutineActRecMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *RoutineActRecMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *RoutineActRecMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[routineactrec.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *RoutineActRecMutation) CommentCleared() bool {
	_, ok := m.clearedFields[routineactrec.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *RoutineActRecMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, routineactrec.FieldComment)
}

// SetStatus sets the "status" field.
func (m *RoutineActRecMutation) SetStatus(r routineactrec.Status) {
	m.status = &r
}

// Status returns the value of the "status" field in the mutation.
func (m *RoutineActRecMutation) Status() (r routineactrec.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldStatus(ctx context.Context) (v routineactrec.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *RoutineActRecMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RoutineActRecMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoutineActRecMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoutineActRecMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoutineActRecMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoutineActRecMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RoutineActRec entity.
// If the RoutineActRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoutineActRecMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoutineActRecMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDailyRoutineRecID sets the "daily_routine_rec" edge to the DailyRoutineRec entity by id.
func (m *RoutineActRecMutation) SetDailyRoutineRecID(id uint64) {
	m.daily_routine_rec = &id
}

// ClearDailyRoutineRec clears the "daily_routine_rec" edge to the DailyRoutineRec entity.
func (m *RoutineActRecMutation) ClearDailyRoutineRec() {
	m.cleareddaily_routine_rec = true
}

// DailyRoutineRecCleared reports if the "daily_routine_rec" edge to the DailyRoutineRec entity was cleared.
func (m *RoutineActRecMutation) DailyRoutineRecCleared() bool {
	return m.cleareddaily_routine_rec
}

// DailyRoutineRecID returns the "daily_routine_rec" edge ID in the mutation.
func (m *RoutineActRecMutation) DailyRoutineRecID() (id uint64, exists bool) {
	if m.daily_routine_rec != nil {
		return *m.daily_routine_rec, true
	}
	return
}

// DailyRoutineRecIDs returns the "daily_routine_rec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DailyRoutineRecID instead. It exists only for internal usage by the builders.
func (m *RoutineActRecMutation) DailyRoutineRecIDs() (ids []uint64) {
	if id := m.daily_routine_rec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDailyRoutineRec resets all changes to the "daily_routine_rec" edge.
func (m *RoutineActRecMutation) ResetDailyRoutineRec() {
	m.daily_routine_rec = nil
	m.cleareddaily_routine_rec = false
}

// SetActID sets the "act" edge to the Act entity by id.
func (m *RoutineActRecMutation) SetActID(id uint64) {
	m.act = &id
}

// ClearAct clears the "act" edge to the Act entity.
func (m *RoutineActRecMutation) ClearAct() {
	m.clearedact = true
}

// ActCleared reports if the "act" edge to the Act entity was cleared.
func (m *RoutineActRecMutation) ActCleared() bool {
	return m.clearedact
}

// ActID returns the "act" edge ID in the mutation.
func (m *RoutineActRecMutation) ActID() (id uint64, exists bool) {
	if m.act != nil {
		return *m.act, true
	}
	return
}

// ActIDs returns the "act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActID instead. It exists only for internal usage by the builders.
func (m *RoutineActRecMutation) ActIDs() (ids []uint64) {
	if id := m.act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAct resets all changes to the "act" edge.
func (m *RoutineActRecMutation) ResetAct() {
	m.act = nil
	m.clearedact = false
}

// SetRoutineActID sets the "routine_act" edge to the RoutineAct entity by id.
func (m *RoutineActRecMutation) SetRoutineActID(id uint64) {
	m.routine_act = &id
}

// ClearRoutineAct clears the "routine_act" edge to the RoutineAct entity.
func (m *RoutineActRecMutation) ClearRoutineAct() {
	m.clearedroutine_act = true
}

// RoutineActCleared reports if the "routine_act" edge to the RoutineAct entity was cleared.
func (m *RoutineActRecMutation) RoutineActCleared() bool {
	return m.clearedroutine_act
}

// RoutineActID returns the "routine_act" edge ID in the mutation.
func (m *RoutineActRecMutation) RoutineActID() (id uint64, exists bool) {
	if m.routine_act != nil {
		return *m.routine_act, true
	}
	return
}

// RoutineActIDs returns the "routine_act" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoutineActID instead. It exists only for internal usage by the builders.
func (m *RoutineActRecMutation) RoutineActIDs() (ids []uint64) {
	if id := m.routine_act; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoutineAct resets all changes to the "routine_act" edge.
func (m *RoutineActRecMutation) ResetRoutineAct() {
	m.routine_act = nil
	m.clearedroutine_act = false
}

// Where appends a list predicates to the RoutineActRecMutation builder.
func (m *RoutineActRecMutation) Where(ps ...predicate.RoutineActRec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoutineActRecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoutineActRecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoutineActRec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoutineActRecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoutineActRecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoutineActRec).
func (m *RoutineActRecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoutineActRecMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.daily_routine_rec_id != nil {
		fields = append(fields, routineactrec.FieldDailyRoutineRecID)
	}
	if m.routine_act_id != nil {
		fields = append(fields, routineactrec.FieldRoutineActID)
	}
	if m.act_id != nil {
		fields = append(fields, routineactrec.FieldActID)
	}
	if m._order != nil {
		fields = append(fields, routineactrec.FieldOrder)
	}
	if m.reps != nil {
		fields = append(fields, routineactrec.FieldReps)
	}
	if m.lap != nil {
		fields = append(fields, routineactrec.FieldLap)
	}
	if m.current_reps != nil {
		fields = append(fields, routineactrec.FieldCurrentReps)
	}
	if m.current_lap != nil {
		fields = append(fields, routineactrec.FieldCurrentLap)
	}
	if m.image != nil {
		fields = append(fields, routineactrec.FieldImage)
	}
	if m.comment != nil {
		fields = append(fields, routineactrec.FieldComment)
	}
	if m.status != nil {
		fields = append(fields, routineactrec.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, routineactrec.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, routineactrec.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoutineActRecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case routineactrec.FieldDailyRoutineRecID:
		return m.DailyRoutineRecID()
	case routineactrec.FieldRoutineActID:
		return m.RoutineActID()
	case routineactrec.FieldActID:
		return m.ActID()
	case routineactrec.FieldOrder:
		return m.Order()
	case routineactrec.FieldReps:
		return m.Reps()
	case routineactrec.FieldLap:
		return m.Lap()
	case routineactrec.FieldCurrentReps:
		return m.CurrentReps()
	case routineactrec.FieldCurrentLap:
		return m.CurrentLap()
	case routineactrec.FieldImage:
		return m.Image()
	case routineactrec.FieldComment:
		return m.Comment()
	case routineactrec.FieldStatus:
		return m.Status()
	case routineactrec.FieldCreatedAt:
		return m.CreatedAt()
	case routineactrec.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoutineActRecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case routineactrec.FieldDailyRoutineRecID:
		return m.OldDailyRoutineRecID(ctx)
	case routineactrec.FieldRoutineActID:
		return m.OldRoutineActID(ctx)
	case routineactrec.FieldActID:
		return m.OldActID(ctx)
	case routineactrec.FieldOrder:
		return m.OldOrder(ctx)
	case routineactrec.FieldReps:
		return m.OldReps(ctx)
	case routineactrec.FieldLap:
		return m.OldLap(ctx)
	case routineactrec.FieldCurrentReps:
		return m.OldCurrentReps(ctx)
	case routineactrec.FieldCurrentLap:
		return m.OldCurrentLap(ctx)
	case routineactrec.FieldImage:
		return m.OldImage(ctx)
	case routineactrec.FieldComment:
		return m.OldComment(ctx)
	case routineactrec.FieldStatus:
		return m.OldStatus(ctx)
	case routineactrec.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case routineactrec.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RoutineActRec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActRecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case routineactrec.FieldDailyRoutineRecID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyRoutineRecID(v)
		return nil
	case routineactrec.FieldRoutineActID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoutineActID(v)
		return nil
	case routineactrec.FieldActID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActID(v)
		return nil
	case routineactrec.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case routineactrec.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReps(v)
		return nil
	case routineactrec.FieldLap:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLap(v)
		return nil
	case routineactrec.FieldCurrentReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentReps(v)
		return nil
	case routineactrec.FieldCurrentLap:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentLap(v)
		return nil
	case routineactrec.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case routineactrec.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case routineactrec.FieldStatus:
		v, ok := value.(routineactrec.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case routineactrec.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case routineactrec.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineActRec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoutineActRecMutation) AddedFields() []string {
	var fields []string
	if m.adddaily_routine_rec_id != nil {
		fields = append(fields, routineactrec.FieldDailyRoutineRecID)
	}
	if m.addroutine_act_id != nil {
		fields = append(fields, routineactrec.FieldRoutineActID)
	}
	if m.addact_id != nil {
		fields = append(fields, routineactrec.FieldActID)
	}
	if m.add_order != nil {
		fields = append(fields, routineactrec.FieldOrder)
	}
	if m.addreps != nil {
		fields = append(fields, routineactrec.FieldReps)
	}
	if m.addlap != nil {
		fields = append(fields, routineactrec.FieldLap)
	}
	if m.addcurrent_reps != nil {
		fields = append(fields, routineactrec.FieldCurrentReps)
	}
	if m.addcurrent_lap != nil {
		fields = append(fields, routineactrec.FieldCurrentLap)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoutineActRecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case routineactrec.FieldDailyRoutineRecID:
		return m.AddedDailyRoutineRecID()
	case routineactrec.FieldRoutineActID:
		return m.AddedRoutineActID()
	case routineactrec.FieldActID:
		return m.AddedActID()
	case routineactrec.FieldOrder:
		return m.AddedOrder()
	case routineactrec.FieldReps:
		return m.AddedReps()
	case routineactrec.FieldLap:
		return m.AddedLap()
	case routineactrec.FieldCurrentReps:
		return m.AddedCurrentReps()
	case routineactrec.FieldCurrentLap:
		return m.AddedCurrentLap()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoutineActRecMutation) AddField(name string, value ent.Value) error {
	switch name {
	case routineactrec.FieldDailyRoutineRecID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDailyRoutineRecID(v)
		return nil
	case routineactrec.FieldRoutineActID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoutineActID(v)
		return nil
	case routineactrec.FieldActID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActID(v)
		return nil
	case routineactrec.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case routineactrec.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReps(v)
		return nil
	case routineactrec.FieldLap:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLap(v)
		return nil
	case routineactrec.FieldCurrentReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentReps(v)
		return nil
	case routineactrec.FieldCurrentLap:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentLap(v)
		return nil
	}
	return fmt.Errorf("unknown RoutineActRec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoutineActRecMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(routineactrec.FieldRoutineActID) {
		fields = append(fields, routineactrec.FieldRoutineActID)
	}
	if m.FieldCleared(routineactrec.FieldActID) {
		fields = append(fields, routineactrec.FieldActID)
	}
	if m.FieldCleared(routineactrec.FieldReps) {
		fields = append(fields, routineactrec.FieldReps)
	}
	if m.FieldCleared(routineactrec.FieldLap) {
		fields = append(fields, routineactrec.FieldLap)
	}
	if m.FieldCleared(routineactrec.FieldImage) {
		fields = append(fields, routineactrec.FieldImage)
	}
	if m.FieldCleared(routineactrec.FieldComment) {
		fields = append(fields, routineactrec.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoutineActRecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoutineActRecMutation) ClearField(name string) error {
	switch name {
	case routineactrec.FieldRoutineActID:
		m.ClearRoutineActID()
		return nil
	case routineactrec.FieldActID:
		m.ClearActID()
		return nil
	case routineactrec.FieldReps:
		m.ClearReps()
		return nil
	case routineactrec.FieldLap:
		m.ClearLap()
		return nil
	case routineactrec.FieldImage:
		m.ClearImage()
		return nil
	case routineactrec.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown RoutineActRec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoutineActRecMutation) ResetField(name string) error {
	switch name {
	case routineactrec.FieldDailyRoutineRecID:
		m.ResetDailyRoutineRecID()
		return nil
	case routineactrec.FieldRoutineActID:
		m.ResetRoutineActID()
		return nil
	case routineactrec.FieldActID:
		m.ResetActID()
		return nil
	case routineactrec.FieldOrder:
		m.ResetOrder()
		return nil
	case routineactrec.FieldReps:
		m.ResetReps()
		return nil
	case routineactrec.FieldLap:
		m.ResetLap()
		return nil
	case routineactrec.FieldCurrentReps:
		m.ResetCurrentReps()
		return nil
	case routineactrec.FieldCurrentLap:
		m.ResetCurrentLap()
		return nil
	case routineactrec.FieldImage:
		m.ResetImage()
		return nil
	case routineactrec.FieldComment:
		m.ResetComment()
		return nil
	case routineactrec.FieldStatus:
		m.ResetStatus()
		return nil
	case routineactrec.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case routineactrec.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown RoutineActRec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoutineActRecMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.daily_routine_rec != nil {
		edges = append(edges, routineactrec.EdgeDailyRoutineRec)
	}
	if m.act != nil {
		edges = append(edges, routineactrec.EdgeAct)
	}
	if m.routine_act != nil {
		edges = append(edges, routineactrec.EdgeRoutineAct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoutineActRecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case routineactrec.EdgeDailyRoutineRec:
		if id := m.daily_routine_rec; id != nil {
			return []ent.Value{*id}
		}
	case routineactrec.EdgeAct:
		if id := m.act; id != nil {
			return []ent.Value{*id}
		}
	case routineactrec.EdgeRoutineAct:
		if id := m.routine_act; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoutineActRecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoutineActRecMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoutineActRecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddaily_routine_rec {
		edges = append(edges, routineactrec.EdgeDailyRoutineRec)
	}
	if m.clearedact {
		edges = append(edges, routineactrec.EdgeAct)
	}
	if m.clearedroutine_act {
		edges = append(edges, routineactrec.EdgeRoutineAct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoutineActRecMutation) EdgeCleared(name string) bool {
	switch name {
	case routineactrec.EdgeDailyRoutineRec:
		return m.cleareddaily_routine_rec
	case routineactrec.EdgeAct:
		return m.clearedact
	case routineactrec.EdgeRoutineAct:
		return m.clearedroutine_act
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoutineActRecMutation) ClearEdge(name string) error {
	switch name {
	case routineactrec.EdgeDailyRoutineRec:
		m.ClearDailyRoutineRec()
		return nil
	case routineactrec.EdgeAct:
		m.ClearAct()
		return nil
	case routineactrec.EdgeRoutineAct:
		m.ClearRoutineAct()
		return nil
	}
	return fmt.Errorf("unknown RoutineActRec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoutineActRecMutation) ResetEdge(name string) error {
	switch name {
	case routineactrec.EdgeDailyRoutineRec:
		m.ResetDailyRoutineRec()
		return nil
	case routineactrec.EdgeAct:
		m.ResetAct()
		return nil
	case routineactrec.EdgeRoutineAct:
		m.ResetRoutineAct()
		return nil
	}
	return fmt.Errorf("unknown RoutineActRec edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	tag             *string
	clearedFields   map[string]struct{}
	acts            map[uint64]struct{}
	removedacts     map[uint64]struct{}
	clearedacts     bool
	programs        map[uint64]struct{}
	removedprograms map[uint64]struct{}
	clearedprograms bool
	done            bool
	oldValue        func(context.Context) (*Tag, error)
	predicates      []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id uint64) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tag entities.
func (m *TagMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTag sets the "tag" field.
func (m *TagMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *TagMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *TagMutation) ResetTag() {
	m.tag = nil
}

// AddActIDs adds the "acts" edge to the Act entity by ids.
func (m *TagMutation) AddActIDs(ids ...uint64) {
	if m.acts == nil {
		m.acts = make(map[uint64]struct{})
	}
	for i := range ids {
		m.acts[ids[i]] = struct{}{}
	}
}

// ClearActs clears the "acts" edge to the Act entity.
func (m *TagMutation) ClearActs() {
	m.clearedacts = true
}

// ActsCleared reports if the "acts" edge to the Act entity was cleared.
func (m *TagMutation) ActsCleared() bool {
	return m.clearedacts
}

// RemoveActIDs removes the "acts" edge to the Act entity by IDs.
func (m *TagMutation) RemoveActIDs(ids ...uint64) {
	if m.removedacts == nil {
		m.removedacts = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.acts, ids[i])
		m.removedacts[ids[i]] = struct{}{}
	}
}

// RemovedActs returns the removed IDs of the "acts" edge to the Act entity.
func (m *TagMutation) RemovedActsIDs() (ids []uint64) {
	for id := range m.removedacts {
		ids = append(ids, id)
	}
	return
}

// ActsIDs returns the "acts" edge IDs in the mutation.
func (m *TagMutation) ActsIDs() (ids []uint64) {
	for id := range m.acts {
		ids = append(ids, id)
	}
	return
}

// ResetActs resets all changes to the "acts" edge.
func (m *TagMutation) ResetActs() {
	m.acts = nil
	m.clearedacts = false
	m.removedacts = nil
}

// AddProgramIDs adds the "programs" edge to the Program entity by ids.
func (m *TagMutation) AddProgramIDs(ids ...uint64) {
	if m.programs == nil {
		m.programs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.programs[ids[i]] = struct{}{}
	}
}

// ClearPrograms clears the "programs" edge to the Program entity.
func (m *TagMutation) ClearPrograms() {
	m.clearedprograms = true
}

// ProgramsCleared reports if the "programs" edge to the Program entity was cleared.
func (m *TagMutation) ProgramsCleared() bool {
	return m.clearedprograms
}

// RemoveProgramIDs removes the "programs" edge to the Program entity by IDs.
func (m *TagMutation) RemoveProgramIDs(ids ...uint64) {
	if m.removedprograms == nil {
		m.removedprograms = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.programs, ids[i])
		m.removedprograms[ids[i]] = struct{}{}
	}
}

// RemovedPrograms returns the removed IDs of the "programs" edge to the Program entity.
func (m *TagMutation) RemovedProgramsIDs() (ids []uint64) {
	for id := range m.removedprograms {
		ids = append(ids, id)
	}
	return
}

// ProgramsIDs returns the "programs" edge IDs in the mutation.
func (m *TagMutation) ProgramsIDs() (ids []uint64) {
	for id := range m.programs {
		ids = append(ids, id)
	}
	return
}

// ResetPrograms resets all changes to the "programs" edge.
func (m *TagMutation) ResetPrograms() {
	m.programs = nil
	m.clearedprograms = false
	m.removedprograms = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.tag != nil {
		fields = append(fields, tag.FieldTag)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldTag:
		return m.Tag()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldTag:
		return m.OldTag(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldTag:
		m.ResetTag()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.acts != nil {
		edges = append(edges, tag.EdgeActs)
	}
	if m.programs != nil {
		edges = append(edges, tag.EdgePrograms)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeActs:
		ids := make([]ent.Value, 0, len(m.acts))
		for id := range m.acts {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgePrograms:
		ids := make([]ent.Value, 0, len(m.programs))
		for id := range m.programs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedacts != nil {
		edges = append(edges, tag.EdgeActs)
	}
	if m.removedprograms != nil {
		edges = append(edges, tag.EdgePrograms)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeActs:
		ids := make([]ent.Value, 0, len(m.removedacts))
		for id := range m.removedacts {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgePrograms:
		ids := make([]ent.Value, 0, len(m.removedprograms))
		for id := range m.removedprograms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedacts {
		edges = append(edges, tag.EdgeActs)
	}
	if m.clearedprograms {
		edges = append(edges, tag.EdgePrograms)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeActs:
		return m.clearedacts
	case tag.EdgePrograms:
		return m.clearedprograms
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeActs:
		m.ResetActs()
		return nil
	case tag.EdgePrograms:
		m.ResetPrograms()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// WeeklyRoutineMutation represents an operation that mutates the WeeklyRoutine nodes in the graph.
type WeeklyRoutineMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uint64
	program_id                 *uint64
	addprogram_id              *int64
	week                       *int
	addweek                    *int
	created_at                 *time.Time
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	program                    map[uint64]struct{}
	removedprogram             map[uint64]struct{}
	clearedprogram             bool
	daily_routines             map[uint64]struct{}
	removeddaily_routines      map[uint64]struct{}
	cleareddaily_routines      bool
	weekly_routine_recs        map[uint64]struct{}
	removedweekly_routine_recs map[uint64]struct{}
	clearedweekly_routine_recs bool
	done                       bool
	oldValue                   func(context.Context) (*WeeklyRoutine, error)
	predicates                 []predicate.WeeklyRoutine
}

var _ ent.Mutation = (*WeeklyRoutineMutation)(nil)

// weeklyroutineOption allows management of the mutation configuration using functional options.
type weeklyroutineOption func(*WeeklyRoutineMutation)

// newWeeklyRoutineMutation creates new mutation for the WeeklyRoutine entity.
func newWeeklyRoutineMutation(c config, op Op, opts ...weeklyroutineOption) *WeeklyRoutineMutation {
	m := &WeeklyRoutineMutation{
		config:        c,
		op:            op,
		typ:           TypeWeeklyRoutine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeeklyRoutineID sets the ID field of the mutation.
func withWeeklyRoutineID(id uint64) weeklyroutineOption {
	return func(m *WeeklyRoutineMutation) {
		var (
			err   error
			once  sync.Once
			value *WeeklyRoutine
		)
		m.oldValue = func(ctx context.Context) (*WeeklyRoutine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WeeklyRoutine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeeklyRoutine sets the old WeeklyRoutine of the mutation.
func withWeeklyRoutine(node *WeeklyRoutine) weeklyroutineOption {
	return func(m *WeeklyRoutineMutation) {
		m.oldValue = func(context.Context) (*WeeklyRoutine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeeklyRoutineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeeklyRoutineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WeeklyRoutine entities.
func (m *WeeklyRoutineMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeeklyRoutineMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeeklyRoutineMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WeeklyRoutine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProgramID sets the "program_id" field.
func (m *WeeklyRoutineMutation) SetProgramID(u uint64) {
	m.program_id = &u
	m.addprogram_id = nil
}

// ProgramID returns the value of the "program_id" field in the mutation.
func (m *WeeklyRoutineMutation) ProgramID() (r uint64, exists bool) {
	v := m.program_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramID returns the old "program_id" field's value of the WeeklyRoutine entity.
// If the WeeklyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineMutation) OldProgramID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramID: %w", err)
	}
	return oldValue.ProgramID, nil
}

// AddProgramID adds u to the "program_id" field.
func (m *WeeklyRoutineMutation) AddProgramID(u int64) {
	if m.addprogram_id != nil {
		*m.addprogram_id += u
	} else {
		m.addprogram_id = &u
	}
}

// AddedProgramID returns the value that was added to the "program_id" field in this mutation.
func (m *WeeklyRoutineMutation) AddedProgramID() (r int64, exists bool) {
	v := m.addprogram_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgramID resets all changes to the "program_id" field.
func (m *WeeklyRoutineMutation) ResetProgramID() {
	m.program_id = nil
	m.addprogram_id = nil
}

// SetWeek sets the "week" field.
func (m *WeeklyRoutineMutation) SetWeek(i int) {
	m.week = &i
	m.addweek = nil
}

// Week returns the value of the "week" field in the mutation.
func (m *WeeklyRoutineMutation) Week() (r int, exists bool) {
	v := m.week
	if v == nil {
		return
	}
	return *v, true
}

// OldWeek returns the old "week" field's value of the WeeklyRoutine entity.
// If the WeeklyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineMutation) OldWeek(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeek is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeek requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeek: %w", err)
	}
	return oldValue.Week, nil
}

// AddWeek adds i to the "week" field.
func (m *WeeklyRoutineMutation) AddWeek(i int) {
	if m.addweek != nil {
		*m.addweek += i
	} else {
		m.addweek = &i
	}
}

// AddedWeek returns the value that was added to the "week" field in this mutation.
func (m *WeeklyRoutineMutation) AddedWeek() (r int, exists bool) {
	v := m.addweek
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeek resets all changes to the "week" field.
func (m *WeeklyRoutineMutation) ResetWeek() {
	m.week = nil
	m.addweek = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WeeklyRoutineMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WeeklyRoutineMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WeeklyRoutine entity.
// If the WeeklyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WeeklyRoutineMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WeeklyRoutineMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WeeklyRoutineMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WeeklyRoutine entity.
// If the WeeklyRoutine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WeeklyRoutineMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProgramIDs adds the "program" edge to the Program entity by ids.
func (m *WeeklyRoutineMutation) AddProgramIDs(ids ...uint64) {
	if m.program == nil {
		m.program = make(map[uint64]struct{})
	}
	for i := range ids {
		m.program[ids[i]] = struct{}{}
	}
}

// ClearProgram clears the "program" edge to the Program entity.
func (m *WeeklyRoutineMutation) ClearProgram() {
	m.clearedprogram = true
}

// ProgramCleared reports if the "program" edge to the Program entity was cleared.
func (m *WeeklyRoutineMutation) ProgramCleared() bool {
	return m.clearedprogram
}

// RemoveProgramIDs removes the "program" edge to the Program entity by IDs.
func (m *WeeklyRoutineMutation) RemoveProgramIDs(ids ...uint64) {
	if m.removedprogram == nil {
		m.removedprogram = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.program, ids[i])
		m.removedprogram[ids[i]] = struct{}{}
	}
}

// RemovedProgram returns the removed IDs of the "program" edge to the Program entity.
func (m *WeeklyRoutineMutation) RemovedProgramIDs() (ids []uint64) {
	for id := range m.removedprogram {
		ids = append(ids, id)
	}
	return
}

// ProgramIDs returns the "program" edge IDs in the mutation.
func (m *WeeklyRoutineMutation) ProgramIDs() (ids []uint64) {
	for id := range m.program {
		ids = append(ids, id)
	}
	return
}

// ResetProgram resets all changes to the "program" edge.
func (m *WeeklyRoutineMutation) ResetProgram() {
	m.program = nil
	m.clearedprogram = false
	m.removedprogram = nil
}

// AddDailyRoutineIDs adds the "daily_routines" edge to the DailyRoutine entity by ids.
func (m *WeeklyRoutineMutation) AddDailyRoutineIDs(ids ...uint64) {
	if m.daily_routines == nil {
		m.daily_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		m.daily_routines[ids[i]] = struct{}{}
	}
}

// ClearDailyRoutines clears the "daily_routines" edge to the DailyRoutine entity.
func (m *WeeklyRoutineMutation) ClearDailyRoutines() {
	m.cleareddaily_routines = true
}

// DailyRoutinesCleared reports if the "daily_routines" edge to the DailyRoutine entity was cleared.
func (m *WeeklyRoutineMutation) DailyRoutinesCleared() bool {
	return m.cleareddaily_routines
}

// RemoveDailyRoutineIDs removes the "daily_routines" edge to the DailyRoutine entity by IDs.
func (m *WeeklyRoutineMutation) RemoveDailyRoutineIDs(ids ...uint64) {
	if m.removeddaily_routines == nil {
		m.removeddaily_routines = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.daily_routines, ids[i])
		m.removeddaily_routines[ids[i]] = struct{}{}
	}
}

// RemovedDailyRoutines returns the removed IDs of the "daily_routines" edge to the DailyRoutine entity.
func (m *WeeklyRoutineMutation) RemovedDailyRoutinesIDs() (ids []uint64) {
	for id := range m.removeddaily_routines {
		ids = append(ids, id)
	}
	return
}

// DailyRoutinesIDs returns the "daily_routines" edge IDs in the mutation.
func (m *WeeklyRoutineMutation) DailyRoutinesIDs() (ids []uint64) {
	for id := range m.daily_routines {
		ids = append(ids, id)
	}
	return
}

// ResetDailyRoutines resets all changes to the "daily_routines" edge.
func (m *WeeklyRoutineMutation) ResetDailyRoutines() {
	m.daily_routines = nil
	m.cleareddaily_routines = false
	m.removeddaily_routines = nil
}

// AddWeeklyRoutineRecIDs adds the "weekly_routine_recs" edge to the WeeklyRoutineRec entity by ids.
func (m *WeeklyRoutineMutation) AddWeeklyRoutineRecIDs(ids ...uint64) {
	if m.weekly_routine_recs == nil {
		m.weekly_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.weekly_routine_recs[ids[i]] = struct{}{}
	}
}

// ClearWeeklyRoutineRecs clears the "weekly_routine_recs" edge to the WeeklyRoutineRec entity.
func (m *WeeklyRoutineMutation) ClearWeeklyRoutineRecs() {
	m.clearedweekly_routine_recs = true
}

// WeeklyRoutineRecsCleared reports if the "weekly_routine_recs" edge to the WeeklyRoutineRec entity was cleared.
func (m *WeeklyRoutineMutation) WeeklyRoutineRecsCleared() bool {
	return m.clearedweekly_routine_recs
}

// RemoveWeeklyRoutineRecIDs removes the "weekly_routine_recs" edge to the WeeklyRoutineRec entity by IDs.
func (m *WeeklyRoutineMutation) RemoveWeeklyRoutineRecIDs(ids ...uint64) {
	if m.removedweekly_routine_recs == nil {
		m.removedweekly_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.weekly_routine_recs, ids[i])
		m.removedweekly_routine_recs[ids[i]] = struct{}{}
	}
}

// RemovedWeeklyRoutineRecs returns the removed IDs of the "weekly_routine_recs" edge to the WeeklyRoutineRec entity.
func (m *WeeklyRoutineMutation) RemovedWeeklyRoutineRecsIDs() (ids []uint64) {
	for id := range m.removedweekly_routine_recs {
		ids = append(ids, id)
	}
	return
}

// WeeklyRoutineRecsIDs returns the "weekly_routine_recs" edge IDs in the mutation.
func (m *WeeklyRoutineMutation) WeeklyRoutineRecsIDs() (ids []uint64) {
	for id := range m.weekly_routine_recs {
		ids = append(ids, id)
	}
	return
}

// ResetWeeklyRoutineRecs resets all changes to the "weekly_routine_recs" edge.
func (m *WeeklyRoutineMutation) ResetWeeklyRoutineRecs() {
	m.weekly_routine_recs = nil
	m.clearedweekly_routine_recs = false
	m.removedweekly_routine_recs = nil
}

// Where appends a list predicates to the WeeklyRoutineMutation builder.
func (m *WeeklyRoutineMutation) Where(ps ...predicate.WeeklyRoutine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeeklyRoutineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeeklyRoutineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WeeklyRoutine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeeklyRoutineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeeklyRoutineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WeeklyRoutine).
func (m *WeeklyRoutineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeeklyRoutineMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.program_id != nil {
		fields = append(fields, weeklyroutine.FieldProgramID)
	}
	if m.week != nil {
		fields = append(fields, weeklyroutine.FieldWeek)
	}
	if m.created_at != nil {
		fields = append(fields, weeklyroutine.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, weeklyroutine.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeeklyRoutineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weeklyroutine.FieldProgramID:
		return m.ProgramID()
	case weeklyroutine.FieldWeek:
		return m.Week()
	case weeklyroutine.FieldCreatedAt:
		return m.CreatedAt()
	case weeklyroutine.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeeklyRoutineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weeklyroutine.FieldProgramID:
		return m.OldProgramID(ctx)
	case weeklyroutine.FieldWeek:
		return m.OldWeek(ctx)
	case weeklyroutine.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case weeklyroutine.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WeeklyRoutine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeeklyRoutineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weeklyroutine.FieldProgramID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramID(v)
		return nil
	case weeklyroutine.FieldWeek:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeek(v)
		return nil
	case weeklyroutine.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case weeklyroutine.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeeklyRoutineMutation) AddedFields() []string {
	var fields []string
	if m.addprogram_id != nil {
		fields = append(fields, weeklyroutine.FieldProgramID)
	}
	if m.addweek != nil {
		fields = append(fields, weeklyroutine.FieldWeek)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeeklyRoutineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case weeklyroutine.FieldProgramID:
		return m.AddedProgramID()
	case weeklyroutine.FieldWeek:
		return m.AddedWeek()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeeklyRoutineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case weeklyroutine.FieldProgramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgramID(v)
		return nil
	case weeklyroutine.FieldWeek:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeek(v)
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeeklyRoutineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeeklyRoutineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeeklyRoutineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WeeklyRoutine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeeklyRoutineMutation) ResetField(name string) error {
	switch name {
	case weeklyroutine.FieldProgramID:
		m.ResetProgramID()
		return nil
	case weeklyroutine.FieldWeek:
		m.ResetWeek()
		return nil
	case weeklyroutine.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case weeklyroutine.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeeklyRoutineMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.program != nil {
		edges = append(edges, weeklyroutine.EdgeProgram)
	}
	if m.daily_routines != nil {
		edges = append(edges, weeklyroutine.EdgeDailyRoutines)
	}
	if m.weekly_routine_recs != nil {
		edges = append(edges, weeklyroutine.EdgeWeeklyRoutineRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeeklyRoutineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weeklyroutine.EdgeProgram:
		ids := make([]ent.Value, 0, len(m.program))
		for id := range m.program {
			ids = append(ids, id)
		}
		return ids
	case weeklyroutine.EdgeDailyRoutines:
		ids := make([]ent.Value, 0, len(m.daily_routines))
		for id := range m.daily_routines {
			ids = append(ids, id)
		}
		return ids
	case weeklyroutine.EdgeWeeklyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.weekly_routine_recs))
		for id := range m.weekly_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeeklyRoutineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedprogram != nil {
		edges = append(edges, weeklyroutine.EdgeProgram)
	}
	if m.removeddaily_routines != nil {
		edges = append(edges, weeklyroutine.EdgeDailyRoutines)
	}
	if m.removedweekly_routine_recs != nil {
		edges = append(edges, weeklyroutine.EdgeWeeklyRoutineRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeeklyRoutineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case weeklyroutine.EdgeProgram:
		ids := make([]ent.Value, 0, len(m.removedprogram))
		for id := range m.removedprogram {
			ids = append(ids, id)
		}
		return ids
	case weeklyroutine.EdgeDailyRoutines:
		ids := make([]ent.Value, 0, len(m.removeddaily_routines))
		for id := range m.removeddaily_routines {
			ids = append(ids, id)
		}
		return ids
	case weeklyroutine.EdgeWeeklyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.removedweekly_routine_recs))
		for id := range m.removedweekly_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeeklyRoutineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprogram {
		edges = append(edges, weeklyroutine.EdgeProgram)
	}
	if m.cleareddaily_routines {
		edges = append(edges, weeklyroutine.EdgeDailyRoutines)
	}
	if m.clearedweekly_routine_recs {
		edges = append(edges, weeklyroutine.EdgeWeeklyRoutineRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeeklyRoutineMutation) EdgeCleared(name string) bool {
	switch name {
	case weeklyroutine.EdgeProgram:
		return m.clearedprogram
	case weeklyroutine.EdgeDailyRoutines:
		return m.cleareddaily_routines
	case weeklyroutine.EdgeWeeklyRoutineRecs:
		return m.clearedweekly_routine_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeeklyRoutineMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WeeklyRoutine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeeklyRoutineMutation) ResetEdge(name string) error {
	switch name {
	case weeklyroutine.EdgeProgram:
		m.ResetProgram()
		return nil
	case weeklyroutine.EdgeDailyRoutines:
		m.ResetDailyRoutines()
		return nil
	case weeklyroutine.EdgeWeeklyRoutineRecs:
		m.ResetWeeklyRoutineRecs()
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutine edge %s", name)
}

// WeeklyRoutineRecMutation represents an operation that mutates the WeeklyRoutineRec nodes in the graph.
type WeeklyRoutineRecMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uint64
	program_rec_id            *uint64
	addprogram_rec_id         *int64
	weekly_routine_id         *uint64
	addweekly_routine_id      *int64
	start_date                *time.Time
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	weekly_routine            *uint64
	clearedweekly_routine     bool
	program_rec               *uint64
	clearedprogram_rec        bool
	daily_routine_recs        map[uint64]struct{}
	removeddaily_routine_recs map[uint64]struct{}
	cleareddaily_routine_recs bool
	done                      bool
	oldValue                  func(context.Context) (*WeeklyRoutineRec, error)
	predicates                []predicate.WeeklyRoutineRec
}

var _ ent.Mutation = (*WeeklyRoutineRecMutation)(nil)

// weeklyroutinerecOption allows management of the mutation configuration using functional options.
type weeklyroutinerecOption func(*WeeklyRoutineRecMutation)

// newWeeklyRoutineRecMutation creates new mutation for the WeeklyRoutineRec entity.
func newWeeklyRoutineRecMutation(c config, op Op, opts ...weeklyroutinerecOption) *WeeklyRoutineRecMutation {
	m := &WeeklyRoutineRecMutation{
		config:        c,
		op:            op,
		typ:           TypeWeeklyRoutineRec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeeklyRoutineRecID sets the ID field of the mutation.
func withWeeklyRoutineRecID(id uint64) weeklyroutinerecOption {
	return func(m *WeeklyRoutineRecMutation) {
		var (
			err   error
			once  sync.Once
			value *WeeklyRoutineRec
		)
		m.oldValue = func(ctx context.Context) (*WeeklyRoutineRec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WeeklyRoutineRec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeeklyRoutineRec sets the old WeeklyRoutineRec of the mutation.
func withWeeklyRoutineRec(node *WeeklyRoutineRec) weeklyroutinerecOption {
	return func(m *WeeklyRoutineRecMutation) {
		m.oldValue = func(context.Context) (*WeeklyRoutineRec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeeklyRoutineRecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeeklyRoutineRecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WeeklyRoutineRec entities.
func (m *WeeklyRoutineRecMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeeklyRoutineRecMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeeklyRoutineRecMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WeeklyRoutineRec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProgramRecID sets the "program_rec_id" field.
func (m *WeeklyRoutineRecMutation) SetProgramRecID(u uint64) {
	m.program_rec_id = &u
	m.addprogram_rec_id = nil
}

// ProgramRecID returns the value of the "program_rec_id" field in the mutation.
func (m *WeeklyRoutineRecMutation) ProgramRecID() (r uint64, exists bool) {
	v := m.program_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProgramRecID returns the old "program_rec_id" field's value of the WeeklyRoutineRec entity.
// If the WeeklyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineRecMutation) OldProgramRecID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgramRecID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgramRecID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgramRecID: %w", err)
	}
	return oldValue.ProgramRecID, nil
}

// AddProgramRecID adds u to the "program_rec_id" field.
func (m *WeeklyRoutineRecMutation) AddProgramRecID(u int64) {
	if m.addprogram_rec_id != nil {
		*m.addprogram_rec_id += u
	} else {
		m.addprogram_rec_id = &u
	}
}

// AddedProgramRecID returns the value that was added to the "program_rec_id" field in this mutation.
func (m *WeeklyRoutineRecMutation) AddedProgramRecID() (r int64, exists bool) {
	v := m.addprogram_rec_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgramRecID resets all changes to the "program_rec_id" field.
func (m *WeeklyRoutineRecMutation) ResetProgramRecID() {
	m.program_rec_id = nil
	m.addprogram_rec_id = nil
}

// SetWeeklyRoutineID sets the "weekly_routine_id" field.
func (m *WeeklyRoutineRecMutation) SetWeeklyRoutineID(u uint64) {
	m.weekly_routine_id = &u
	m.addweekly_routine_id = nil
}

// WeeklyRoutineID returns the value of the "weekly_routine_id" field in the mutation.
func (m *WeeklyRoutineRecMutation) WeeklyRoutineID() (r uint64, exists bool) {
	v := m.weekly_routine_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWeeklyRoutineID returns the old "weekly_routine_id" field's value of the WeeklyRoutineRec entity.
// If the WeeklyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineRecMutation) OldWeeklyRoutineID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeeklyRoutineID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeeklyRoutineID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeeklyRoutineID: %w", err)
	}
	return oldValue.WeeklyRoutineID, nil
}

// AddWeeklyRoutineID adds u to the "weekly_routine_id" field.
func (m *WeeklyRoutineRecMutation) AddWeeklyRoutineID(u int64) {
	if m.addweekly_routine_id != nil {
		*m.addweekly_routine_id += u
	} else {
		m.addweekly_routine_id = &u
	}
}

// AddedWeeklyRoutineID returns the value that was added to the "weekly_routine_id" field in this mutation.
func (m *WeeklyRoutineRecMutation) AddedWeeklyRoutineID() (r int64, exists bool) {
	v := m.addweekly_routine_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeeklyRoutineID resets all changes to the "weekly_routine_id" field.
func (m *WeeklyRoutineRecMutation) ResetWeeklyRoutineID() {
	m.weekly_routine_id = nil
	m.addweekly_routine_id = nil
}

// SetStartDate sets the "start_date" field.
func (m *WeeklyRoutineRecMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *WeeklyRoutineRecMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the WeeklyRoutineRec entity.
// If the WeeklyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineRecMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *WeeklyRoutineRecMutation) ResetStartDate() {
	m.start_date = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WeeklyRoutineRecMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WeeklyRoutineRecMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WeeklyRoutineRec entity.
// If the WeeklyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineRecMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WeeklyRoutineRecMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WeeklyRoutineRecMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WeeklyRoutineRecMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WeeklyRoutineRec entity.
// If the WeeklyRoutineRec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeeklyRoutineRecMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WeeklyRoutineRecMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetWeeklyRoutineID sets the "weekly_routine" edge to the WeeklyRoutine entity by id.
func (m *WeeklyRoutineRecMutation) SetWeeklyRoutineID(id uint64) {
	m.weekly_routine = &id
}

// ClearWeeklyRoutine clears the "weekly_routine" edge to the WeeklyRoutine entity.
func (m *WeeklyRoutineRecMutation) ClearWeeklyRoutine() {
	m.clearedweekly_routine = true
}

// WeeklyRoutineCleared reports if the "weekly_routine" edge to the WeeklyRoutine entity was cleared.
func (m *WeeklyRoutineRecMutation) WeeklyRoutineCleared() bool {
	return m.clearedweekly_routine
}

// WeeklyRoutineID returns the "weekly_routine" edge ID in the mutation.
func (m *WeeklyRoutineRecMutation) WeeklyRoutineID() (id uint64, exists bool) {
	if m.weekly_routine != nil {
		return *m.weekly_routine, true
	}
	return
}

// WeeklyRoutineIDs returns the "weekly_routine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WeeklyRoutineID instead. It exists only for internal usage by the builders.
func (m *WeeklyRoutineRecMutation) WeeklyRoutineIDs() (ids []uint64) {
	if id := m.weekly_routine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWeeklyRoutine resets all changes to the "weekly_routine" edge.
func (m *WeeklyRoutineRecMutation) ResetWeeklyRoutine() {
	m.weekly_routine = nil
	m.clearedweekly_routine = false
}

// SetProgramRecID sets the "program_rec" edge to the ProgramRec entity by id.
func (m *WeeklyRoutineRecMutation) SetProgramRecID(id uint64) {
	m.program_rec = &id
}

// ClearProgramRec clears the "program_rec" edge to the ProgramRec entity.
func (m *WeeklyRoutineRecMutation) ClearProgramRec() {
	m.clearedprogram_rec = true
}

// ProgramRecCleared reports if the "program_rec" edge to the ProgramRec entity was cleared.
func (m *WeeklyRoutineRecMutation) ProgramRecCleared() bool {
	return m.clearedprogram_rec
}

// ProgramRecID returns the "program_rec" edge ID in the mutation.
func (m *WeeklyRoutineRecMutation) ProgramRecID() (id uint64, exists bool) {
	if m.program_rec != nil {
		return *m.program_rec, true
	}
	return
}

// ProgramRecIDs returns the "program_rec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProgramRecID instead. It exists only for internal usage by the builders.
func (m *WeeklyRoutineRecMutation) ProgramRecIDs() (ids []uint64) {
	if id := m.program_rec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProgramRec resets all changes to the "program_rec" edge.
func (m *WeeklyRoutineRecMutation) ResetProgramRec() {
	m.program_rec = nil
	m.clearedprogram_rec = false
}

// AddDailyRoutineRecIDs adds the "daily_routine_recs" edge to the DailyRoutineRec entity by ids.
func (m *WeeklyRoutineRecMutation) AddDailyRoutineRecIDs(ids ...uint64) {
	if m.daily_routine_recs == nil {
		m.daily_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.daily_routine_recs[ids[i]] = struct{}{}
	}
}

// ClearDailyRoutineRecs clears the "daily_routine_recs" edge to the DailyRoutineRec entity.
func (m *WeeklyRoutineRecMutation) ClearDailyRoutineRecs() {
	m.cleareddaily_routine_recs = true
}

// DailyRoutineRecsCleared reports if the "daily_routine_recs" edge to the DailyRoutineRec entity was cleared.
func (m *WeeklyRoutineRecMutation) DailyRoutineRecsCleared() bool {
	return m.cleareddaily_routine_recs
}

// RemoveDailyRoutineRecIDs removes the "daily_routine_recs" edge to the DailyRoutineRec entity by IDs.
func (m *WeeklyRoutineRecMutation) RemoveDailyRoutineRecIDs(ids ...uint64) {
	if m.removeddaily_routine_recs == nil {
		m.removeddaily_routine_recs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.daily_routine_recs, ids[i])
		m.removeddaily_routine_recs[ids[i]] = struct{}{}
	}
}

// RemovedDailyRoutineRecs returns the removed IDs of the "daily_routine_recs" edge to the DailyRoutineRec entity.
func (m *WeeklyRoutineRecMutation) RemovedDailyRoutineRecsIDs() (ids []uint64) {
	for id := range m.removeddaily_routine_recs {
		ids = append(ids, id)
	}
	return
}

// DailyRoutineRecsIDs returns the "daily_routine_recs" edge IDs in the mutation.
func (m *WeeklyRoutineRecMutation) DailyRoutineRecsIDs() (ids []uint64) {
	for id := range m.daily_routine_recs {
		ids = append(ids, id)
	}
	return
}

// ResetDailyRoutineRecs resets all changes to the "daily_routine_recs" edge.
func (m *WeeklyRoutineRecMutation) ResetDailyRoutineRecs() {
	m.daily_routine_recs = nil
	m.cleareddaily_routine_recs = false
	m.removeddaily_routine_recs = nil
}

// Where appends a list predicates to the WeeklyRoutineRecMutation builder.
func (m *WeeklyRoutineRecMutation) Where(ps ...predicate.WeeklyRoutineRec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeeklyRoutineRecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeeklyRoutineRecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WeeklyRoutineRec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeeklyRoutineRecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeeklyRoutineRecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WeeklyRoutineRec).
func (m *WeeklyRoutineRecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeeklyRoutineRecMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.program_rec_id != nil {
		fields = append(fields, weeklyroutinerec.FieldProgramRecID)
	}
	if m.weekly_routine_id != nil {
		fields = append(fields, weeklyroutinerec.FieldWeeklyRoutineID)
	}
	if m.start_date != nil {
		fields = append(fields, weeklyroutinerec.FieldStartDate)
	}
	if m.created_at != nil {
		fields = append(fields, weeklyroutinerec.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, weeklyroutinerec.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeeklyRoutineRecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weeklyroutinerec.FieldProgramRecID:
		return m.ProgramRecID()
	case weeklyroutinerec.FieldWeeklyRoutineID:
		return m.WeeklyRoutineID()
	case weeklyroutinerec.FieldStartDate:
		return m.StartDate()
	case weeklyroutinerec.FieldCreatedAt:
		return m.CreatedAt()
	case weeklyroutinerec.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeeklyRoutineRecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weeklyroutinerec.FieldProgramRecID:
		return m.OldProgramRecID(ctx)
	case weeklyroutinerec.FieldWeeklyRoutineID:
		return m.OldWeeklyRoutineID(ctx)
	case weeklyroutinerec.FieldStartDate:
		return m.OldStartDate(ctx)
	case weeklyroutinerec.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case weeklyroutinerec.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WeeklyRoutineRec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeeklyRoutineRecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weeklyroutinerec.FieldProgramRecID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgramRecID(v)
		return nil
	case weeklyroutinerec.FieldWeeklyRoutineID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeeklyRoutineID(v)
		return nil
	case weeklyroutinerec.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case weeklyroutinerec.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case weeklyroutinerec.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutineRec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeeklyRoutineRecMutation) AddedFields() []string {
	var fields []string
	if m.addprogram_rec_id != nil {
		fields = append(fields, weeklyroutinerec.FieldProgramRecID)
	}
	if m.addweekly_routine_id != nil {
		fields = append(fields, weeklyroutinerec.FieldWeeklyRoutineID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeeklyRoutineRecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case weeklyroutinerec.FieldProgramRecID:
		return m.AddedProgramRecID()
	case weeklyroutinerec.FieldWeeklyRoutineID:
		return m.AddedWeeklyRoutineID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeeklyRoutineRecMutation) AddField(name string, value ent.Value) error {
	switch name {
	case weeklyroutinerec.FieldProgramRecID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgramRecID(v)
		return nil
	case weeklyroutinerec.FieldWeeklyRoutineID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeeklyRoutineID(v)
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutineRec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeeklyRoutineRecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeeklyRoutineRecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeeklyRoutineRecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WeeklyRoutineRec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeeklyRoutineRecMutation) ResetField(name string) error {
	switch name {
	case weeklyroutinerec.FieldProgramRecID:
		m.ResetProgramRecID()
		return nil
	case weeklyroutinerec.FieldWeeklyRoutineID:
		m.ResetWeeklyRoutineID()
		return nil
	case weeklyroutinerec.FieldStartDate:
		m.ResetStartDate()
		return nil
	case weeklyroutinerec.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case weeklyroutinerec.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutineRec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeeklyRoutineRecMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.weekly_routine != nil {
		edges = append(edges, weeklyroutinerec.EdgeWeeklyRoutine)
	}
	if m.program_rec != nil {
		edges = append(edges, weeklyroutinerec.EdgeProgramRec)
	}
	if m.daily_routine_recs != nil {
		edges = append(edges, weeklyroutinerec.EdgeDailyRoutineRecs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeeklyRoutineRecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weeklyroutinerec.EdgeWeeklyRoutine:
		if id := m.weekly_routine; id != nil {
			return []ent.Value{*id}
		}
	case weeklyroutinerec.EdgeProgramRec:
		if id := m.program_rec; id != nil {
			return []ent.Value{*id}
		}
	case weeklyroutinerec.EdgeDailyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.daily_routine_recs))
		for id := range m.daily_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeeklyRoutineRecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddaily_routine_recs != nil {
		edges = append(edges, weeklyroutinerec.EdgeDailyRoutineRecs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeeklyRoutineRecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case weeklyroutinerec.EdgeDailyRoutineRecs:
		ids := make([]ent.Value, 0, len(m.removeddaily_routine_recs))
		for id := range m.removeddaily_routine_recs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeeklyRoutineRecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedweekly_routine {
		edges = append(edges, weeklyroutinerec.EdgeWeeklyRoutine)
	}
	if m.clearedprogram_rec {
		edges = append(edges, weeklyroutinerec.EdgeProgramRec)
	}
	if m.cleareddaily_routine_recs {
		edges = append(edges, weeklyroutinerec.EdgeDailyRoutineRecs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeeklyRoutineRecMutation) EdgeCleared(name string) bool {
	switch name {
	case weeklyroutinerec.EdgeWeeklyRoutine:
		return m.clearedweekly_routine
	case weeklyroutinerec.EdgeProgramRec:
		return m.clearedprogram_rec
	case weeklyroutinerec.EdgeDailyRoutineRecs:
		return m.cleareddaily_routine_recs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeeklyRoutineRecMutation) ClearEdge(name string) error {
	switch name {
	case weeklyroutinerec.EdgeWeeklyRoutine:
		m.ClearWeeklyRoutine()
		return nil
	case weeklyroutinerec.EdgeProgramRec:
		m.ClearProgramRec()
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutineRec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeeklyRoutineRecMutation) ResetEdge(name string) error {
	switch name {
	case weeklyroutinerec.EdgeWeeklyRoutine:
		m.ResetWeeklyRoutine()
		return nil
	case weeklyroutinerec.EdgeProgramRec:
		m.ResetProgramRec()
		return nil
	case weeklyroutinerec.EdgeDailyRoutineRecs:
		m.ResetDailyRoutineRecs()
		return nil
	}
	return fmt.Errorf("unknown WeeklyRoutineRec edge %s", name)
}

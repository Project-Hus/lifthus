// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/act"
	"routine/ent/onerepmax"
	"routine/ent/predicate"
	"routine/ent/programrec"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OneRepMaxUpdate is the builder for updating OneRepMax entities.
type OneRepMaxUpdate struct {
	config
	hooks    []Hook
	mutation *OneRepMaxMutation
}

// Where appends a list predicates to the OneRepMaxUpdate builder.
func (ormu *OneRepMaxUpdate) Where(ps ...predicate.OneRepMax) *OneRepMaxUpdate {
	ormu.mutation.Where(ps...)
	return ormu
}

// SetAuthor sets the "author" field.
func (ormu *OneRepMaxUpdate) SetAuthor(u uint64) *OneRepMaxUpdate {
	ormu.mutation.ResetAuthor()
	ormu.mutation.SetAuthor(u)
	return ormu
}

// AddAuthor adds u to the "author" field.
func (ormu *OneRepMaxUpdate) AddAuthor(u int64) *OneRepMaxUpdate {
	ormu.mutation.AddAuthor(u)
	return ormu
}

// SetActID sets the "act_id" field.
func (ormu *OneRepMaxUpdate) SetActID(u uint64) *OneRepMaxUpdate {
	ormu.mutation.SetActID(u)
	return ormu
}

// SetProgramRecID sets the "program_rec_id" field.
func (ormu *OneRepMaxUpdate) SetProgramRecID(u uint64) *OneRepMaxUpdate {
	ormu.mutation.SetProgramRecID(u)
	return ormu
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (ormu *OneRepMaxUpdate) SetNillableProgramRecID(u *uint64) *OneRepMaxUpdate {
	if u != nil {
		ormu.SetProgramRecID(*u)
	}
	return ormu
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (ormu *OneRepMaxUpdate) ClearProgramRecID() *OneRepMaxUpdate {
	ormu.mutation.ClearProgramRecID()
	return ormu
}

// SetDate sets the "date" field.
func (ormu *OneRepMaxUpdate) SetDate(t time.Time) *OneRepMaxUpdate {
	ormu.mutation.SetDate(t)
	return ormu
}

// SetOneRepMax sets the "one_rep_max" field.
func (ormu *OneRepMaxUpdate) SetOneRepMax(f float64) *OneRepMaxUpdate {
	ormu.mutation.ResetOneRepMax()
	ormu.mutation.SetOneRepMax(f)
	return ormu
}

// SetNillableOneRepMax sets the "one_rep_max" field if the given value is not nil.
func (ormu *OneRepMaxUpdate) SetNillableOneRepMax(f *float64) *OneRepMaxUpdate {
	if f != nil {
		ormu.SetOneRepMax(*f)
	}
	return ormu
}

// AddOneRepMax adds f to the "one_rep_max" field.
func (ormu *OneRepMaxUpdate) AddOneRepMax(f float64) *OneRepMaxUpdate {
	ormu.mutation.AddOneRepMax(f)
	return ormu
}

// ClearOneRepMax clears the value of the "one_rep_max" field.
func (ormu *OneRepMaxUpdate) ClearOneRepMax() *OneRepMaxUpdate {
	ormu.mutation.ClearOneRepMax()
	return ormu
}

// SetCertified sets the "certified" field.
func (ormu *OneRepMaxUpdate) SetCertified(b bool) *OneRepMaxUpdate {
	ormu.mutation.SetCertified(b)
	return ormu
}

// SetNillableCertified sets the "certified" field if the given value is not nil.
func (ormu *OneRepMaxUpdate) SetNillableCertified(b *bool) *OneRepMaxUpdate {
	if b != nil {
		ormu.SetCertified(*b)
	}
	return ormu
}

// SetCalculated sets the "calculated" field.
func (ormu *OneRepMaxUpdate) SetCalculated(b bool) *OneRepMaxUpdate {
	ormu.mutation.SetCalculated(b)
	return ormu
}

// SetNillableCalculated sets the "calculated" field if the given value is not nil.
func (ormu *OneRepMaxUpdate) SetNillableCalculated(b *bool) *OneRepMaxUpdate {
	if b != nil {
		ormu.SetCalculated(*b)
	}
	return ormu
}

// SetAct sets the "act" edge to the Act entity.
func (ormu *OneRepMaxUpdate) SetAct(a *Act) *OneRepMaxUpdate {
	return ormu.SetActID(a.ID)
}

// SetProgramRec sets the "program_rec" edge to the ProgramRec entity.
func (ormu *OneRepMaxUpdate) SetProgramRec(p *ProgramRec) *OneRepMaxUpdate {
	return ormu.SetProgramRecID(p.ID)
}

// Mutation returns the OneRepMaxMutation object of the builder.
func (ormu *OneRepMaxUpdate) Mutation() *OneRepMaxMutation {
	return ormu.mutation
}

// ClearAct clears the "act" edge to the Act entity.
func (ormu *OneRepMaxUpdate) ClearAct() *OneRepMaxUpdate {
	ormu.mutation.ClearAct()
	return ormu
}

// ClearProgramRec clears the "program_rec" edge to the ProgramRec entity.
func (ormu *OneRepMaxUpdate) ClearProgramRec() *OneRepMaxUpdate {
	ormu.mutation.ClearProgramRec()
	return ormu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ormu *OneRepMaxUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ormu.sqlSave, ormu.mutation, ormu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ormu *OneRepMaxUpdate) SaveX(ctx context.Context) int {
	affected, err := ormu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ormu *OneRepMaxUpdate) Exec(ctx context.Context) error {
	_, err := ormu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ormu *OneRepMaxUpdate) ExecX(ctx context.Context) {
	if err := ormu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ormu *OneRepMaxUpdate) check() error {
	if _, ok := ormu.mutation.ActID(); ormu.mutation.ActCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OneRepMax.act"`)
	}
	return nil
}

func (ormu *OneRepMaxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ormu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(onerepmax.Table, onerepmax.Columns, sqlgraph.NewFieldSpec(onerepmax.FieldID, field.TypeUint64))
	if ps := ormu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ormu.mutation.Author(); ok {
		_spec.SetField(onerepmax.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := ormu.mutation.AddedAuthor(); ok {
		_spec.AddField(onerepmax.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := ormu.mutation.Date(); ok {
		_spec.SetField(onerepmax.FieldDate, field.TypeTime, value)
	}
	if value, ok := ormu.mutation.OneRepMax(); ok {
		_spec.SetField(onerepmax.FieldOneRepMax, field.TypeFloat64, value)
	}
	if value, ok := ormu.mutation.AddedOneRepMax(); ok {
		_spec.AddField(onerepmax.FieldOneRepMax, field.TypeFloat64, value)
	}
	if ormu.mutation.OneRepMaxCleared() {
		_spec.ClearField(onerepmax.FieldOneRepMax, field.TypeFloat64)
	}
	if value, ok := ormu.mutation.Certified(); ok {
		_spec.SetField(onerepmax.FieldCertified, field.TypeBool, value)
	}
	if value, ok := ormu.mutation.Calculated(); ok {
		_spec.SetField(onerepmax.FieldCalculated, field.TypeBool, value)
	}
	if ormu.mutation.ActCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ActTable,
			Columns: []string{onerepmax.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ormu.mutation.ActIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ActTable,
			Columns: []string{onerepmax.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ormu.mutation.ProgramRecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ProgramRecTable,
			Columns: []string{onerepmax.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ormu.mutation.ProgramRecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ProgramRecTable,
			Columns: []string{onerepmax.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ormu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{onerepmax.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ormu.mutation.done = true
	return n, nil
}

// OneRepMaxUpdateOne is the builder for updating a single OneRepMax entity.
type OneRepMaxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OneRepMaxMutation
}

// SetAuthor sets the "author" field.
func (ormuo *OneRepMaxUpdateOne) SetAuthor(u uint64) *OneRepMaxUpdateOne {
	ormuo.mutation.ResetAuthor()
	ormuo.mutation.SetAuthor(u)
	return ormuo
}

// AddAuthor adds u to the "author" field.
func (ormuo *OneRepMaxUpdateOne) AddAuthor(u int64) *OneRepMaxUpdateOne {
	ormuo.mutation.AddAuthor(u)
	return ormuo
}

// SetActID sets the "act_id" field.
func (ormuo *OneRepMaxUpdateOne) SetActID(u uint64) *OneRepMaxUpdateOne {
	ormuo.mutation.SetActID(u)
	return ormuo
}

// SetProgramRecID sets the "program_rec_id" field.
func (ormuo *OneRepMaxUpdateOne) SetProgramRecID(u uint64) *OneRepMaxUpdateOne {
	ormuo.mutation.SetProgramRecID(u)
	return ormuo
}

// SetNillableProgramRecID sets the "program_rec_id" field if the given value is not nil.
func (ormuo *OneRepMaxUpdateOne) SetNillableProgramRecID(u *uint64) *OneRepMaxUpdateOne {
	if u != nil {
		ormuo.SetProgramRecID(*u)
	}
	return ormuo
}

// ClearProgramRecID clears the value of the "program_rec_id" field.
func (ormuo *OneRepMaxUpdateOne) ClearProgramRecID() *OneRepMaxUpdateOne {
	ormuo.mutation.ClearProgramRecID()
	return ormuo
}

// SetDate sets the "date" field.
func (ormuo *OneRepMaxUpdateOne) SetDate(t time.Time) *OneRepMaxUpdateOne {
	ormuo.mutation.SetDate(t)
	return ormuo
}

// SetOneRepMax sets the "one_rep_max" field.
func (ormuo *OneRepMaxUpdateOne) SetOneRepMax(f float64) *OneRepMaxUpdateOne {
	ormuo.mutation.ResetOneRepMax()
	ormuo.mutation.SetOneRepMax(f)
	return ormuo
}

// SetNillableOneRepMax sets the "one_rep_max" field if the given value is not nil.
func (ormuo *OneRepMaxUpdateOne) SetNillableOneRepMax(f *float64) *OneRepMaxUpdateOne {
	if f != nil {
		ormuo.SetOneRepMax(*f)
	}
	return ormuo
}

// AddOneRepMax adds f to the "one_rep_max" field.
func (ormuo *OneRepMaxUpdateOne) AddOneRepMax(f float64) *OneRepMaxUpdateOne {
	ormuo.mutation.AddOneRepMax(f)
	return ormuo
}

// ClearOneRepMax clears the value of the "one_rep_max" field.
func (ormuo *OneRepMaxUpdateOne) ClearOneRepMax() *OneRepMaxUpdateOne {
	ormuo.mutation.ClearOneRepMax()
	return ormuo
}

// SetCertified sets the "certified" field.
func (ormuo *OneRepMaxUpdateOne) SetCertified(b bool) *OneRepMaxUpdateOne {
	ormuo.mutation.SetCertified(b)
	return ormuo
}

// SetNillableCertified sets the "certified" field if the given value is not nil.
func (ormuo *OneRepMaxUpdateOne) SetNillableCertified(b *bool) *OneRepMaxUpdateOne {
	if b != nil {
		ormuo.SetCertified(*b)
	}
	return ormuo
}

// SetCalculated sets the "calculated" field.
func (ormuo *OneRepMaxUpdateOne) SetCalculated(b bool) *OneRepMaxUpdateOne {
	ormuo.mutation.SetCalculated(b)
	return ormuo
}

// SetNillableCalculated sets the "calculated" field if the given value is not nil.
func (ormuo *OneRepMaxUpdateOne) SetNillableCalculated(b *bool) *OneRepMaxUpdateOne {
	if b != nil {
		ormuo.SetCalculated(*b)
	}
	return ormuo
}

// SetAct sets the "act" edge to the Act entity.
func (ormuo *OneRepMaxUpdateOne) SetAct(a *Act) *OneRepMaxUpdateOne {
	return ormuo.SetActID(a.ID)
}

// SetProgramRec sets the "program_rec" edge to the ProgramRec entity.
func (ormuo *OneRepMaxUpdateOne) SetProgramRec(p *ProgramRec) *OneRepMaxUpdateOne {
	return ormuo.SetProgramRecID(p.ID)
}

// Mutation returns the OneRepMaxMutation object of the builder.
func (ormuo *OneRepMaxUpdateOne) Mutation() *OneRepMaxMutation {
	return ormuo.mutation
}

// ClearAct clears the "act" edge to the Act entity.
func (ormuo *OneRepMaxUpdateOne) ClearAct() *OneRepMaxUpdateOne {
	ormuo.mutation.ClearAct()
	return ormuo
}

// ClearProgramRec clears the "program_rec" edge to the ProgramRec entity.
func (ormuo *OneRepMaxUpdateOne) ClearProgramRec() *OneRepMaxUpdateOne {
	ormuo.mutation.ClearProgramRec()
	return ormuo
}

// Where appends a list predicates to the OneRepMaxUpdate builder.
func (ormuo *OneRepMaxUpdateOne) Where(ps ...predicate.OneRepMax) *OneRepMaxUpdateOne {
	ormuo.mutation.Where(ps...)
	return ormuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ormuo *OneRepMaxUpdateOne) Select(field string, fields ...string) *OneRepMaxUpdateOne {
	ormuo.fields = append([]string{field}, fields...)
	return ormuo
}

// Save executes the query and returns the updated OneRepMax entity.
func (ormuo *OneRepMaxUpdateOne) Save(ctx context.Context) (*OneRepMax, error) {
	return withHooks(ctx, ormuo.sqlSave, ormuo.mutation, ormuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ormuo *OneRepMaxUpdateOne) SaveX(ctx context.Context) *OneRepMax {
	node, err := ormuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ormuo *OneRepMaxUpdateOne) Exec(ctx context.Context) error {
	_, err := ormuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ormuo *OneRepMaxUpdateOne) ExecX(ctx context.Context) {
	if err := ormuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ormuo *OneRepMaxUpdateOne) check() error {
	if _, ok := ormuo.mutation.ActID(); ormuo.mutation.ActCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OneRepMax.act"`)
	}
	return nil
}

func (ormuo *OneRepMaxUpdateOne) sqlSave(ctx context.Context) (_node *OneRepMax, err error) {
	if err := ormuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(onerepmax.Table, onerepmax.Columns, sqlgraph.NewFieldSpec(onerepmax.FieldID, field.TypeUint64))
	id, ok := ormuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OneRepMax.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ormuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, onerepmax.FieldID)
		for _, f := range fields {
			if !onerepmax.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != onerepmax.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ormuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ormuo.mutation.Author(); ok {
		_spec.SetField(onerepmax.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := ormuo.mutation.AddedAuthor(); ok {
		_spec.AddField(onerepmax.FieldAuthor, field.TypeUint64, value)
	}
	if value, ok := ormuo.mutation.Date(); ok {
		_spec.SetField(onerepmax.FieldDate, field.TypeTime, value)
	}
	if value, ok := ormuo.mutation.OneRepMax(); ok {
		_spec.SetField(onerepmax.FieldOneRepMax, field.TypeFloat64, value)
	}
	if value, ok := ormuo.mutation.AddedOneRepMax(); ok {
		_spec.AddField(onerepmax.FieldOneRepMax, field.TypeFloat64, value)
	}
	if ormuo.mutation.OneRepMaxCleared() {
		_spec.ClearField(onerepmax.FieldOneRepMax, field.TypeFloat64)
	}
	if value, ok := ormuo.mutation.Certified(); ok {
		_spec.SetField(onerepmax.FieldCertified, field.TypeBool, value)
	}
	if value, ok := ormuo.mutation.Calculated(); ok {
		_spec.SetField(onerepmax.FieldCalculated, field.TypeBool, value)
	}
	if ormuo.mutation.ActCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ActTable,
			Columns: []string{onerepmax.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ormuo.mutation.ActIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ActTable,
			Columns: []string{onerepmax.ActColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(act.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ormuo.mutation.ProgramRecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ProgramRecTable,
			Columns: []string{onerepmax.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ormuo.mutation.ProgramRecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   onerepmax.ProgramRecTable,
			Columns: []string{onerepmax.ProgramRecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OneRepMax{config: ormuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ormuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{onerepmax.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ormuo.mutation.done = true
	return _node, nil
}

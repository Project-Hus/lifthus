// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/predicate"
	"routine/ent/weeklyroutinerec"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WeeklyRoutineRecUpdate is the builder for updating WeeklyRoutineRec entities.
type WeeklyRoutineRecUpdate struct {
	config
	hooks    []Hook
	mutation *WeeklyRoutineRecMutation
}

// Where appends a list predicates to the WeeklyRoutineRecUpdate builder.
func (wrru *WeeklyRoutineRecUpdate) Where(ps ...predicate.WeeklyRoutineRec) *WeeklyRoutineRecUpdate {
	wrru.mutation.Where(ps...)
	return wrru
}

// SetProgramRecID sets the "program_rec_id" field.
func (wrru *WeeklyRoutineRecUpdate) SetProgramRecID(u uint64) *WeeklyRoutineRecUpdate {
	wrru.mutation.ResetProgramRecID()
	wrru.mutation.SetProgramRecID(u)
	return wrru
}

// AddProgramRecID adds u to the "program_rec_id" field.
func (wrru *WeeklyRoutineRecUpdate) AddProgramRecID(u int64) *WeeklyRoutineRecUpdate {
	wrru.mutation.AddProgramRecID(u)
	return wrru
}

// SetWeeklyRoutineID sets the "weekly_routine_id" field.
func (wrru *WeeklyRoutineRecUpdate) SetWeeklyRoutineID(u uint64) *WeeklyRoutineRecUpdate {
	wrru.mutation.ResetWeeklyRoutineID()
	wrru.mutation.SetWeeklyRoutineID(u)
	return wrru
}

// AddWeeklyRoutineID adds u to the "weekly_routine_id" field.
func (wrru *WeeklyRoutineRecUpdate) AddWeeklyRoutineID(u int64) *WeeklyRoutineRecUpdate {
	wrru.mutation.AddWeeklyRoutineID(u)
	return wrru
}

// SetStartDate sets the "start_date" field.
func (wrru *WeeklyRoutineRecUpdate) SetStartDate(t time.Time) *WeeklyRoutineRecUpdate {
	wrru.mutation.SetStartDate(t)
	return wrru
}

// SetUpdatedAt sets the "updated_at" field.
func (wrru *WeeklyRoutineRecUpdate) SetUpdatedAt(t time.Time) *WeeklyRoutineRecUpdate {
	wrru.mutation.SetUpdatedAt(t)
	return wrru
}

// Mutation returns the WeeklyRoutineRecMutation object of the builder.
func (wrru *WeeklyRoutineRecUpdate) Mutation() *WeeklyRoutineRecMutation {
	return wrru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wrru *WeeklyRoutineRecUpdate) Save(ctx context.Context) (int, error) {
	wrru.defaults()
	return withHooks(ctx, wrru.sqlSave, wrru.mutation, wrru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wrru *WeeklyRoutineRecUpdate) SaveX(ctx context.Context) int {
	affected, err := wrru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wrru *WeeklyRoutineRecUpdate) Exec(ctx context.Context) error {
	_, err := wrru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrru *WeeklyRoutineRecUpdate) ExecX(ctx context.Context) {
	if err := wrru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wrru *WeeklyRoutineRecUpdate) defaults() {
	if _, ok := wrru.mutation.UpdatedAt(); !ok {
		v := weeklyroutinerec.UpdateDefaultUpdatedAt()
		wrru.mutation.SetUpdatedAt(v)
	}
}

func (wrru *WeeklyRoutineRecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weeklyroutinerec.Table, weeklyroutinerec.Columns, sqlgraph.NewFieldSpec(weeklyroutinerec.FieldID, field.TypeUint64))
	if ps := wrru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wrru.mutation.ProgramRecID(); ok {
		_spec.SetField(weeklyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if value, ok := wrru.mutation.AddedProgramRecID(); ok {
		_spec.AddField(weeklyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if value, ok := wrru.mutation.WeeklyRoutineID(); ok {
		_spec.SetField(weeklyroutinerec.FieldWeeklyRoutineID, field.TypeUint64, value)
	}
	if value, ok := wrru.mutation.AddedWeeklyRoutineID(); ok {
		_spec.AddField(weeklyroutinerec.FieldWeeklyRoutineID, field.TypeUint64, value)
	}
	if value, ok := wrru.mutation.StartDate(); ok {
		_spec.SetField(weeklyroutinerec.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := wrru.mutation.UpdatedAt(); ok {
		_spec.SetField(weeklyroutinerec.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wrru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weeklyroutinerec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wrru.mutation.done = true
	return n, nil
}

// WeeklyRoutineRecUpdateOne is the builder for updating a single WeeklyRoutineRec entity.
type WeeklyRoutineRecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeeklyRoutineRecMutation
}

// SetProgramRecID sets the "program_rec_id" field.
func (wrruo *WeeklyRoutineRecUpdateOne) SetProgramRecID(u uint64) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.ResetProgramRecID()
	wrruo.mutation.SetProgramRecID(u)
	return wrruo
}

// AddProgramRecID adds u to the "program_rec_id" field.
func (wrruo *WeeklyRoutineRecUpdateOne) AddProgramRecID(u int64) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.AddProgramRecID(u)
	return wrruo
}

// SetWeeklyRoutineID sets the "weekly_routine_id" field.
func (wrruo *WeeklyRoutineRecUpdateOne) SetWeeklyRoutineID(u uint64) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.ResetWeeklyRoutineID()
	wrruo.mutation.SetWeeklyRoutineID(u)
	return wrruo
}

// AddWeeklyRoutineID adds u to the "weekly_routine_id" field.
func (wrruo *WeeklyRoutineRecUpdateOne) AddWeeklyRoutineID(u int64) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.AddWeeklyRoutineID(u)
	return wrruo
}

// SetStartDate sets the "start_date" field.
func (wrruo *WeeklyRoutineRecUpdateOne) SetStartDate(t time.Time) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.SetStartDate(t)
	return wrruo
}

// SetUpdatedAt sets the "updated_at" field.
func (wrruo *WeeklyRoutineRecUpdateOne) SetUpdatedAt(t time.Time) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.SetUpdatedAt(t)
	return wrruo
}

// Mutation returns the WeeklyRoutineRecMutation object of the builder.
func (wrruo *WeeklyRoutineRecUpdateOne) Mutation() *WeeklyRoutineRecMutation {
	return wrruo.mutation
}

// Where appends a list predicates to the WeeklyRoutineRecUpdate builder.
func (wrruo *WeeklyRoutineRecUpdateOne) Where(ps ...predicate.WeeklyRoutineRec) *WeeklyRoutineRecUpdateOne {
	wrruo.mutation.Where(ps...)
	return wrruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wrruo *WeeklyRoutineRecUpdateOne) Select(field string, fields ...string) *WeeklyRoutineRecUpdateOne {
	wrruo.fields = append([]string{field}, fields...)
	return wrruo
}

// Save executes the query and returns the updated WeeklyRoutineRec entity.
func (wrruo *WeeklyRoutineRecUpdateOne) Save(ctx context.Context) (*WeeklyRoutineRec, error) {
	wrruo.defaults()
	return withHooks(ctx, wrruo.sqlSave, wrruo.mutation, wrruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wrruo *WeeklyRoutineRecUpdateOne) SaveX(ctx context.Context) *WeeklyRoutineRec {
	node, err := wrruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wrruo *WeeklyRoutineRecUpdateOne) Exec(ctx context.Context) error {
	_, err := wrruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrruo *WeeklyRoutineRecUpdateOne) ExecX(ctx context.Context) {
	if err := wrruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wrruo *WeeklyRoutineRecUpdateOne) defaults() {
	if _, ok := wrruo.mutation.UpdatedAt(); !ok {
		v := weeklyroutinerec.UpdateDefaultUpdatedAt()
		wrruo.mutation.SetUpdatedAt(v)
	}
}

func (wrruo *WeeklyRoutineRecUpdateOne) sqlSave(ctx context.Context) (_node *WeeklyRoutineRec, err error) {
	_spec := sqlgraph.NewUpdateSpec(weeklyroutinerec.Table, weeklyroutinerec.Columns, sqlgraph.NewFieldSpec(weeklyroutinerec.FieldID, field.TypeUint64))
	id, ok := wrruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WeeklyRoutineRec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wrruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weeklyroutinerec.FieldID)
		for _, f := range fields {
			if !weeklyroutinerec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weeklyroutinerec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wrruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wrruo.mutation.ProgramRecID(); ok {
		_spec.SetField(weeklyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if value, ok := wrruo.mutation.AddedProgramRecID(); ok {
		_spec.AddField(weeklyroutinerec.FieldProgramRecID, field.TypeUint64, value)
	}
	if value, ok := wrruo.mutation.WeeklyRoutineID(); ok {
		_spec.SetField(weeklyroutinerec.FieldWeeklyRoutineID, field.TypeUint64, value)
	}
	if value, ok := wrruo.mutation.AddedWeeklyRoutineID(); ok {
		_spec.AddField(weeklyroutinerec.FieldWeeklyRoutineID, field.TypeUint64, value)
	}
	if value, ok := wrruo.mutation.StartDate(); ok {
		_spec.SetField(weeklyroutinerec.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := wrruo.mutation.UpdatedAt(); ok {
		_spec.SetField(weeklyroutinerec.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &WeeklyRoutineRec{config: wrruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wrruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weeklyroutinerec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wrruo.mutation.done = true
	return _node, nil
}

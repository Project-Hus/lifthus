// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"routine/ent/bodyinfo"
	"routine/ent/dailyroutinerec"
	"routine/ent/onerepmax"
	"routine/ent/program"
	"routine/ent/programrec"
	"routine/ent/weeklyroutinerec"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramRecCreate is the builder for creating a ProgramRec entity.
type ProgramRecCreate struct {
	config
	mutation *ProgramRecMutation
	hooks    []Hook
}

// SetAuthor sets the "author" field.
func (prc *ProgramRecCreate) SetAuthor(u uint64) *ProgramRecCreate {
	prc.mutation.SetAuthor(u)
	return prc
}

// SetProgramID sets the "program_id" field.
func (prc *ProgramRecCreate) SetProgramID(u uint64) *ProgramRecCreate {
	prc.mutation.SetProgramID(u)
	return prc
}

// SetStartDate sets the "start_date" field.
func (prc *ProgramRecCreate) SetStartDate(t time.Time) *ProgramRecCreate {
	prc.mutation.SetStartDate(t)
	return prc
}

// SetEndDate sets the "end_date" field.
func (prc *ProgramRecCreate) SetEndDate(t time.Time) *ProgramRecCreate {
	prc.mutation.SetEndDate(t)
	return prc
}

// SetStatus sets the "status" field.
func (prc *ProgramRecCreate) SetStatus(pr programrec.Status) *ProgramRecCreate {
	prc.mutation.SetStatus(pr)
	return prc
}

// SetComment sets the "comment" field.
func (prc *ProgramRecCreate) SetComment(s string) *ProgramRecCreate {
	prc.mutation.SetComment(s)
	return prc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (prc *ProgramRecCreate) SetNillableComment(s *string) *ProgramRecCreate {
	if s != nil {
		prc.SetComment(*s)
	}
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *ProgramRecCreate) SetCreatedAt(t time.Time) *ProgramRecCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *ProgramRecCreate) SetNillableCreatedAt(t *time.Time) *ProgramRecCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *ProgramRecCreate) SetUpdatedAt(t time.Time) *ProgramRecCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *ProgramRecCreate) SetNillableUpdatedAt(t *time.Time) *ProgramRecCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *ProgramRecCreate) SetID(u uint64) *ProgramRecCreate {
	prc.mutation.SetID(u)
	return prc
}

// SetProgram sets the "program" edge to the Program entity.
func (prc *ProgramRecCreate) SetProgram(p *Program) *ProgramRecCreate {
	return prc.SetProgramID(p.ID)
}

// AddWeeklyRoutineRecIDs adds the "weekly_routine_recs" edge to the WeeklyRoutineRec entity by IDs.
func (prc *ProgramRecCreate) AddWeeklyRoutineRecIDs(ids ...uint64) *ProgramRecCreate {
	prc.mutation.AddWeeklyRoutineRecIDs(ids...)
	return prc
}

// AddWeeklyRoutineRecs adds the "weekly_routine_recs" edges to the WeeklyRoutineRec entity.
func (prc *ProgramRecCreate) AddWeeklyRoutineRecs(w ...*WeeklyRoutineRec) *ProgramRecCreate {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return prc.AddWeeklyRoutineRecIDs(ids...)
}

// AddDailyRoutineRecIDs adds the "daily_routine_recs" edge to the DailyRoutineRec entity by IDs.
func (prc *ProgramRecCreate) AddDailyRoutineRecIDs(ids ...uint64) *ProgramRecCreate {
	prc.mutation.AddDailyRoutineRecIDs(ids...)
	return prc
}

// AddDailyRoutineRecs adds the "daily_routine_recs" edges to the DailyRoutineRec entity.
func (prc *ProgramRecCreate) AddDailyRoutineRecs(d ...*DailyRoutineRec) *ProgramRecCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return prc.AddDailyRoutineRecIDs(ids...)
}

// AddBodyInfoIDs adds the "body_info" edge to the BodyInfo entity by IDs.
func (prc *ProgramRecCreate) AddBodyInfoIDs(ids ...uint64) *ProgramRecCreate {
	prc.mutation.AddBodyInfoIDs(ids...)
	return prc
}

// AddBodyInfo adds the "body_info" edges to the BodyInfo entity.
func (prc *ProgramRecCreate) AddBodyInfo(b ...*BodyInfo) *ProgramRecCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return prc.AddBodyInfoIDs(ids...)
}

// AddOneRepMaxIDs adds the "one_rep_max" edge to the OneRepMax entity by IDs.
func (prc *ProgramRecCreate) AddOneRepMaxIDs(ids ...uint64) *ProgramRecCreate {
	prc.mutation.AddOneRepMaxIDs(ids...)
	return prc
}

// AddOneRepMax adds the "one_rep_max" edges to the OneRepMax entity.
func (prc *ProgramRecCreate) AddOneRepMax(o ...*OneRepMax) *ProgramRecCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return prc.AddOneRepMaxIDs(ids...)
}

// Mutation returns the ProgramRecMutation object of the builder.
func (prc *ProgramRecCreate) Mutation() *ProgramRecMutation {
	return prc.mutation
}

// Save creates the ProgramRec in the database.
func (prc *ProgramRecCreate) Save(ctx context.Context) (*ProgramRec, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProgramRecCreate) SaveX(ctx context.Context) *ProgramRec {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProgramRecCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProgramRecCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *ProgramRecCreate) defaults() {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := programrec.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := programrec.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProgramRecCreate) check() error {
	if _, ok := prc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "ProgramRec.author"`)}
	}
	if _, ok := prc.mutation.ProgramID(); !ok {
		return &ValidationError{Name: "program_id", err: errors.New(`ent: missing required field "ProgramRec.program_id"`)}
	}
	if _, ok := prc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "ProgramRec.start_date"`)}
	}
	if _, ok := prc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "ProgramRec.end_date"`)}
	}
	if _, ok := prc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProgramRec.status"`)}
	}
	if v, ok := prc.mutation.Status(); ok {
		if err := programrec.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProgramRec.status": %w`, err)}
		}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProgramRec.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProgramRec.updated_at"`)}
	}
	if _, ok := prc.mutation.ProgramID(); !ok {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "ProgramRec.program"`)}
	}
	return nil
}

func (prc *ProgramRecCreate) sqlSave(ctx context.Context) (*ProgramRec, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProgramRecCreate) createSpec() (*ProgramRec, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramRec{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(programrec.Table, sqlgraph.NewFieldSpec(programrec.FieldID, field.TypeUint64))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.Author(); ok {
		_spec.SetField(programrec.FieldAuthor, field.TypeUint64, value)
		_node.Author = value
	}
	if value, ok := prc.mutation.StartDate(); ok {
		_spec.SetField(programrec.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := prc.mutation.EndDate(); ok {
		_spec.SetField(programrec.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := prc.mutation.Status(); ok {
		_spec.SetField(programrec.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := prc.mutation.Comment(); ok {
		_spec.SetField(programrec.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(programrec.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(programrec.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := prc.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programrec.ProgramTable,
			Columns: []string{programrec.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProgramID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.WeeklyRoutineRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programrec.WeeklyRoutineRecsTable,
			Columns: []string{programrec.WeeklyRoutineRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weeklyroutinerec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.DailyRoutineRecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programrec.DailyRoutineRecsTable,
			Columns: []string{programrec.DailyRoutineRecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyroutinerec.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.BodyInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programrec.BodyInfoTable,
			Columns: []string{programrec.BodyInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bodyinfo.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.OneRepMaxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programrec.OneRepMaxTable,
			Columns: []string{programrec.OneRepMaxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(onerepmax.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProgramRecCreateBulk is the builder for creating many ProgramRec entities in bulk.
type ProgramRecCreateBulk struct {
	config
	builders []*ProgramRecCreate
}

// Save creates the ProgramRec entities in the database.
func (prcb *ProgramRecCreateBulk) Save(ctx context.Context) ([]*ProgramRec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProgramRec, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramRecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProgramRecCreateBulk) SaveX(ctx context.Context) []*ProgramRec {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProgramRecCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProgramRecCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

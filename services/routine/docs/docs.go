// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "lifthus531@gmail.com",
            "email": "lifthus531@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/act": {
            "get": {
                "tags": [
                    "act"
                ],
                "summary": "gets Act name from query-string and returns corresponding Acts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "act name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "skip",
                        "name": "skip",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns acts"
                    },
                    "400": {
                        "description": "invalid request"
                    },
                    "500": {
                        "description": "failed to query acts"
                    }
                }
            },
            "post": {
                "tags": [
                    "act"
                ],
                "summary": "gets CreateActDto from body and returns created act's ID",
                "parameters": [
                    {
                        "description": "createAct DTO",
                        "name": "createActDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateActDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "returns created act's ID"
                    },
                    "400": {
                        "description": "invalid body"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "403": {
                        "description": "forbidden"
                    },
                    "500": {
                        "description": "failed to create program"
                    }
                }
            }
        },
        "/program/weekly": {
            "post": {
                "tags": [
                    "program"
                ],
                "summary": "gets CreateWeeklyProgramDto from body and returns created program's ID",
                "parameters": [
                    {
                        "description": "createWeeklyProgram DTO",
                        "name": "createWeeklyProgramDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateWeeklyProgramDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "returns created program's ID"
                    },
                    "400": {
                        "description": "invalid body"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "403": {
                        "description": "forbidden"
                    },
                    "500": {
                        "description": "failed to create program"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateActDto": {
            "type": "object",
            "properties": {
                "arms": {
                    "description": "prime movers",
                    "type": "boolean"
                },
                "author": {
                    "type": "integer"
                },
                "bodyweight": {
                    "type": "boolean"
                },
                "cardio": {
                    "type": "boolean"
                },
                "chest": {
                    "type": "boolean"
                },
                "core": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "etc": {
                    "type": "boolean"
                },
                "full": {
                    "type": "boolean"
                },
                "glute": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "legs_back": {
                    "type": "boolean"
                },
                "legs_front": {
                    "type": "boolean"
                },
                "lower": {
                    "type": "boolean"
                },
                "lower_back": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "shoulders": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "upper": {
                    "description": "upper/lower/full body",
                    "type": "boolean"
                },
                "upper_back": {
                    "type": "boolean"
                },
                "weight": {
                    "description": "weight/cardio",
                    "type": "boolean"
                }
            }
        },
        "dto.CreateWeeklyDailyRoutineDto": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "integer"
                },
                "week": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateWeeklyProgramDto": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "integer"
                },
                "daily_routines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateWeeklyDailyRoutineDto"
                    }
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "routine_acts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateWeeklyRoutineActDto"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "weekly_routines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateWeeklyRoutineDto"
                    }
                }
            }
        },
        "dto.CreateWeeklyRoutineActDto": {
            "type": "object",
            "properties": {
                "act_id": {
                    "type": "integer"
                },
                "day": {
                    "type": "integer"
                },
                "lap": {
                    "type": "integer"
                },
                "order": {
                    "type": "integer"
                },
                "reps": {
                    "type": "integer"
                },
                "w_ratio": {
                    "type": "number"
                },
                "warmup": {
                    "type": "boolean"
                },
                "week": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateWeeklyRoutineDto": {
            "type": "object",
            "properties": {
                "week": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.0",
	Host:             "api.lifthus.com",
	BasePath:         "/routine",
	Schemes:          []string{},
	Title:            "Lifthus routine server",
	Description:      "This is Project-Hus's subservice Lifthus's routine management server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

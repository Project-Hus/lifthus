// npx prisma migrate dev --name init
// This prisma migrate dev command generates SQL files and directly runs them against the database.
// npx prisma generate
// This prisma generate command generates the Prisma Client JS library based on your Prisma schema.
// or
// or npx prisma db push

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("LIFTHUS_POST_DB_URL")
}

model Post {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  userGroup BigInt?  @db.UnsignedBigInt
  author    BigInt   @db.UnsignedBigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images PostImage[]

  slug    String @unique @db.VarChar(50)
  content String @db.Text

  mentions Mention[]  @relation("mentions")
  likenum  Int        @default(0)
  likes    PostLike[]

  comments Comment[]
}

model PostImage {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt

  postId BigInt @db.UnsignedBigInt
  post   Post   @relation(fields: [postId], references: [id])
  order  Int    @unique

  url String @db.VarChar(255)
}

model Comment {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt

  author    BigInt   @db.UnsignedBigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId BigInt? @db.UnsignedBigInt

  parentId BigInt?   @db.UnsignedBigInt
  parent   Comment?  @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("replies")

  content String @db.VarChar(531)

  likenum  Int           @default(0)
  mentions Mention[]     @relation("mentions")
  likes    CommentLike[]
}

model PostLike {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    BigInt   @db.UnsignedBigInt
  user      BigInt   @db.UnsignedBigInt
  createdAt DateTime @default(now())

  @@id([postId, user])
}

model CommentLike {
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId BigInt   @db.UnsignedBigInt
  user      BigInt   @db.UnsignedBigInt
  createdAt DateTime @default(now())

  @@id([commentId, user])
}

model Mention {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt

  post     Post?    @relation("mentions", fields: [postId], references: [id], onDelete: Cascade)
  postId   BigInt?  @unique @db.UnsignedBigInt
  coment   Comment? @relation("mentions", fields: [comentId], references: [id], onDelete: Cascade)
  comentId BigInt?  @unique @db.UnsignedBigInt

  mentionor BigInt @db.UnsignedBigInt
  mentionee BigInt @db.UnsignedBigInt
}

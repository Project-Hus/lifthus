// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lifthus-auth/ent/session"
	"lifthus-auth/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"sid,omitempty"`
	// Tid holds the value of the "tid" field.
	Tid uuid.UUID `json:"tid,omitempty"`
	// Hsid holds the value of the "hsid" field.
	Hsid *uuid.UUID `json:"hsid,omitempty"`
	// ConnectedAt holds the value of the "connected_at" field.
	ConnectedAt time.Time `json:"connected_at,omitempty"`
	// UID holds the value of the "uid" field.
	UID *uint64 `json:"uid,omitempty"`
	// SignedAt holds the value of the "signed_at" field.
	SignedAt *time.Time `json:"signed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionQuery when eager-loading is set.
	Edges        SessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SessionEdges holds the relations/edges for other nodes in the graph.
type SessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldHsid:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case session.FieldUID:
			values[i] = new(sql.NullInt64)
		case session.FieldConnectedAt, session.FieldSignedAt:
			values[i] = new(sql.NullTime)
		case session.FieldID, session.FieldTid:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case session.FieldTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tid", values[i])
			} else if value != nil {
				s.Tid = *value
			}
		case session.FieldHsid:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field hsid", values[i])
			} else if value.Valid {
				s.Hsid = new(uuid.UUID)
				*s.Hsid = *value.S.(*uuid.UUID)
			}
		case session.FieldConnectedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field connected_at", values[i])
			} else if value.Valid {
				s.ConnectedAt = value.Time
			}
		case session.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				s.UID = new(uint64)
				*s.UID = uint64(value.Int64)
			}
		case session.FieldSignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field signed_at", values[i])
			} else if value.Valid {
				s.SignedAt = new(time.Time)
				*s.SignedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Session entity.
func (s *Session) QueryUser() *UserQuery {
	return NewSessionClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("tid=")
	builder.WriteString(fmt.Sprintf("%v", s.Tid))
	builder.WriteString(", ")
	if v := s.Hsid; v != nil {
		builder.WriteString("hsid=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("connected_at=")
	builder.WriteString(s.ConnectedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.UID; v != nil {
		builder.WriteString("uid=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.SignedAt; v != nil {
		builder.WriteString("signed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session

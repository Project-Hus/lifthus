// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lifthus-auth/ent/lifthusgroup"
	"lifthus-auth/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LifthusGroupUpdate is the builder for updating LifthusGroup entities.
type LifthusGroupUpdate struct {
	config
	hooks    []Hook
	mutation *LifthusGroupMutation
}

// Where appends a list predicates to the LifthusGroupUpdate builder.
func (lgu *LifthusGroupUpdate) Where(ps ...predicate.LifthusGroup) *LifthusGroupUpdate {
	lgu.mutation.Where(ps...)
	return lgu
}

// Mutation returns the LifthusGroupMutation object of the builder.
func (lgu *LifthusGroupUpdate) Mutation() *LifthusGroupMutation {
	return lgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lgu *LifthusGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LifthusGroupMutation](ctx, lgu.sqlSave, lgu.mutation, lgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lgu *LifthusGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := lgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lgu *LifthusGroupUpdate) Exec(ctx context.Context) error {
	_, err := lgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgu *LifthusGroupUpdate) ExecX(ctx context.Context) {
	if err := lgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lgu *LifthusGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(lifthusgroup.Table, lifthusgroup.Columns, sqlgraph.NewFieldSpec(lifthusgroup.FieldID, field.TypeInt))
	if ps := lgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lifthusgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lgu.mutation.done = true
	return n, nil
}

// LifthusGroupUpdateOne is the builder for updating a single LifthusGroup entity.
type LifthusGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LifthusGroupMutation
}

// Mutation returns the LifthusGroupMutation object of the builder.
func (lguo *LifthusGroupUpdateOne) Mutation() *LifthusGroupMutation {
	return lguo.mutation
}

// Where appends a list predicates to the LifthusGroupUpdate builder.
func (lguo *LifthusGroupUpdateOne) Where(ps ...predicate.LifthusGroup) *LifthusGroupUpdateOne {
	lguo.mutation.Where(ps...)
	return lguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lguo *LifthusGroupUpdateOne) Select(field string, fields ...string) *LifthusGroupUpdateOne {
	lguo.fields = append([]string{field}, fields...)
	return lguo
}

// Save executes the query and returns the updated LifthusGroup entity.
func (lguo *LifthusGroupUpdateOne) Save(ctx context.Context) (*LifthusGroup, error) {
	return withHooks[*LifthusGroup, LifthusGroupMutation](ctx, lguo.sqlSave, lguo.mutation, lguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lguo *LifthusGroupUpdateOne) SaveX(ctx context.Context) *LifthusGroup {
	node, err := lguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lguo *LifthusGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := lguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lguo *LifthusGroupUpdateOne) ExecX(ctx context.Context) {
	if err := lguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lguo *LifthusGroupUpdateOne) sqlSave(ctx context.Context) (_node *LifthusGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(lifthusgroup.Table, lifthusgroup.Columns, sqlgraph.NewFieldSpec(lifthusgroup.FieldID, field.TypeInt))
	id, ok := lguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LifthusGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lifthusgroup.FieldID)
		for _, f := range fields {
			if !lifthusgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lifthusgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &LifthusGroup{config: lguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lifthusgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lguo.mutation.done = true
	return _node, nil
}

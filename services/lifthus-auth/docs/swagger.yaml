basePath: /auth
definitions:
  dto.UpdateUserInfoDto:
    properties:
      birthdate:
        type: string
      company:
        type: string
      contact:
        type: string
      location:
        type: string
      uid:
        type: integer
      username:
        type: string
    type: object
  user.RegisterInfoDto:
    properties:
      benchpress:
        type: number
      bodyWeight:
        type: number
      deadlift:
        type: number
      height:
        type: number
      squat:
        type: number
      trainingType:
        type: string
      uid:
        type: integer
    type: object
host: auth.lifthus.com
info:
  contact:
    email: lifthus531@gmail.com
    name: API Support
    url: lifthus531@gmail.com
  description: This is Project-Hus's subservice Lifthus's user management server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Lifthus user server
  version: 0.0.0
paths:
  /hus/session/sign:
    patch:
      description: |-
        Hus sends id token and Lifthus sets the session info to be signed in with specific uid.
        and if the user is not registered, Lifthus will register the user.
        Hus user info's change will be reflected as well.
      responses:
        "200":
          description: session signing success
        "500":
          description: failed to set the login session
      summary: gets Hus id token and sets the session token to be signed in after
        updating the info.
      tags:
      - auth
  /hus/signin:
    patch:
      description: the "signin_propagation" token should be included in the request
        body.
      responses:
        "200":
          description: Ok, session signed
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: processes user sign-in propagation from cloudhus.
      tags:
      - auth
  /hus/signout:
    patch:
      description: the "signout_propagation" token should be included in the request
        body.
      responses:
        "200":
          description: Ok, session signed
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: processes user sign-out propagation from cloudhus.
      tags:
      - auth
  /relation/follow/{uid}:
    post:
      parameters:
      - description: user id
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: new following list
        "400":
          description: invalid uid
        "404":
          description: user not found
        "500":
          description: failed to get user following list
      summary: gets uid from path param and makes signed user follow the given user
      tags:
      - relation
  /relation/followers/{uid}:
    get:
      parameters:
      - description: user id
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: returns follower list as list of number
        "400":
          description: invalid uid
        "404":
          description: user not found
        "500":
          description: failed to get user follower list
      summary: gets uid from path param and returns user's follower list
      tags:
      - relation
  /relation/following/{uid}:
    get:
      parameters:
      - description: user id
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: returns following list as list of number
        "400":
          description: invalid uid
        "404":
          description: user not found
        "500":
          description: failed to get user following list
      summary: gets uid from path param and returns user's following list
      tags:
      - relation
  /relation/unfollow/{uid}:
    delete:
      parameters:
      - description: user id
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: new following list
        "400":
          description: invalid uid
        "404":
          description: user not found
        "500":
          description: failed to get user following list
      summary: gets uid from path param and makes signed user unfollow the given user
      tags:
      - relation
  /session:
    get:
      responses:
        "200":
          description: Ok, session refreshed, session info JSON returned
        "201":
          description: Created, new session issued, redirect to cloudhus and do connect
        "500":
          description: Internal Server Error
      summary: validates session. publishes new one if it isn't. refreshes expired
        session.
      tags:
      - auth
  /session/new:
    get:
      description: |-
        case A: no session, return newly generated session token with 201.
        case B-1: signed but expired, reset session info(used, signed_at, uid) except SID and return new session token with 201.
        case B-2: not signed and expired, return new session token keeping SID with 201.
        case C-1: valid and signed, just return with 200.
        case C-2: valid and not signed, return with 201 to tell client to check Hus session.
      responses:
        "200":
          description: if valid session exists, return uid
        "201":
          description: if there's no session or existing session is expired, return
            new session token
        "500":
          description: failed to create new session
      summary: accepts tokens in cookie, parse and validate them, and returns tokens
        depending on the token's status.
      tags:
      - auth
  /session/revoke:
    delete:
      responses:
        "200":
          description: if valid session exists, return uid
        "404":
          description: token not found
        "500":
          description: failed to create new session
      summary: revokes lifthus session
      tags:
      - auth
  /session/sign:
    get:
      description: |-
        Hus told lifthus that the client with specific SID is signed in.
        so now we can sign the token which is owned by the client who has verified sid.
      responses:
        "200":
          description: session successfully signed
        "401":
          description: unauthorized
        "500":
          description: internal server error
      summary: gets lifthus sid in cookie from client, and signs the lifthus token.
      tags:
      - auth
  /session/signout:
    patch:
      responses:
        "200":
          description: Ok, signed out of the session
        "400":
          description: Bad Request
        "401":
          description: Unauthorized, the token is expired or the session is not signed
        "500":
          description: Internal Server Error
      summary: gets sign-out request from the client and propagates it to Cloudhus.
      tags:
      - auth
  /sid:
    get:
      responses:
        "200":
          description: Ok, session ID
        "401":
          description: Unauthorized, the token is expired
        "500":
          description: Internal Server Error
      summary: returns client's SID. should be encrypted later.
      tags:
      - auth
  /user:
    post:
      description: it gets register info and registers user to lifthus
      parameters:
      - description: user register info
        in: body
        name: userinfo
        required: true
        schema:
          $ref: '#/definitions/user.RegisterInfoDto'
      responses:
        "200":
          description: returns register info as json
        "400":
          description: invalid body
        "401":
          description: unauthorized
      summary: gets user register info and registers user
      tags:
      - user
    put:
      description: it gets uid from path param and updates user info
      parameters:
      - description: user info
        in: body
        name: userinfo
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserInfoDto'
      responses:
        "200":
          description: returns user info as json
        "400":
          description: invalid uid
        "404":
          description: user not found
        "500":
          description: failed to set user info
      summary: gets uid from path param and updates user info
      tags:
      - user
  /user/{uid}:
    get:
      description: if the signed user is the same as the requested user, returns all
        info while hiding sensitive info if different.
      parameters:
      - description: user id
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: returns user info as json
        "400":
          description: invalid uid
        "404":
          description: user not found
        "500":
          description: failed to get user info
      summary: gets uid from path param and returns user info
      tags:
      - user
  /username/{username}:
    get:
      description: if the signed user is the same as the requested user, returns all
        info while hiding sensitive info if different.
      parameters:
      - description: user id
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: returns user info as json
        "404":
          description: user not found
        "500":
          description: failed to get user info
      summary: gets username from path param and returns user info
      tags:
      - user
swagger: "2.0"

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  lifthus serverless microservices (dev)

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        # * Environment variables
        # deployment : Parameter Store
        # local&native : env.json
        GOOGLE_CLIENT_ID: "{{resolve:ssm:GOOGLE_CLIENT_ID:1}}"
        LIFTHUS_AUTH_DB_USER: "{{resolve:ssm:LIFTHUS_AUTH_DB_USER:1}}"
        LIFTHUS_AUTH_DB_PASSWORD: "{{resolve:ssm:LIFTHUS_AUTH_DB_PASSWORD:1}}"
        DEV_LIFTHUS_AUTH_DB_NAME: "{{resolve:ssm:DEV_LIFTHUS_AUTH_DB_NAME:1}}"
        DEV_LIFTHUS_AUTH_DB_HOST: "{{resolve:ssm:DEV_LIFTHUS_AUTH_DB_HOST:1}}"
        DEV_LIFTHUS_AUTH_DB_PORT: "{{resolve:ssm:DEV_LIFTHUS_AUTH_DB_PORT:1}}"

        LIFTHUS_POST_DB_USER: "{{resolve:ssm:LIFTHUS_POST_DB_USER:1}}"
        LIFTHUS_POST_DB_PASSWORD: "{{resolve:ssm:LIFTHUS_POST_DB_PASSWORD:1}}"
        DEV_LIFTHUS_POST_DB_URL: "{{resolve:ssm:DEV_LIFTHUS_POST_DB_URL:1}}"
        DEV_LIFTHUS_POST_DB_NAME: "{{resolve:ssm:DEV_LIFTHUS_POST_DB_NAME:1}}"
        DEV_LIFTHUS_POST_DB_HOST: "{{resolve:ssm:DEV_LIFTHUS_POST_DB_HOST:1}}"
        DEV_LIFTHUS_POST_DB_PORT: "{{resolve:ssm:DEV_LIFTHUS_POST_DB_PORT:1}}"

        LIFTHUS_ROUTINE_DB_USER: "{{resolve:ssm:LIFTHUS_ROUTINE_DB_USER:1}}"
        LIFTHUS_ROUTINE_DB_PASSWORD: "{{resolve:ssm:LIFTHUS_ROUTINE_DB_PASSWORD:1}}"
        DEV_LIFTHUS_ROUTINE_DB_NAME: "{{resolve:ssm:DEV_LIFTHUS_ROUTINE_DB_NAME:1}}"
        DEV_LIFTHUS_ROUTINE_DB_HOST: "{{resolve:ssm:DEV_LIFTHUS_ROUTINE_DB_HOST:1}}"
        DEV_LIFTHUS_ROUTINE_DB_PORT: "{{resolve:ssm:DEV_LIFTHUS_ROUTINE_DB_PORT:1}}"

        LIFTHUS_ACCESS_KEY_ID: "{{resolve:ssm:LIFTHUS_ACCESS_KEY_ID:1}}"
        LIFTHUS_SECRET_ACCESS_KEY: "{{resolve:ssm:LIFTHUS_SECRET_ACCESS_KEY:1}}"

        HUS_SECRET_KEY: "{{resolve:ssm:HUS_SECRET_KEY:1}}"
        HUS_ENV: "{{resolve:ssm:HUS_ENV:1}}"
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'*'"
      AllowMethods: "'*'"
      MaxAge: "'43200'"
    TracingEnabled: true

Resources:
  # auth services ==================================================
  DevLifthusAuthApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: DevLifthusAuthApi
      Domain:
        DomainName: "auth.dev.lifthus.com"
        CertificateArn: "{{resolve:ssm:DEV_LIFTHUS_ACM_ARN:1}}"
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: "{{resolve:ssm:LIFTHUS_HOSTED_ZONE_ID:1}}"
          RecordName: "auth.dev.lifthus.com"
  DevLifthusAuthService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/lifthus-auth/
      Handler: lifthus-auth
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        DevLifthusAuthServiceRoot:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevLifthusAuthApi
            Path: "/auth"
            Method: ANY
        DevLifthusAuthServiceProxy:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevLifthusAuthApi
            Path: /auth/{proxy+}
            Method: ANY
        # * VPC applied well but outbound request from Lambda not working so this prop is commented out
        #VpcConfig:
        #   SubnetIds: # subnet for lambda function
        #     - "{{resolve:ssm:US_WEST_2A_SUBNET_ID:1}}"
        #   SecurityGroupIds: # security group for lambda function
        #     - "{{resolve:ssm:CLOUDHUS_SG_ID:1}}"

  # lifthus api ==================================================
  DevLifthusApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: DevLifthusApi
      Domain:
        DomainName: "api.dev.lifthus.com"
        CertificateArn: "{{resolve:ssm:DEV_LIFTHUS_ACM_ARN:1}}"
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: "{{resolve:ssm:LIFTHUS_HOSTED_ZONE_ID:1}}"
          RecordName: "api.dev.lifthus.com"
  # lifthus post service
  DevLifthusPostService:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 384
      CodeUri: services/post/
      Handler: lambda.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        LifthusPostServiceRoot:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevLifthusApi
            Path: /post
            Method: ANY
        LifthusPostServiceProxy:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevLifthusApi
            Path: /post/{proxy+}
            Method: ANY
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/lambda.ts
        Format: "cjs"
        Minify: false
        ## not working with the following prop
        # OutExtension:
        #   - .js=.mjs
        Target: "es2017"
        External:
          - "@nestjs/microservices"
          - "@nestjs/websockets"
          - "cache-manager"
          - "class-transformer"
          - "class-validator"
  # S3Bucket:
  #   Type: "AWS::S3::Bucket"
  #   DeletionPolicy: Retain
  #   Properties:
  #     BucketName: lifthus-post-bucket
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: false
  #       BlockPublicPolicy: false
  #       IgnorePublicAcls: false
  #       RestrictPublicBuckets: false
  #     OwnershipControls:
  #       Rules:
  #         - ObjectOwnership: BucketOwnerPreferred
  #     AccessControl: AwsExecRead
  DevLifthusRoutineService:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: services/routine/cmd/routine
      Handler: routine
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        DevLifthusRoutineServiceRoot:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevLifthusApi
            Path: /routine
            Method: ANY
        DevLifthusRoutineServiceProxy:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevLifthusApi
            Path: /routine/{proxy+}
            Method: ANY
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
          - ""
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
          - ""
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      AutoConfigurationEnabled: "true"
    DependsOn: ApplicationResourceGroup
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  LifthusAuthApi:
    Description: Lifthus auth dev api endpoint base url
    Value: "https://auth.dev.lifthus.com/auth"
  LifthusApi:
    Description: Lifthus dev api endpoint base url
    Value: "https://api.dev.lifthus.com"

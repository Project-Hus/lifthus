// Code generated by ent, DO NOT EDIT.

package session

import (
	"lifthus-auth/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUID, v))
}

// ConnectedAt applies equality check predicate on the "connected_at" field. It's identical to ConnectedAtEQ.
func ConnectedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldConnectedAt, v))
}

// SignedAt applies equality check predicate on the "signed_at" field. It's identical to SignedAtEQ.
func SignedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSignedAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUID, vs...))
}

// UIDIsNil applies the IsNil predicate on the "uid" field.
func UIDIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldUID))
}

// UIDNotNil applies the NotNil predicate on the "uid" field.
func UIDNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldUID))
}

// ConnectedAtEQ applies the EQ predicate on the "connected_at" field.
func ConnectedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldConnectedAt, v))
}

// ConnectedAtNEQ applies the NEQ predicate on the "connected_at" field.
func ConnectedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldConnectedAt, v))
}

// ConnectedAtIn applies the In predicate on the "connected_at" field.
func ConnectedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldConnectedAt, vs...))
}

// ConnectedAtNotIn applies the NotIn predicate on the "connected_at" field.
func ConnectedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldConnectedAt, vs...))
}

// ConnectedAtGT applies the GT predicate on the "connected_at" field.
func ConnectedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldConnectedAt, v))
}

// ConnectedAtGTE applies the GTE predicate on the "connected_at" field.
func ConnectedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldConnectedAt, v))
}

// ConnectedAtLT applies the LT predicate on the "connected_at" field.
func ConnectedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldConnectedAt, v))
}

// ConnectedAtLTE applies the LTE predicate on the "connected_at" field.
func ConnectedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldConnectedAt, v))
}

// SignedAtEQ applies the EQ predicate on the "signed_at" field.
func SignedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSignedAt, v))
}

// SignedAtNEQ applies the NEQ predicate on the "signed_at" field.
func SignedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSignedAt, v))
}

// SignedAtIn applies the In predicate on the "signed_at" field.
func SignedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSignedAt, vs...))
}

// SignedAtNotIn applies the NotIn predicate on the "signed_at" field.
func SignedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSignedAt, vs...))
}

// SignedAtGT applies the GT predicate on the "signed_at" field.
func SignedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSignedAt, v))
}

// SignedAtGTE applies the GTE predicate on the "signed_at" field.
func SignedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSignedAt, v))
}

// SignedAtLT applies the LT predicate on the "signed_at" field.
func SignedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSignedAt, v))
}

// SignedAtLTE applies the LTE predicate on the "signed_at" field.
func SignedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSignedAt, v))
}

// SignedAtIsNil applies the IsNil predicate on the "signed_at" field.
func SignedAtIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldSignedAt))
}

// SignedAtNotNil applies the NotNil predicate on the "signed_at" field.
func SignedAtNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldSignedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		p(s.Not())
	})
}

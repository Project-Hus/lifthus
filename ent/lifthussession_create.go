// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lifthus-auth/ent/lifthussession"
	"lifthus-auth/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LifthusSessionCreate is the builder for creating a LifthusSession entity.
type LifthusSessionCreate struct {
	config
	mutation *LifthusSessionMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (lsc *LifthusSessionCreate) SetUID(u uuid.UUID) *LifthusSessionCreate {
	lsc.mutation.SetUID(u)
	return lsc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (lsc *LifthusSessionCreate) SetNillableUID(u *uuid.UUID) *LifthusSessionCreate {
	if u != nil {
		lsc.SetUID(*u)
	}
	return lsc
}

// SetConnectedAt sets the "connected_at" field.
func (lsc *LifthusSessionCreate) SetConnectedAt(t time.Time) *LifthusSessionCreate {
	lsc.mutation.SetConnectedAt(t)
	return lsc
}

// SetNillableConnectedAt sets the "connected_at" field if the given value is not nil.
func (lsc *LifthusSessionCreate) SetNillableConnectedAt(t *time.Time) *LifthusSessionCreate {
	if t != nil {
		lsc.SetConnectedAt(*t)
	}
	return lsc
}

// SetID sets the "id" field.
func (lsc *LifthusSessionCreate) SetID(u uuid.UUID) *LifthusSessionCreate {
	lsc.mutation.SetID(u)
	return lsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lsc *LifthusSessionCreate) SetNillableID(u *uuid.UUID) *LifthusSessionCreate {
	if u != nil {
		lsc.SetID(*u)
	}
	return lsc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lsc *LifthusSessionCreate) SetUserID(id uuid.UUID) *LifthusSessionCreate {
	lsc.mutation.SetUserID(id)
	return lsc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lsc *LifthusSessionCreate) SetNillableUserID(id *uuid.UUID) *LifthusSessionCreate {
	if id != nil {
		lsc = lsc.SetUserID(*id)
	}
	return lsc
}

// SetUser sets the "user" edge to the User entity.
func (lsc *LifthusSessionCreate) SetUser(u *User) *LifthusSessionCreate {
	return lsc.SetUserID(u.ID)
}

// Mutation returns the LifthusSessionMutation object of the builder.
func (lsc *LifthusSessionCreate) Mutation() *LifthusSessionMutation {
	return lsc.mutation
}

// Save creates the LifthusSession in the database.
func (lsc *LifthusSessionCreate) Save(ctx context.Context) (*LifthusSession, error) {
	lsc.defaults()
	return withHooks[*LifthusSession, LifthusSessionMutation](ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LifthusSessionCreate) SaveX(ctx context.Context) *LifthusSession {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LifthusSessionCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LifthusSessionCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LifthusSessionCreate) defaults() {
	if _, ok := lsc.mutation.ConnectedAt(); !ok {
		v := lifthussession.DefaultConnectedAt()
		lsc.mutation.SetConnectedAt(v)
	}
	if _, ok := lsc.mutation.ID(); !ok {
		v := lifthussession.DefaultID()
		lsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LifthusSessionCreate) check() error {
	if _, ok := lsc.mutation.ConnectedAt(); !ok {
		return &ValidationError{Name: "connected_at", err: errors.New(`ent: missing required field "LifthusSession.connected_at"`)}
	}
	return nil
}

func (lsc *LifthusSessionCreate) sqlSave(ctx context.Context) (*LifthusSession, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LifthusSessionCreate) createSpec() (*LifthusSession, *sqlgraph.CreateSpec) {
	var (
		_node = &LifthusSession{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(lifthussession.Table, sqlgraph.NewFieldSpec(lifthussession.FieldID, field.TypeUUID))
	)
	if id, ok := lsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lsc.mutation.ConnectedAt(); ok {
		_spec.SetField(lifthussession.FieldConnectedAt, field.TypeTime, value)
		_node.ConnectedAt = value
	}
	if nodes := lsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lifthussession.UserTable,
			Columns: []string{lifthussession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LifthusSessionCreateBulk is the builder for creating many LifthusSession entities in bulk.
type LifthusSessionCreateBulk struct {
	config
	builders []*LifthusSessionCreate
}

// Save creates the LifthusSession entities in the database.
func (lscb *LifthusSessionCreateBulk) Save(ctx context.Context) ([]*LifthusSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LifthusSession, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LifthusSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LifthusSessionCreateBulk) SaveX(ctx context.Context) []*LifthusSession {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LifthusSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LifthusSessionCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}

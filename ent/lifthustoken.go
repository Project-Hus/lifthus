// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lifthus-auth/ent/lifthustoken"
	"lifthus-auth/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// LifthusToken is the model entity for the LifthusToken schema.
type LifthusToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty" json:tid,omitempty`
	// UID holds the value of the "uid" field.
	UID uuid.UUID `json:"uid,omitempty"`
	// Revoked holds the value of the "revoked" field.
	Revoked bool `json:"revoked,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LifthusTokenQuery when eager-loading is set.
	Edges LifthusTokenEdges `json:"edges"`
}

// LifthusTokenEdges holds the relations/edges for other nodes in the graph.
type LifthusTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LifthusTokenEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LifthusToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lifthustoken.FieldRevoked:
			values[i] = new(sql.NullBool)
		case lifthustoken.FieldCreatedAt, lifthustoken.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case lifthustoken.FieldID, lifthustoken.FieldUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LifthusToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LifthusToken fields.
func (lt *LifthusToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lifthustoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lt.ID = *value
			}
		case lifthustoken.FieldUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value != nil {
				lt.UID = *value
			}
		case lifthustoken.FieldRevoked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field revoked", values[i])
			} else if value.Valid {
				lt.Revoked = value.Bool
			}
		case lifthustoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lt.CreatedAt = value.Time
			}
		case lifthustoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lt.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the LifthusToken entity.
func (lt *LifthusToken) QueryUser() *UserQuery {
	return NewLifthusTokenClient(lt.config).QueryUser(lt)
}

// Update returns a builder for updating this LifthusToken.
// Note that you need to call LifthusToken.Unwrap() before calling this method if this LifthusToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LifthusToken) Update() *LifthusTokenUpdateOne {
	return NewLifthusTokenClient(lt.config).UpdateOne(lt)
}

// Unwrap unwraps the LifthusToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LifthusToken) Unwrap() *LifthusToken {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LifthusToken is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LifthusToken) String() string {
	var builder strings.Builder
	builder.WriteString("LifthusToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lt.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", lt.UID))
	builder.WriteString(", ")
	builder.WriteString("revoked=")
	builder.WriteString(fmt.Sprintf("%v", lt.Revoked))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LifthusTokens is a parsable slice of LifthusToken.
type LifthusTokens []*LifthusToken

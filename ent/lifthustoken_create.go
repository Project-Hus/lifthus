// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lifthus-auth/ent/lifthustoken"
	"lifthus-auth/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LifthusTokenCreate is the builder for creating a LifthusToken entity.
type LifthusTokenCreate struct {
	config
	mutation *LifthusTokenMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (ltc *LifthusTokenCreate) SetUID(u uuid.UUID) *LifthusTokenCreate {
	ltc.mutation.SetUID(u)
	return ltc
}

// SetRevoked sets the "revoked" field.
func (ltc *LifthusTokenCreate) SetRevoked(b bool) *LifthusTokenCreate {
	ltc.mutation.SetRevoked(b)
	return ltc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (ltc *LifthusTokenCreate) SetNillableRevoked(b *bool) *LifthusTokenCreate {
	if b != nil {
		ltc.SetRevoked(*b)
	}
	return ltc
}

// SetCreatedAt sets the "created_at" field.
func (ltc *LifthusTokenCreate) SetCreatedAt(t time.Time) *LifthusTokenCreate {
	ltc.mutation.SetCreatedAt(t)
	return ltc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltc *LifthusTokenCreate) SetNillableCreatedAt(t *time.Time) *LifthusTokenCreate {
	if t != nil {
		ltc.SetCreatedAt(*t)
	}
	return ltc
}

// SetUpdatedAt sets the "updated_at" field.
func (ltc *LifthusTokenCreate) SetUpdatedAt(t time.Time) *LifthusTokenCreate {
	ltc.mutation.SetUpdatedAt(t)
	return ltc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ltc *LifthusTokenCreate) SetNillableUpdatedAt(t *time.Time) *LifthusTokenCreate {
	if t != nil {
		ltc.SetUpdatedAt(*t)
	}
	return ltc
}

// SetID sets the "id" field.
func (ltc *LifthusTokenCreate) SetID(u uuid.UUID) *LifthusTokenCreate {
	ltc.mutation.SetID(u)
	return ltc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ltc *LifthusTokenCreate) SetNillableID(u *uuid.UUID) *LifthusTokenCreate {
	if u != nil {
		ltc.SetID(*u)
	}
	return ltc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ltc *LifthusTokenCreate) SetUserID(id uuid.UUID) *LifthusTokenCreate {
	ltc.mutation.SetUserID(id)
	return ltc
}

// SetUser sets the "user" edge to the User entity.
func (ltc *LifthusTokenCreate) SetUser(u *User) *LifthusTokenCreate {
	return ltc.SetUserID(u.ID)
}

// Mutation returns the LifthusTokenMutation object of the builder.
func (ltc *LifthusTokenCreate) Mutation() *LifthusTokenMutation {
	return ltc.mutation
}

// Save creates the LifthusToken in the database.
func (ltc *LifthusTokenCreate) Save(ctx context.Context) (*LifthusToken, error) {
	ltc.defaults()
	return withHooks[*LifthusToken, LifthusTokenMutation](ctx, ltc.sqlSave, ltc.mutation, ltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LifthusTokenCreate) SaveX(ctx context.Context) *LifthusToken {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LifthusTokenCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LifthusTokenCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltc *LifthusTokenCreate) defaults() {
	if _, ok := ltc.mutation.Revoked(); !ok {
		v := lifthustoken.DefaultRevoked
		ltc.mutation.SetRevoked(v)
	}
	if _, ok := ltc.mutation.CreatedAt(); !ok {
		v := lifthustoken.DefaultCreatedAt()
		ltc.mutation.SetCreatedAt(v)
	}
	if _, ok := ltc.mutation.UpdatedAt(); !ok {
		v := lifthustoken.DefaultUpdatedAt()
		ltc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ltc.mutation.ID(); !ok {
		v := lifthustoken.DefaultID()
		ltc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LifthusTokenCreate) check() error {
	if _, ok := ltc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "LifthusToken.uid"`)}
	}
	if _, ok := ltc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`ent: missing required field "LifthusToken.revoked"`)}
	}
	if _, ok := ltc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LifthusToken.created_at"`)}
	}
	if _, ok := ltc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LifthusToken.updated_at"`)}
	}
	if _, ok := ltc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LifthusToken.user"`)}
	}
	return nil
}

func (ltc *LifthusTokenCreate) sqlSave(ctx context.Context) (*LifthusToken, error) {
	if err := ltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ltc.mutation.id = &_node.ID
	ltc.mutation.done = true
	return _node, nil
}

func (ltc *LifthusTokenCreate) createSpec() (*LifthusToken, *sqlgraph.CreateSpec) {
	var (
		_node = &LifthusToken{config: ltc.config}
		_spec = sqlgraph.NewCreateSpec(lifthustoken.Table, sqlgraph.NewFieldSpec(lifthustoken.FieldID, field.TypeUUID))
	)
	if id, ok := ltc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ltc.mutation.Revoked(); ok {
		_spec.SetField(lifthustoken.FieldRevoked, field.TypeBool, value)
		_node.Revoked = value
	}
	if value, ok := ltc.mutation.CreatedAt(); ok {
		_spec.SetField(lifthustoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ltc.mutation.UpdatedAt(); ok {
		_spec.SetField(lifthustoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ltc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lifthustoken.UserTable,
			Columns: []string{lifthustoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LifthusTokenCreateBulk is the builder for creating many LifthusToken entities in bulk.
type LifthusTokenCreateBulk struct {
	config
	builders []*LifthusTokenCreate
}

// Save creates the LifthusToken entities in the database.
func (ltcb *LifthusTokenCreateBulk) Save(ctx context.Context) ([]*LifthusToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LifthusToken, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LifthusTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LifthusTokenCreateBulk) SaveX(ctx context.Context) []*LifthusToken {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LifthusTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LifthusTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}

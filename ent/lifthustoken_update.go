// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lifthus-auth/ent/lifthustoken"
	"lifthus-auth/ent/predicate"
	"lifthus-auth/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LifthusTokenUpdate is the builder for updating LifthusToken entities.
type LifthusTokenUpdate struct {
	config
	hooks    []Hook
	mutation *LifthusTokenMutation
}

// Where appends a list predicates to the LifthusTokenUpdate builder.
func (ltu *LifthusTokenUpdate) Where(ps ...predicate.LifthusToken) *LifthusTokenUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetUID sets the "uid" field.
func (ltu *LifthusTokenUpdate) SetUID(u uuid.UUID) *LifthusTokenUpdate {
	ltu.mutation.SetUID(u)
	return ltu
}

// SetRevoked sets the "revoked" field.
func (ltu *LifthusTokenUpdate) SetRevoked(b bool) *LifthusTokenUpdate {
	ltu.mutation.SetRevoked(b)
	return ltu
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (ltu *LifthusTokenUpdate) SetNillableRevoked(b *bool) *LifthusTokenUpdate {
	if b != nil {
		ltu.SetRevoked(*b)
	}
	return ltu
}

// SetCreatedAt sets the "created_at" field.
func (ltu *LifthusTokenUpdate) SetCreatedAt(t time.Time) *LifthusTokenUpdate {
	ltu.mutation.SetCreatedAt(t)
	return ltu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltu *LifthusTokenUpdate) SetNillableCreatedAt(t *time.Time) *LifthusTokenUpdate {
	if t != nil {
		ltu.SetCreatedAt(*t)
	}
	return ltu
}

// SetUpdatedAt sets the "updated_at" field.
func (ltu *LifthusTokenUpdate) SetUpdatedAt(t time.Time) *LifthusTokenUpdate {
	ltu.mutation.SetUpdatedAt(t)
	return ltu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ltu *LifthusTokenUpdate) SetUserID(id uuid.UUID) *LifthusTokenUpdate {
	ltu.mutation.SetUserID(id)
	return ltu
}

// SetUser sets the "user" edge to the User entity.
func (ltu *LifthusTokenUpdate) SetUser(u *User) *LifthusTokenUpdate {
	return ltu.SetUserID(u.ID)
}

// Mutation returns the LifthusTokenMutation object of the builder.
func (ltu *LifthusTokenUpdate) Mutation() *LifthusTokenMutation {
	return ltu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ltu *LifthusTokenUpdate) ClearUser() *LifthusTokenUpdate {
	ltu.mutation.ClearUser()
	return ltu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LifthusTokenUpdate) Save(ctx context.Context) (int, error) {
	ltu.defaults()
	return withHooks[int, LifthusTokenMutation](ctx, ltu.sqlSave, ltu.mutation, ltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LifthusTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LifthusTokenUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LifthusTokenUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltu *LifthusTokenUpdate) defaults() {
	if _, ok := ltu.mutation.UpdatedAt(); !ok {
		v := lifthustoken.UpdateDefaultUpdatedAt()
		ltu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LifthusTokenUpdate) check() error {
	if _, ok := ltu.mutation.UserID(); ltu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LifthusToken.user"`)
	}
	return nil
}

func (ltu *LifthusTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lifthustoken.Table, lifthustoken.Columns, sqlgraph.NewFieldSpec(lifthustoken.FieldID, field.TypeUUID))
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.Revoked(); ok {
		_spec.SetField(lifthustoken.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := ltu.mutation.CreatedAt(); ok {
		_spec.SetField(lifthustoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ltu.mutation.UpdatedAt(); ok {
		_spec.SetField(lifthustoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if ltu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lifthustoken.UserTable,
			Columns: []string{lifthustoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lifthustoken.UserTable,
			Columns: []string{lifthustoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lifthustoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltu.mutation.done = true
	return n, nil
}

// LifthusTokenUpdateOne is the builder for updating a single LifthusToken entity.
type LifthusTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LifthusTokenMutation
}

// SetUID sets the "uid" field.
func (ltuo *LifthusTokenUpdateOne) SetUID(u uuid.UUID) *LifthusTokenUpdateOne {
	ltuo.mutation.SetUID(u)
	return ltuo
}

// SetRevoked sets the "revoked" field.
func (ltuo *LifthusTokenUpdateOne) SetRevoked(b bool) *LifthusTokenUpdateOne {
	ltuo.mutation.SetRevoked(b)
	return ltuo
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (ltuo *LifthusTokenUpdateOne) SetNillableRevoked(b *bool) *LifthusTokenUpdateOne {
	if b != nil {
		ltuo.SetRevoked(*b)
	}
	return ltuo
}

// SetCreatedAt sets the "created_at" field.
func (ltuo *LifthusTokenUpdateOne) SetCreatedAt(t time.Time) *LifthusTokenUpdateOne {
	ltuo.mutation.SetCreatedAt(t)
	return ltuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltuo *LifthusTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *LifthusTokenUpdateOne {
	if t != nil {
		ltuo.SetCreatedAt(*t)
	}
	return ltuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ltuo *LifthusTokenUpdateOne) SetUpdatedAt(t time.Time) *LifthusTokenUpdateOne {
	ltuo.mutation.SetUpdatedAt(t)
	return ltuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ltuo *LifthusTokenUpdateOne) SetUserID(id uuid.UUID) *LifthusTokenUpdateOne {
	ltuo.mutation.SetUserID(id)
	return ltuo
}

// SetUser sets the "user" edge to the User entity.
func (ltuo *LifthusTokenUpdateOne) SetUser(u *User) *LifthusTokenUpdateOne {
	return ltuo.SetUserID(u.ID)
}

// Mutation returns the LifthusTokenMutation object of the builder.
func (ltuo *LifthusTokenUpdateOne) Mutation() *LifthusTokenMutation {
	return ltuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ltuo *LifthusTokenUpdateOne) ClearUser() *LifthusTokenUpdateOne {
	ltuo.mutation.ClearUser()
	return ltuo
}

// Where appends a list predicates to the LifthusTokenUpdate builder.
func (ltuo *LifthusTokenUpdateOne) Where(ps ...predicate.LifthusToken) *LifthusTokenUpdateOne {
	ltuo.mutation.Where(ps...)
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LifthusTokenUpdateOne) Select(field string, fields ...string) *LifthusTokenUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LifthusToken entity.
func (ltuo *LifthusTokenUpdateOne) Save(ctx context.Context) (*LifthusToken, error) {
	ltuo.defaults()
	return withHooks[*LifthusToken, LifthusTokenMutation](ctx, ltuo.sqlSave, ltuo.mutation, ltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LifthusTokenUpdateOne) SaveX(ctx context.Context) *LifthusToken {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LifthusTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LifthusTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltuo *LifthusTokenUpdateOne) defaults() {
	if _, ok := ltuo.mutation.UpdatedAt(); !ok {
		v := lifthustoken.UpdateDefaultUpdatedAt()
		ltuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LifthusTokenUpdateOne) check() error {
	if _, ok := ltuo.mutation.UserID(); ltuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LifthusToken.user"`)
	}
	return nil
}

func (ltuo *LifthusTokenUpdateOne) sqlSave(ctx context.Context) (_node *LifthusToken, err error) {
	if err := ltuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lifthustoken.Table, lifthustoken.Columns, sqlgraph.NewFieldSpec(lifthustoken.FieldID, field.TypeUUID))
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LifthusToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lifthustoken.FieldID)
		for _, f := range fields {
			if !lifthustoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lifthustoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.Revoked(); ok {
		_spec.SetField(lifthustoken.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := ltuo.mutation.CreatedAt(); ok {
		_spec.SetField(lifthustoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ltuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lifthustoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if ltuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lifthustoken.UserTable,
			Columns: []string{lifthustoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lifthustoken.UserTable,
			Columns: []string{lifthustoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LifthusToken{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lifthustoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltuo.mutation.done = true
	return _node, nil
}
